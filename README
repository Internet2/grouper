#
# $Id: README,v 1.4 2004-03-12 18:34:22 blair Exp $
#

 ---------
/ LINKS /
--------

+ Grouper Architecture:
    <file:///home/blair/cvs/work/docs/draft-barton-grouptools-arch-02.html>
+ Grouper Roadmap:
    <http://home.uchicago.edu/~tbarton/draft-barton-grouper-roadmap-pre01-2.html>


 -----------
/ ROADMAP /
----------

+ Resolve Internet2 IP questions:
  + <http://members.internet2.edu/intellectualproperty.html>
+ Contract!?!?
+ Sync with "official" roadmap
+ RDBMS tables
+ API Specification
+ Configuration files
  + What format?  Please don't say XML!
    + java.util.Properties (davel)
+ Command line arguments
+ Returning errors/diagnostic messages?
  + Is this part of logging?


 --------
/ TODO /
-------

+ Basically everything
+ Ant
+ Javadoc
+ Crib package/source layout from Shibboleth
* AuthN/AuthZ interfaces OR:
  * Management of authorization internal to Grouper.
  * Lookup and presentation of memberIDs, i.e., the opaque identifiers
    of external objects that are members of groups.
  * Determination of last activity time of a group.

    Grouper will include an implementation of the authorization
    interface that relies on groups within the Groups Registry to
    express who the Groups API will permit what access to the Groups
    Registry and to the API.

    Grouper will include an implementation of a lookup and presentation
    interface that refers to a member table in the Groups Registry.
    This table will translate memberIDs into presentationIDs,
    enabling the UI to search for and present member identifiers
    in terms that may be more meaningful to humans than memberIDs.
    Grouper will also include a program to perform batch maintenance
    of this table from external sources, and the API will include
    a corresponding lookup function. A site may wish to implement
    the member lookup and presentation interface in a manner that
    refers instead to their LDAP directory, for example.



 ---------
/ USAGE /
--------

  Creating
  ~~~~~~~~
    # Start a session.  'cred' shall remain a nebulous and
    # inconsequential
    # black box for the time being.
    sessionID = Session_start(cred)

    # Get a groupID to use for when creating a new group?  Presumably
    # this returns some unused primary key value from the 'group'
    # table, either via autoincrementing or a more pseudorandom
    # selection.
    groupID = New_groupID(groupName)

    # And now create the group, defaulting the base group type
    Create_group(groupID)

    # Remove the session from the session table and peform other
    # required cleanup activities.
    Session_end(sessionID)

  Deleting
  ~~~~~~~~
    # Start a session.  'cred' shall remain a nebulous and
    # inconsequential black box for the time being.
    sessionID = Session_start(cred)

    # And now delete the group reference by groupID.  Whatever that
    # entails.  How we know *what* groupID to use is another matter
    # altogether.
    Delete_group(groupID)

    # Remove the session from the session table and peform other
    # required cleanup activities.
    Session_end(sessionID)


That was the idea, conceived at a moment in which I imagined groupName
to be a distinguished element (sometimes I still do). Also related to
your Q below, as api users' will often know the group by way of its
name. Alternatives are something like Get_groupID(groupName) which
either returns an existing or creates a new groupID (or maybe just
returns existing ones); have Create_group create a new groupID and
assign a groupName. This is not in stone. See related answer below.
 
>- Are the following examples rough representations of how one would
>  create and delete a group?
 
yes
 
>- There does not appear to be anything in the API (as of -02) to
>  provide a way of listing groups/groupIDs.  As most of the API
>  requires knowing a groupID, how is one supposed to determine what
>  groupID to use for the various operations?
 
True. Missing for sure is a way to map groupName -> groupID. Maybe
Get_groupID(groupName). Further discussion is needed on what types
of group selection criteria we should support. There is a desire
to not build much query capability into this api - just enough to
manage, export, and age. Fetching a particular group using groupName
seems like it should in. Maybe selecting all groups tagged as being
of interest to a given provisioning connector or of a specified
groupType. And there remains the question you and I spoke about
regarding whether to expose a "find all Gs containing M" (Groups
containing Member) function that is surely to be needed under the
covers. Apart from these, I can't think of any other fields lying
around that one might select from, at least with regard to base
types.
 
>- And now, looking at the API again, I don't see anything that could be
>  used to add/delete individual group memberships.
 
Add_group_data & Remove_group_data can reference groupFieldIDs of
membership fields. Or do you think it more natural to have separate
data and membership modifying functions?


 -----------------------
/ RUBBISH TO ORGANIZE /
----------------------

- Is this correct?  Or should it reflect the additional types of
  privileges?
   member:hasPriv (subjectID, groupName, CREATE || VIEW || READ || UPDATE || DELETE)
- How does one specify *everyone can join* for an optin list?
  - Does one take the same approach for optouts?
    - I suppose one could just have a group of *everyone*
      - Should the default be 'everyone' or 'nobody'?
- optouts/views formatting
- Consistent use of "opt(in|out)/opt-(in|out)"
- 'admin' is all inclusive
- "Likewise, search hits for groups and membership specifications for
  groups are filtered by the subject's viewing privilege,"
  - Does viewing only allow the display of the group's existence or
    does it also allow display of members?
  - What is meant by "membership specifications"?
- Optional namespace for personal groups that is site-configurable?
- General questions/concerns about the security model and the extension
  of the security model that I can't exactly formulate.  Something is
  bugging me but I'm not sure what.

- ??? Where/When is cf sucked in?
  - cf jsp case
    - remind myself how jsps work
      - when 
  - Grouper object as singleton?
- XXX each instance of the grouper class represent single groups
- ??? maintenance of member table; how do we add new members?
  - NOTE: 'members', *not* 'membership' table
    - separate program for batch/diff mods to 'members' table?  Or do
      we go through the API?

- XXX Make note of all site configurable options
- Pedantic: s,Blair Christensen,blair christensen.,

