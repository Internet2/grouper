#
# Copyright 2019 Internet2
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# Grouper morphString Configuration
# $Id: grouper.hibernate.example.properties,v 1.9 2009-08-11 20:18:09 mchyzer Exp $
#


########################################
## Config chaining hierarchy
## The grouper morphString config uses Grouper Configuration Overlays (documented on wiki)
## By default the configuration is read from morphString.base.properties
## (which should not be edited), and the morphString.properties overlays
## the base settings.  See the morphString.base.properties for the possible
## settings that can be applied to the morphString.properties
########################################

# comma separated config files that override each other (files on the right override the left)
# each should start with file: or classpath:
# e.g. classpath:grouper.hibernate.base.properties, file:c:/temp/myFile.properties
grouper.morphString.config.hierarchy = classpath:morphString.base.properties, classpath:morphString.properties

# seconds between checking to see if the config files are updated
grouper.morphString.config.secondsBetweenUpdateChecks = 60

########################################
## Encryption configuration
########################################

# Put a random alphanumeric string (Case sensitive) for the password encryption.  e.g. fh43IRJ4Nf5jn4Qp9k2
# or put a filename where the random alphanumeric string is.  e.g. c:/whatever/key.txt
# use encrypt.key.elConfig instead if the config has an expression language scriptlet
encrypt.key.elConfig = ${elUtils.processEnvVarOrFileNoTrim('GROUPER_MORPHSTRING_ENCRYPT_KEY')}

# set this to true if you have slashes in your passwords and dont want to look in external files or unencrypt
encrypt.disableExternalFileLookup = false 

# this is new in 2.5.23+ defaulting to true.  if the morph secret is not in morphString.properties, but instead is in 
# an external file, then if this is true then trim whitespace (e.g. newline).  Note, previous to 2.5.23, 
# the whitespace or newline(s) were part of the secret.  Set to false if you had an installation with external file
# and whitespace
encrypt.trimWhitespaceFromMorphSecretFile = true
