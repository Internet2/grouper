
# Grouper API 

This file contains a synopsis of the Grouper API.  For more details,
see the API javadoc and other documentation.

$Id: API.txt,v 1.23 2006-09-21 19:21:10 blair Exp $

---

# Interfaces

## AccessAdapter
* Set                   getSubjectsWithPriv(GrouperSession, group, access priv)
* Set                   getGroupsWhereSubjectHasPriv(GrouperSession, subject, access priv)
* Set                   getPrivs(GrouperSession, group, subject)
* void                  grantPriv(GrouperSession, group, subject, access priv)
* boolean               hasPriv(GrouperSession, group, subject, access priv)
* void                  revokePriv(GrouperSession, group, access priv)
* void                  revokePriv(GrouperSession, group, subject, access priv)

## NamingAdapter
* Set                   getSubjectsWithPriv(GrouperSession, stem, naming priv)
* Set                   getStemsWhereSubjectHasPriv(GrouperSession, subject, naming priv)
* Set                   getPrivs(GrouperSession, stem, subject)
* void                  grantPriv(GrouperSession, stem, subject, naming priv)
* boolean               hasPriv(GrouperSession, stem, subject, naming priv)
* void                  revokePriv(GrouperSession, stem, naming priv)
* void                  revokePriv(GrouperSession, stem, subject, naming priv)

## PrivilegeCache - SUBJECT TO CHANGE!
* PrivilegeCacheElement get(Owner, Subject, Privilege)
* void                  grantPriv(Owner, Subject, Privilege)
* void                  put(Owner, Subject, Privilege, boolean)
* void                  revokePriv(Owner, Privilege)
* void                  revokePriv(Owner, Subject, Privilege)
* void                  removeAll()
* void                  update(Owner, Subject, Privilege, boolean)

## QueryFilter
* Set                   getResults(GrouperSession)

## SubjectCache - SUBJECT TO CHANGE
* Subject               get(id, type, source)
* void                  put(id, type, source, Subject)
* void                  removeAll()

---

# Exceptions
* AttributeNotFoundException
* GrantPrivilegeException
* GroupAddException
* GroupDeleteException
* GrouperException
* GrouperRuntimeException extends RuntimeException
* GroupModifyException
* GroupNotFoundException
* InsufficientPrivilegeException
* MemberAddException
* MemberDeleteException
* MemberNotFoundException
* MembershipNotFoundException
* PrivilegeCacheException
* QueryException
* RevokePrivilegeException
* SchemaException
* GrouperSessionException
* StemAddException
* StemModifyException
* StemNotFoundException
* SubjectCacheException

---

# Classes

## AccessPrivilege 
* Group                 getGroup()
* String                getImplementationName()
* boolean               isRevokable()
* String                getName()
* Subject               getOwner()
* Subject               getSubject()

## BasePrivilegeCache - SUBJECT TO CHANGE!
* PrivilegeCache        BasePrivilegeCache.getCache(klass)

## BaseQueryFilter implements QueryFilter
* Set                   filterByScope(stem, candidates)
* Set                   getResults(GrouperSession)

## BaseSubjectCache - SUBJECT TO CHANGE!
* SubjectCache          BaseSubjectCache.getCache(klass)

## ComplementFilter extends BaseQueryFilter

## Composite extends Owner
* Group                 getLeftGroup()
* Group                 getOwnerGroup()
* Group                 getRightGroup()

## CompositeFinder
* Set                   CompositeFinder.findAsFactor(Group)
* Composite             CompositeFinder.findAsOwner(Group)

## Field
* GroupType             getGroupType()
* String                getName()
* Privilege             getReadPriv()
* boolean               getRequired()
* FieldType             getType()
* Privilege             getWritePriv()

## FieldFinder
* Field                 FieldFinder.find(name)
* Set                   FieldFinder.findAll()
* Set                   FieldFinder.findAllByType(fieldType)

## Group extends Owner
* Field                 Group.getDefaultList()
* void                  addCompositeMember(CompositeType, Group, Group)
* void                  addMember(subject)
* void                  addMember(subject, field)
* void                  addType(type)
* boolean               canReadField(Field)
* boolean               canReadField(Subject, Field)
* boolean               canWriteField(Field)
* boolean               canWriteField(Subject, Field)
* void                  delete()
* void                  deleteAttribute(attr)
* void                  deleteCompositeMember()
* void                  deleteMember(subject)
* void                  deleteMember(subject, field)
* void                  deleteType(type)
* Set                   getAdmins()
* String                getAttribute(attr)
* Map                   getAttributes()
* Set                   getCompositeMembers()
* Set                   getCompositeMemberships()
* String                getCreateSource()
* Subject               getCreateSubject()
* Date                  getCreateTime()
* String                getDescription()
* String                getDisplayExtension()
* String                getDisplayName()
* Set                   getEffectiveMembers()
* Set                   getEffectiveMembers(field)
* Set                   getEffectiveMemberships()
* Set                   getEffectiveMemberships(field)
* String                getExtension()
* Set                   getImmediateMembers()
* Set                   getImmediateMembers(field)
* Set                   getImmediateMemberships()
* Set                   getImmediateMemberships(field)
* Set                   getMembers()
* Set                   getMembers(field)
* Set                   getMemberships()
* Set                   getMemberships(field)
* String                getModifySource()
* Subject               getModifySubject()
* Date                  getModifyTime()
* String                getName()
* Set                   getOptins()
* Set                   getOptouts()
* Stem                  getParentStem()
* Set                   getPrivs(subject)
* Set                   getReaders()
* Set                   getRemovableTypes()
* Set                   getTypes()
* Set                   getUpdaters()
* String                getUuid()
* Set                   getViewers()
* void                  grantPriv(subject, access priv)
* boolean               hasAdmin(subject)
* boolean               hasComposite()
* boolean               hasEffectiveMember(subject)
* boolean               hasEffectiveMember(subject, field)
* boolean               hasImmediateMember(subject)
* boolean               hasImmediateMember(subject, field)
* boolean               hasOptin(subject)
* boolean               hasOptout(subject)
* boolean               hasMember(subject)
* boolean               hasMember(subject, field)
* boolean               hasRead(subject)
* boolean               hasType(type)
* boolean               hasUpdate(subject)
* boolean               hasView(subject)
* boolean               isComposite()
* void                  revokePriv(access priv)
* void                  revokePriv(subject, access priv) 
* void                  setAttribute(attr, value)
* void                  setDescription(value)
* void                  setDisplayExtension(value)
* void                  setExtension(value)
* Member                toMember()
* Subject               toSubject()

## GroupAnyAttributeFilter extends BaseQueryFilter

## GroupAttributeFilter extends BaseQueryFilter

## GroupCreatedAfterFilter extends BaseQueryFilter

## GroupCreatedBeforeFilter extends BaseQueryFilter

## GrouperAccessAdapter implements AccessAdapter

## GrouperConfig
* String                GrouperConfig.getHibernateProperty(parameter)
* String                GrouperConfig.getProperty(parameter)

## GrouperNamingAdapter implements NamingAdapter

## GrouperQuery
* GrouperQuery          GrouperQuery.createQuery(GrouperSession, filter)
* Set                   getGroups()
* Set                   getMembers()
* Set                   getMemberships()
* Set                   getStems()

## GrouperSession
* GrouperSession        GrouperSession.start(subject)
* String                getAccessClass()
* Member                getMember()
* String                getNamingClass()
* String                getSessionId()
* Date                  getStartTime()
* Subject               getSubject()
* void                  stop()

## GroupFinder
* Group                 GroupFinder.findByName(GrouperSession, name)
* Group                 GroupFinder.findByUuid(GrouperSession, uuid)

## GroupModifiedAfterFilter extends BaseQueryFilter

## GroupModifiedBeforeFilter extends BaseQueryFilter

## GroupNameFilter extends BaseQueryFilter

## GroupType
* GroupType             GroupType.createType(GrouperSession, name)
* Field                 addAttribute(GrouperSession, name, ReadAccessPrivilege, WriteAccessPrivilege, required)
* Field                 addList(GrouperSession, name, ReadAccessPrivilege, WriteAccessPrivilege)
* void                  delete(GrouperSession)
* void                  deleteField(GrouperSession, name)
* Set                   getFields()

## GroupTypeFinder
* GroupType             GroupTypeFinder.find(name)
* Set                   GroupTypeFinder.findAll()
* Set                   GroupTypeFinder.findAllAssignable()

## HibernateSubject - SUBJECT TO CHANGE!
* HibernateSubject      HibernateSubject.add(id, type, name)
* String                getId()

## IntersectionFilter extends BaseQueryFilter

## Member
* boolean               canCreate(Stem)
* boolean               canStem(Stem)
* boolean               canAdmin(Group)
* boolean               canOptin(Group)
* boolean               canOptout(Group)
* boolean               canRead(Group)
* boolean               canUpdate(Group)
* boolean               canView(Group)
* Set                   getEffectiveGroups()
* Set                   getEffectiveMemberships()
* Set                   getEffectiveMemberships(field)
* Set                   getGroups()
* Set                   getImmediateGroups()
* Set                   getImmediateMemberships()
* Set                   getImmediateMemberships(field)
* Set                   getMemberships()
* Set                   getMemberships(field)
* Set                   getPrivs(group)
* Set                   getPrivs(stem)
* Subject               getSubject()
* String                getSubjectId()
* Source                getSubjectSource()
* String                getSubjectSourceId()
* SubjectType           getSubjectType()
* String                getSubjectTypeId()
* String                getUuid()
* Set                   hasAdmin()
* boolean               hasAdmin(group)
* Set                   hasCreate()
* boolean               hasCreate(stem)
* Set                   hasOptin()
* boolean               hasOptin(group)
* Set                   hasOptout()
* boolean               hasOptout(group)
* Set                   hasRead()
* boolean               hasRead(group)
* Set                   hasStem()
* boolean               hasStem(stem)
* Set                   hasUpdate()
* boolean               hasUpdate(group)
* Set                   hasView()
* boolean               hasView(group)
* boolean               isEffectiveMember(group)
* boolean               isEffectiveMember(group, field)
* boolean               isImmediateMember(group)
* boolean               isImmediateMember(group, field)
* boolean               isMember(group)
* boolean               isMember(group, field)
* void                  setSubjectId(id)
* Group                 toGroup()

## MemberFinder
* Member                MemberFinder.findByUuid(GrouperSession, uuid)
* Member                MemberFinder.findBySubject(GrouperSession, subject)

## Membership
* Set                   getChildMemberships()
* int                   getDepth()
* Group                 getGroup()
* Field                 getList()
* Member                getMember()
* Membership            getParentMembership()
* Owner                 getVia()
* Group                 getViaGroup()

## MembershipCreatedAfterFilter extends BaseQueryFilter

## MembershipCreatedBeforeFilter extends BaseQueryFilter

## MembershipFinder
* Membership            MembershipFinder.findCompositeMembership(GrouperSession, group, subject)
* Set                   MembershipFinder.findEffectiveMemberships(GrouperSession, group, subject, field, group, depth)
* Membership            MembershipFinder.findImmediateMembership(GrouperSession, group, subject, field)

## NamingPrivilege 
* String                getImplementationName()
* boolean               isRevokable()
* String                getName()
* Subject               getOwner()
* Stem                  getStem()
* Subject               getSubject()

## NullFilter extends BaseQueryFilter

## Privilege
* Set                   Privilege.getAccessPrivs()
* Privilege             Privilege.getInstance(name)
* Set                   Privilege.getNamingPrivs()
* String                getName()
* boolean               isAccess()
* boolean               isNaming()

## PrivilegeCacheElement - SUBJECT TO CHANGE!
* PrivilegeCacheElement PrivilegeCacheElement(Owner, Subject, Privilege)
* PrivilegeCacheElement PrivilegeCacheElement(Owner, Subject, Privilege, hasPriv)
* boolean               getHasPriv()
* boolean               getIsCached()
* String                getOwnerUuid()
* String                getPrivilege()
* String                getSubjectId()
* String                getSubjectSource()
* String                getSubjectType()

## QueryFilter extends BaseQueryFilter

## Stem extends Owner
* Group                 addChildGroup(extension, displayExtension)
* Stem                  addChildStem(extension, displayExtension)
* void                  delete()
* Set                   getChildGroups()
* Set                   getChildStems()
* String                getCreateSource()
* Subject               getCreateSubject()
* Date                  getCreateTime()
* Set                   getCreators()
* String                getDescription()
* String                getDisplayExtension()
* String                getDisplayName()
* String                getExtension()
* String                getModifySource()
* Subject               getModifySubject()
* Date                  getModifyTime()
* String                getName()
* Stem                  getParentStem()
* Set                   getPrivs(subject)
* Set                   getStemmers()
* String                getUuid()
* void                  grantPriv(subject, naming priv)
* boolean               hasCreate(subject)
* boolean               hasStem(subject)
* void                  revokePriv(naming priv)
* void                  revokePriv(subject, naming priv) 
* void                  setDescription(value)
* void                  setDisplayExtension(value) 

## StemDisplayExtensionFilter extends BaseQueryFilter

## StemDisplayNameFilter extends BaseQueryFilter

## StemExtensionFilter extends BaseQueryFilter

## StemNameFilter extends BaseQueryFilter

## StemNameAnyFilter extends BaseQueryFilter

## StemCreatedAfterFilter extends BaseQueryFilter

## StemCreatedBeforeFilter extends BaseQueryFilter

## StemFinder
* Stem                  StemFinder.findByName(GrouperSession, name)
* Stem                  StemFinder.findByUuid(GrouperSession, uuid)
* Stem                  StemFinder.findRootStem(GrouperSession)

## StemNameFilter extends BaseQueryFilter

## SubjectFinder
* Subject               SubjectFinder.findById(id)  
* Subject               SubjectFinder.findById(id, type)
* Subject               SubjectFinder.findById(id, type, source)
* Subject               SubjectFinder.findByIdentifier(id)  
* Subject               SubjectFinder.findByIdentifier(id, type)
* Subject               SubjectFinder.findByIdentifier(id, type, source)
* Set                   SubjectFinder.findAll(query)
* Set                   SubjectFinder.findAll(query, source)
* Subject               SubjectFinder.findAllSubject()
* Subject               SubjectFinder.findRootSubject()
* Source                SubjectFinder.getSource(id)
* Set                   SubjectFinder.getSources()
* Set                   SubjectFinder.getSources(type)

## UnionFilter extends BaseQueryFilter

## XmlExporter - SUBJECT TO CHANGE!
* XmlExporter           XmlExporter(Session, options)
* void                  XmlExporter.main(args[])
* void                  export(Writer)
---
* void                  export(Collection, info)
* void                  export(Group, relative)
* void                  export(Stem, relative)

## XmlImporter - SUBJECT TO CHANGE!
* XmlImporter           XmlImporter(Session, options)
* void                  XmlImporter.main(args[])
* void                  load(Document)
* void                  load(Stem, Document)
---
* void                  loadFlatGroupsOrStems(Document)

## XmlReader - SUBJECT TO CHANGE
* Document              XmlReader.getDocumentFromString(string)

