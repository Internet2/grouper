
# Grouper API 

This file contains a synopsis of the Grouper API.  For more details,
see the API javadoc and other documentation.

$Id: API,v 1.129 2006-01-25 18:55:33 blair Exp $

---

# Interfaces

## AccessAdapter
* Set                 getSubjectsWithPriv(session, group, access priv)
* Set                 getGroupsWhereSubjectHasPriv(session, subject, access priv)
* Set                 getPrivs(session, group, subject)
* void                grantPriv(session, group, subject, access priv)
* boolean             hasPriv(session, group, subject, access priv)
* void                revokePriv(session, group, access priv)
* void                revokePriv(session, group, subject, access priv)

## NamingAdapter
* Set                 getSubjectsWithPriv(session, stem, naming priv)
* Set                 getStemsWhereSubjectHasPriv(session, subject, naming priv)
* Set                 getPrivs(session, stem, subject)
* void                grantPriv(session, stem, subject, naming priv)
* boolean             hasPriv(session, stem, subject, naming priv)
* void                revokePriv(session, stem, naming priv)
* void                revokePriv(session, stem, subject, naming priv)

## QueryFilter
* Set                 getResults(session)

---

# Exceptions
* AttributeNotFoundException
* GrantPrivilegeException
* GroupAddException
* GroupDeleteException
* GroupModifyException
* GroupNotFoundException
* InsufficientPrivilegeException
* MemberAddException
* MemberDeleteException
* MemberNotFoundException
* MembershipNotFoundException
* QueryException
* RevokePrivilegeException
* SchemaException
* SessionException
* StemAddException
* StemModifyException
* StemNotFoundException

---

# Classes

## AccessPrivilege 
* Group               getGroup()
* String              getImplementationName()
* boolean             isRevokable()
* String              getName()
* Subject             getOwner()
* Subject             getSubject()

## BaseQueryFilter implements QueryFilter
* Set                 filterByScope(stem, candidates)
* Set                 getResults(session)

## ComplementFilter extends BaseQueryFilter

## Field
* FieldType           getType()
* String              getName()
* Privilege           getReadPriv()
* Privilege           getWritePriv()

## FieldFinder
* Field               FieldFinder.find(name)
* Set                 FieldFinder.findAll()
* Set                 FieldFinder.findAllByType(fieldType)

## Group
* Field               Group.getDefaultList()
* void                addMember(subject)
* void                addMember(subject, field)
* void                delete()
* void                deleteAttribute(attr)
* void                deleteMember(subject)
* void                deleteMember(subject, field)
* Set                 getAdmins()
* String              getAttribute(attr)
* Map                 getAttributes()
* String              getCreateSource()
* Subject             getCreateSubject()
* Date                getCreateTime()
* String              getDescription()
* String              getDisplayExtension()
* String              getDisplayName()
* Set                 getEffectiveMembers()
* Set                 getEffectiveMembers(field)
* Set                 getEffectiveMemberships()
* Set                 getEffectiveMemberships(field)
* String              getExtension()
* Set                 getImmediateMembers()
* Set                 getImmediateMembers(field)
* Set                 getImmediateMemberships()
* Set                 getImmediateMemberships(field)
* Set                 getMembers()
* Set                 getMembers(field)
* Set                 getMemberships()
* Set                 getMemberships(field)
* String              getModifySource()
* Subject             getModifySubject()
* Date                getModifyTime()
* String              getName()
* Set                 getOptins()
* Set                 getOptouts()
* Stem                getParentStem()
* Set                 getPrivs(subject)
* Set                 getReaders()
* Set                 getTypes()
* Set                 getUpdaters()
* String              getUuid()
* Set                 getViewers()
* void                grantPriv(subject, access priv)
* boolean             hasAdmin(subject)
* boolean             hasEffectiveMember(subject)
* boolean             hasEffectiveMember(subject, field)
* boolean             hasImmediateMember(subject)
* boolean             hasImmediateMember(subject, field)
* boolean             hasOptin(subject)
* boolean             hasOptout(subject)
* boolean             hasMember(subject)
* boolean             hasMember(subject, field)
* boolean             hasRead(subject)
* boolean             hasUpdate(subject)
* boolean             hasView(subject)
* void                revokePriv(access priv)
* void                revokePriv(subject, access priv) 
* void                setAttribute(attr, value)
* void                setDescription(value)
* void                setDisplayExtension(value)
* void                setExtension(value)
* Member              toMember()
* Subject             toSubject()

## GroupCreatedAfterFilter extends BaseQueryFilter

## GroupCreatedBeforeFilter extends BaseQueryFilter

## GroupFinder
* Group               GroupFinder.findByName(session, name)
* Group               GroupFinder.findByUuid(session, uuid)

## GrouperAccessAdapter implements AccessAdapter

## GrouperNamingAdapter implements NamingAdapter

## GrouperQuery
* GrouperQuery        GrouperQuery.createQuery(session, filter)
* Set                 getGroups()
* Set                 getMembers()
* Set                 getMemberships()
* Set                 getStems()

## GrouperSession
* GrouperSession      GrouperSession.start(subject)
* String              getAccessClass()
* Member              getMember()
* String              getNamingClass()
* String              getSessionId()
* Date                getStartTime()
* Subject             getSubject()
* void                stop()

## GroupNameFilter extends BaseQueryFilter

## GroupType
* GroupType           GroupType.createType(session, name)

## GroupTypeFinder
* GroupType           GroupTypeFinder.find(name)

## IntersectionFilter extends BaseQueryFilter

## Member
* Set                 getEffectiveGroups()
* Set                 getEffectiveMemberships()
* Set                 getEffectiveMemberships(field)
* Set                 getGroups()
* Set                 getImmediateGroups()
* Set                 getImmediateMemberships()
* Set                 getImmediateMemberships(field)
* Set                 getMemberships()
* Set                 getMemberships(field)
* Set                 getPrivs(group)
* Set                 getPrivs(stem)
* Subject             getSubject()
* String              getSubjectId()
* Source              getSubjectSource()
* String              getSubjectSourceId()
* SubjectType         getSubjectType()
* String              getSubjectTypeId()
* String              getUuid()
* Set                 hasAdmin()
* boolean             hasAdmin(group)
* Set                 hasCreate()
* boolean             hasCreate(stem)
* Set                 hasOptin()
* boolean             hasOptin(group)
* Set                 hasOptout()
* boolean             hasOptout(group)
* Set                 hasRead()
* boolean             hasRead(group)
* Set                 hasStem()
* boolean             hasStem(stem)
* Set                 hasUpdate()
* boolean             hasUpdate(group)
* Set                 hasView()
* boolean             hasView(group)
* boolean             isEffectiveMember(group)
* boolean             isEffectiveMember(group, field)
* boolean             isImmediateMember(group)
* boolean             isImmediateMember(group, field)
* boolean             isMember(group)
* boolean             isMember(group, field)
* void                setSubjectId(id)
* Group               toGroup()

## MemberFinder
* Member              MemberFinder.findByUuid(session, uuid)
* Member              MemberFinder.findBySubject(session, subject)

## Membership
* Set                 getChildMemberships()
* int                 getDepth()
* Group               getGroup()
* Field               getList()
* Member              getMember()
* Membership          getParentMembership()
* Group               getViaGroup()

## MembershipFinder
* Set                 MembershipFinder.findEffectiveMemberships(session, group, subject, field, group, depth)
* Membership          MembershipFinder.findImmediateMembership(session, group, subject, field)

## NamingPrivilege 
* String              getImplementationName()
* boolean             isRevokable()
* String              getName()
* Subject             getOwner()
* Stem                getStem()
* Subject             getSubject()

## NullFilter extends BaseQueryFilter

## Privilege
* Set                 Privilege.getAccessPrivs()
* Privilege           Privilege.getInstance(name)
* Set                 Privilege.getNamingPrivs()
* String              getName()

## QueryFilter extends BaseQueryFilter

## Stem
* Group               addChildGroup(extension, displayExtension)
* Stem                addChildStem(extension, displayExtension)
* Set                 getChildGroups()
* Set                 getChildStems()
* String              getCreateSource()
* Subject             getCreateSubject()
* Date                getCreateTime()
* Set                 getCreators()
* String              getDescription()
* String              getDisplayExtension()
* String              getDisplayName()
* String              getExtension()
* String              getModifySource()
* Subject             getModifySubject()
* Date                getModifyTime()
* String              getName()
* Stem                getParentStem()
* Set                 getPrivs(subject)
* Set                 getStemmers()
* String              getUuid()
* void                grantPriv(subject, naming priv)
* boolean             hasCreate(subject)
* boolean             hasStem(subject)
* void                revokePriv(naming priv)
* void                revokePriv(subject, naming priv) 
* void                setDescription(value)
* void                setDisplayExtension(value) 

## StemCreatedAfterFilter extends BaseQueryFilter

## StemCreatedBeforeFilter extends BaseQueryFilter

## StemFinder
* Stem                StemFinder.findByName(session, name)
* Stem                StemFinder.findByUuid(session, uuid)
* Stem                StemFinder.findRootStem(session)

## StemNameFilter extends BaseQueryFilter

## SubjectFinder
* Subject             SubjectFinder.findById(id)  
* Subject             SubjectFinder.findById(id, type)
* Subject             SubjectFinder.findByIdentifier(id)  
* Subject             SubjectFinder.findByIdentifier(id, type)
* Set                 SubjectFinder.findAll(query)
* Subject             SubjectFinder.findAllSubject()

## UnionFilter extends BaseQueryFilter


