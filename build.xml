<!-- $Id: build.xml,v 1.63 2005-11-14 16:09:07 blair Exp $ -->

<project name="Grouper" default="build" basedir=".">

  <!-- Global Properties -->
  <property name="app.name"               value="Grouper"/>
  <property name="javadoc.packages"       value="edu.internet2.middleware.grouper.*"/>
  <property name="impl.url" 
    value="http://middleware.internet2.edu/dir/groups/grouper/"/>
  <property name="impl.vendor"            value="Internet2"/>
  <property name="impl.version"           value="0.9"/>

  <property name="src"                    location="java"/>
  <property name="dist"                   location="dist"/>
  <property name="build"                  location="build"/>
  <property name="build.grouper"          location="${build}/grouper"/>
  <property name="build.javadoc"          location="${dist}/api"/>
  <property name="build.lib"              location="${build}/lib"/>
  <property name="build.test"             location="${build}/test"/>
  <property name="src.grouper"            location="${src}/grouper"/>
  <property name="src.test"               location="${src}/tests"/>
  <!-- Global Properties -->

  <!-- build -->
  <target name="build" depends="init"
        description="compile the source " >
    <javac srcdir="${src.grouper}" destdir="${build.grouper}">
      <classpath refid="project.class.path"/>
    </javac>
  </target>
  <!-- build -->

  <!-- clean -->
  <target name="clean" description="clean up" >
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>
  <!-- clean -->

  <!-- codegen -->
  <target name="codegen" depends="init">
    <mkdir dir="${dist}" />
    <mkdir dir="${dist}/run" />
    <taskdef name="hbm2java"
      classname="net.sf.hibernate.tool.hbm2java.Hbm2JavaTask"
      classpathref="project.class.path"
    />
    <hbm2java config="conf/codegen.cfg.xml" output="${src.grouper}">
      <fileset dir="${src.grouper}">
        <include name="**/*.hbm.xml"/>
      </fileset>
    </hbm2java>
  </target>
  <!-- codegen -->

  <!-- db -->
  <target name="db" depends="init" description="Launch HSQLDB UI">
    <property file="conf/hibernate.properties"/>
    <java classname="org.hsqldb.util.DatabaseManager" fork="yes">
      <classpath refid="project.class.path"/>
      <arg value="-driver"/>
      <arg value="${hibernate.connection.driver_class}"/>
      <arg value="-url"/>
      <arg value="${hibernate.connection.url}"/>
      <arg value="-user"/>
      <arg value="${hibernate.connection.username}"/>
      <arg value="-password"/>
      <arg value="${hibernate.connection.password}"/>
    </java>
  </target>
  <!-- db -->

  <!-- db-init -->
  <target name="db-init" 
          depends="build"
          description="initialize database"
  >
    <java classname="edu.internet2.middleware.grouper.RegistryInstall"
          fork="yes"
    >
      <classpath refid="project.class.path"/>
    </java>
  </target>
  <!-- db-init -->

  <!-- dist -->
  <target name="dist" 
          depends="build" 
          description="package grouper"
  >
    <mkdir dir="${dist}/lib" />
    <jar destfile="${dist}/lib/${app.name}-${DSTAMP}.jar" basedir="${build.grouper}">
      <manifest>
        <attribute name="Built-By"                value="${user.name}"/>
        <attribute name="Implementation-Vendor"   value="${impl.vendor}" />
        <attribute name="Implementation-Title"    value="${app.name}" />
        <attribute name="Implementation-Version"  value="${impl.version}" />
        <attribute name="Implementation-URL"      value="${impl.url}" />
      </manifest>
    </jar>
    <copy file="${dist}/lib/${app.name}-${DSTAMP}.jar"   
          tofile="${dist}/lib/${app.name}.jar" 
    />
  </target>
  <!-- dist -->

  <!-- dist-lib -->
  <target name="dist-lib"
          depends="init" 
          description="package 3rd party libraries"
    >
    <!-- ugly, i know -->
    <unzip dest="${build.lib}">
      <fileset dir="java/lib">
        <include name="*.jar"/>
        <exclude name="**/cdg-mock.jar"/>
      </fileset>
    </unzip>
    <!-- be sure to include _java/lib/README_ -->
    <copy file="java/lib/README" 
          tofile="${build.lib}/README"
    />
    <jar  jarfile="${dist}/lib/${app.name}-lib-${DSTAMP}.jar" 
          basedir="${build.lib}"
    />
    <copy file="${dist}/lib/${app.name}-lib-${DSTAMP}.jar" 
          tofile="${dist}/lib/${app.name}-lib.jar" 
    />
  </target>
  <!-- dist-lib -->

  <!-- html -->
  <target name="html" depends="build" description="generate public api docs" >
    <delete dir="${build.javadoc}"/>
    <mkdir  dir="${build.javadoc}"/>
    <javadoc 
      packagenames="${javadoc.packages}" 
      sourcepath="${src.grouper}"
      destdir="${build.javadoc}"
      classpathref="project.class.path" 
      access="public"
      author="true"
      stylesheetfile="${basedir}/doc/stylesheet.css"
    />
  </target>
  <!-- html -->

  <!-- init -->
  <target name="init">
    <tstamp />
    <mkdir dir="${build.grouper}" />
    <mkdir dir="${build.test}" />
    <mkdir dir="${dist}" />
    <mkdir dir="${dist}/run" />
    <!-- only define our classpath once -->
    <path id="project.class.path">
      <pathelement path="${classpath}"/>
      <!-- for configuration files -->
      <pathelement location="${basedir}/conf"/>
      <fileset dir="java/lib">
        <include name="**/*.jar"/>
      </fileset>
      <pathelement  location="${src.grouper}"/>
      <pathelement  location="${build.grouper}"/>
      <pathelement  location="${build.test}"/>
      <pathelement  location="${user.home}/.ant/lib/clover.jar"/>
    </path>
  </target>
  <!-- init -->

  <!-- schemaexport -->
  <target name="schemaexport" depends="build">
    <mkdir dir="${dist}" />
    <mkdir dir="${dist}/run" />
    <taskdef name="schemaexport"
      classname="net.sf.hibernate.tool.hbm2ddl.SchemaExportTask"
      classpathref="project.class.path"
    />
    <schemaexport
      properties="conf/hibernate.properties"
      quiet="yes"
      text="no"
      drop="no"
      delimiter=";"
      output="sql/schema-export.sql">
      <fileset dir="${src.grouper}">
        <include name="**/*.hbm.xml"/>
      </fileset>
    </schemaexport>
  </target>
  <!-- schemaexport -->

  <!-- test-build -->
  <target name="test-build" depends="build">
    <javac srcdir="${src.test}" destdir="${build.test}">
      <classpath  refid="project.class.path"/>
      <include name="**/*.java" />
    </javac>
  </target>
  <!-- test-build -->

  <!-- test -->
  <target name="test" depends="test-build">
    <java fork="yes" 
          classname="junit.textui.TestRunner"
          taskname="junit" 
          failonerror="true">
      <arg value="test.edu.internet2.middleware.grouper.SuiteAll"/>
      <classpath refid="project.class.path"/>
    </java>
  </target>
  <!-- test -->



  <target name="jar" depends="dist" />

  <target name="all" depends="dist,test,html" />

  <target name="html-internal" depends="init" description="generate internal api docs" >
    <!-- Let's be sure we clear out old cruft first... -->
    <delete dir="${javadoc.dest.internal}" />
    <javadoc sourcepath="${javadoc.source}" 
      destdir="${javadoc.dest.internal}" 
      packagenames="${javadoc.packages}" 
      classpathref="project.class.path" 
      access="protected"
      author="true"/>
  </target>

  <target name="with.clover" depends="init">
    <taskdef resource="clovertasks"/>
    <clover-setup initString="clover.db">
      <fileset dir="${src.grouper}"/>
    </clover-setup>
  </target> 

  <target name="clover.html" depends="with.clover">
    <clover-report>
      <current outfile="clover">
        <format type="html"/>
      </current>
    </clover-report>
  </target>

  <target name="clover.log" depends="with.clover">
    <clover-log/>
  </target>

 <target name="clover.swing" depends="with.clover">
   <clover-view/>
 </target>

</project>

