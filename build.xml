<!-- $Id: build.xml,v 1.152 2007-03-15 18:03:20 blair Exp $ -->

<project name="Grouper" default="compile" basedir=".">

  <!-- Grouper Distribution and Versioning Properties -->
  <property name="app.name"               value="grouper"/>
  <property name="impl.url" 
    value="http://middleware.internet2.edu/dir/groups/grouper/"/>
  <property name="impl.vendor"            value="Internet2"/>
  <property name="impl.version"           value="1.2.0-cvs"/>

  <!-- Grouper Global Build Properties -->
  <property file="buildGrouper.properties" />

  <!-- TODO 20070315 REVIEW ALL PROPERTIES BELOW -->
  <property name="src.test"               location="${src.dir}/test"/>
  <property name="dist.test"              location="${dist.dir}/test"/>
  <property name="build.lib"              location="${build.dir}/lib"/>
  <property name="build.test"             location="${build.dir}/test"/>
  <property name="lib"                    location="${basedir}/lib"/>
  <property name="log.eg.run"             location="${basedir}/eg.log"          />
  <property name="log.test.build"         location="${basedir}/test-build.log"  />
  <property name="log.test.run"           location="${basedir}/test.log"        />
  <property name="hprof.depth"            value="25"/>
  <property name="memory.max"             value="192m"/>
  <property name="hsqldb.jar"             location="${lib}/hsqldb-1.7.2.11.jar" />
  <!-- Global Properties -->

  <!-- target: build -->
  <!-- TODO 20070315 deprecrate post 1.2.0 -->
  <target name="build">
    <antcall target="compile"/>
  </target>
  <!-- target: build -->

  <!-- target: clean -->
  <target name="clean" 
          description="Clean out (delete) previous build products including Java classes and the Grouper dist directory">
    <delete dir="${build.dir}"/>  
    <delete dir="${dist.dir}"/>
    <delete file="${build.log}"/>
    <delete file="${db-init.log}"/>
    <delete file="${javadoc.log}"/>
    <delete file="${schemaexport.log}"/>
  </target>
  <!-- target: clean -->

  <!-- target: compile -->
  <target name="compile" 
          description="Compile .java files, copy Hibernate mapping files"
          depends="init-conf"
  >
    <record name="${build.log}" action="start"/>
    <mkdir  dir="${build.dir.grouper}"/>
    <javac  srcdir="${src.dir.grouper}" 
            destdir="${build.dir.grouper}"
            debug="${compile.debug}"
            deprecation="${compile.deprecation}"
            optimize="${compile.optimize}"
    >
      <classpath refid="project.classpath" />
<!--  20061011 I'll eventually have to deal with this migration
      <compilerarg  value="-Xlint:unchecked"  />
-->
    </javac>
    <copy todir="${build.dir.grouper}">
      <fileset dir="${src.dir.grouper}">
        <include name="**/*.hbm.xml"/>      <!-- hibernate mappings -->
        <include name="**/*.properties"/>   <!-- xml default export|import properties -->
      </fileset>
    </copy>
    <record name="${build.log}" action="stop"/>
  </target>
  <!-- target: compile -->

  <!-- target: db-init -->
  <target name="db-init" 
          depends="build"
          description="Initialize Groups Registry"
  >
    <record name="${db-init.log}" action="start"/>
    <java fork="true"
          classpathref="project.classpath"
          classname="edu.internet2.middleware.grouper.RegistryInstall"
    />
    <record name="${db-init.log}" action="stop"/>
  </target>
  <!-- target: db-init -->

  <!-- target: init-conf -->
  <!-- expands macros in several configuration files to set proper absolute paths -->
  <target name="init-conf"
          depends="init"
  >
    <dirname property="base" file="build.xml"/>
    <pathconvert  targetos="unix"
                  property="converted.base"
    >
        <path path="${base}"/>
    </pathconvert>
    <filter token="base"  value="${converted.base}"/>
    <!-- Apparently ${file.separator} is not appropriate here -->
    <filter token="slash" value="/"/>
    <copy todir="${conf.dir}" filtering="true">
      <fileset dir="${src.dir.conf}"/>
    </copy>
  </target>
  <!-- target: init-conf -->

  <!-- target: init-clover -->
  <!-- include clover task definitions -->
  <target name="init-clover">
    <taskdef resource="cloverlib.xml" classpath="${lib.jar.clover}"/>
  </target>
  <!-- target: init-clover -->

  <!-- target: javadoc -->
  <target name="javadoc"
          description="Create the JavaDocs"
          depends="init"
  >
    <delete dir="${dist.dir.javadoc}"/>
    <mkdir  dir="${dist.dir.javadoc}"/>
    <record name="${javadoc.log}" action="start"/>
    <!-- TODO 20070315 use "overview=..." -->
    <javadoc  destdir="${dist.dir.javadoc}"
              access="public"
              author="true"
              breakiterator="true"
              classpathref="project.classpath" 
              nodeprecatedlist="false"
              nodeprecated="false"
              noindex="false"
              nonavbar="false"
              notree="false"
              splitindex="true"
              stylesheetfile="${javadoc.css}"
              use="true"
              version="true"
    >
      <packageset dir="${src.dir.grouper}" defaultexcludes="yes">
        <exclude name="edu/internet2/middleware/grouper/bench/**"/>
        <exclude name="edu/internet2/middleware/grouper/prof/**"/>
      </packageset>
    </javadoc>
    <record name="${javadoc.log}" action="stop"/>
  </target>
  <!-- target: javadoc -->

  <!-- schemaexport -->
  <target name="schemaexport" 
          description="Generate SQL schema appropriate for configured database"
          depends="build"
  >
    <taskdef  name="schemaexport"
              classname="net.sf.hibernate.tool.hbm2ddl.SchemaExportTask"
              classpathref="project.classpath"
    />
    <record name="${schemaexport.log}" action="start"/>
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${dist.dir.run}"/>
    <mkdir dir="${build.dir.sql}"/>
    <mkdir dir="${build.dir.sql}"     />
    <schemaexport properties="${conf.hibernate}"
                  delimiter=";"
                  drop="no"
                  output="${schemaexport.out}"
                  quiet="yes"
                  text="no"
    >
      <fileset dir="${src.dir.grouper}">
        <include name="**/*.hbm.xml"/>
      </fileset>
    </schemaexport>
    <record name="${schemaexport.log}" action="stop"/>
  </target>
  <!-- schemaexport -->


  <!-- TODO 20070315 REVIEW ALL TASKS BELOW -->

  <!-- bench -->
  <target name="bench" 
          description="Runs benchmarks"
          depends="build"
  >
    <java fork="true"
          maxmemory="${memory.max}"
          classpathref="project.classpath"
          classname="edu.internet2.middleware.grouper.bench.GrouperBench"
          failonerror="true"
    />
  </target>
  <!-- bench -->

  <!-- bench-clean -->
  <target name="bench-clean" 
          description="clean up benchmarking output" 
  >
    <delete>
      <fileset dir="." includes="bench-*-*.txt"/>
    </delete>
  </target>
  <!-- bench-clean -->

  <!-- bench-run -->
  <target name="bench-run" 
          description="Runs the benchmark specified with -Dname=NAME"
          depends="build, ensure-name"
  >
    <java fork="true"
          maxmemory="${memory.max}"
          classpathref="project.classpath"
          classname="edu.internet2.middleware.grouper.bench.${name}"
          failonerror="true"
    />
  </target>
  <!-- bench-run -->

  <!-- bench-run-shark -->
  <target name="bench-run-shark" 
          description="Runs the benchmark specified with -Dname=NAME and enables Shark profiling"
          depends="build, ensure-name"
  >
    <java fork="true"
          maxmemory="${memory.max}"
          classpathref="project.classpath"
          classname="edu.internet2.middleware.grouper.bench.${name}"
          failonerror="true"
    >
      <jvmarg value="-XrunShark"/>
    </java>
  </target>
  <!-- bench-run-shark -->

  <!-- bench-run-prof -->
  <target name="bench-run-prof" 
          description="Runs and profiles the benchmark specified with -Dname=NAME"
          depends="build, ensure-name"
  >
    <java fork="true"
          maxmemory="${memory.max}"
          classpathref="project.classpath"
          classname="edu.internet2.middleware.grouper.bench.${name}"
          failonerror="true"
    >
      <jvmarg value="-Xrunhprof:cpu=samples,file=bench-${name}-${DSTAMP}${TSTAMP}.txt,depth=${hprof.depth}"/>
    </java>
  </target>
  <!-- bench-run-prof -->

  <!-- clean.clover -->
  <target name="clean.clover" depends="init-clover" description="clean up after clover">
    <clover-clean/>
  </target>
  <!-- clean.clover -->

  <!-- clover.html -->
  <target name="clover.html" depends="with.clover">
    <clover-report>
      <current  outfile="clover">
        <format       type="html"/>
        <testresults  dir="${dist.test}">
          <include  name="**/TEST*xml"/>
        </testresults>
      </current>
    </clover-report>
  </target>
  <!-- clover.html -->

  <!-- cpd -->
  <target name="cpd">
    <taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask" />
    <cpd minimumTokenCount="95" outputFile="${dist.dir.run}/cpd.txt">
      <fileset dir="${src.dir.grouper}">
        <include  name="**/*.java"    />
        <exclude  name="**/bench/**/" />
        <exclude  name="**/eg/**/"    />
      </fileset>
    </cpd>
  </target>
  <!-- cpd -->

  <!-- db -->
  <target name="db" depends="init" description="Launch HSQLDB UI">
    <property file="${conf.hibernate}"/>
    <java fork="true"
          classpathref="project.classpath"
          classname="org.hsqldb.util.DatabaseManager"
          maxmemory="${memory.max}"
    >
      <arg value="-driver"/>
      <arg value="${hibernate.connection.driver_class}"/>
      <arg value="-url"/>
      <arg value="${hibernate.connection.url}"/>
      <arg value="-user"/>
      <arg value="${hibernate.connection.username}"/>
      <arg value="-password"/>
      <arg value="${hibernate.connection.password}"/>
    </java>
  </target>
  <!-- db -->

  <!-- db-reset -->
  <target name="db-reset"
          description="reset the db"
          depends="build"
  >
    <java fork="true"
          maxmemory="${memory.max}"
          classpathref="project.classpath"
          classname="edu.internet2.middleware.grouper.RegistryReset"
    />
  </target>
  <!-- db-reset -->

  <!-- dist -->
  <target name="dist" 
          depends="build" 
          description="package grouper"
  >
    <mkdir dir="${dist.dir}/lib" />
    <jar destfile="${dist.dir}/lib/${app.name}-${DSTAMP}.jar" basedir="${build.dir.grouper}">
      <manifest>
        <attribute name="Built-By"                value="${user.name}"/>
        <attribute name="Implementation-Vendor"   value="${impl.vendor}" />
        <attribute name="Implementation-Title"    value="${app.name}" />
        <attribute name="Implementation-Version"  value="${impl.version}" />
        <attribute name="Implementation-URL"      value="${impl.url}" />
      </manifest>
    </jar>
    <copy file="${dist.dir}/lib/${app.name}-${DSTAMP}.jar"   
          tofile="${dist.dir}/lib/${app.name}.jar" 
    />
  </target>
  <!-- dist -->

  <!-- dist-lib -->
  <target name="dist-lib"
          depends="init" 
          description="package 3rd party libraries"
    >
    <!-- ugly, i know -->
    <unzip dest="${build.lib}">
      <fileset dir="${lib}">
        <include name="*.jar"/>
      </fileset>
    </unzip>
    <!-- be sure to include _java/lib/README_ -->
    <copy file="${lib}/README.txt" 
          tofile="${build.lib}/README.txt"
    />
    <jar  jarfile="${dist.dir}/lib/${app.name}-lib-${DSTAMP}.jar" 
          basedir="${build.lib}"
    />
    <copy file="${dist.dir}/lib/${app.name}-lib-${DSTAMP}.jar" 
          tofile="${dist.dir}/lib/${app.name}-lib.jar" 
    />
  </target>
  <!-- dist-lib -->

  <!-- eg-bootstrap -->
  <target name="eg-bootstrap"
          depends="build"
          description="run example bootstrap programs"
  >
    <record name="${log.eg.run}" action="start"/>
    <antcall  target="db-reset"/>
    <antcall  target="eg-run">
      <param  name="package"  value="bootstrap"   />
      <param  name="name"     value="Bootstrap1"  /> 
    </antcall>
    <antcall  target="eg-run">
      <param  name="package"  value="bootstrap"   />
      <param  name="name"     value="Bootstrap2"  /> 
    </antcall>
    <antcall  target="eg-run">
      <param  name="package"  value="bootstrap"   />
      <param  name="name"     value="Bootstrap3"  /> 
    </antcall>
    <antcall  target="eg-run">
      <param  name="package"  value="bootstrap"   />
      <param  name="name"     value="Bootstrap4"  /> 
    </antcall>
    <antcall  target="eg-run">
      <param  name="package"  value="bootstrap"   />
      <param  name="name"     value="Bootstrap5"  /> 
    </antcall>
    <antcall  target="eg-run">
      <param  name="package"  value="bootstrap"   />
      <param  name="name"     value="Bootstrap6"  /> 
    </antcall>
    <antcall  target="eg-run">
      <param  name="package"  value="bootstrap"   />
      <param  name="name"     value="Bootstrap7"  /> 
    </antcall>
    <antcall  target="eg-run">
      <param  name="package"  value="bootstrap"   />
      <param  name="name"     value="Bootstrap8"  /> 
    </antcall>
    <antcall  target="eg-run">
      <param  name="package"  value="bootstrap"   />
      <param  name="name"     value="Bootstrap9"  /> 
    </antcall>
    <antcall  target="eg-run">
      <param  name="package"  value="bootstrap"   />
      <param  name="name"     value="Bootstrap10" /> 
    </antcall>
    <record name="${log.eg.run}" action="stop"/>
  </target>
  <!-- eg -bootstrap -->

  <!-- eg-run -->
  <target name="eg-run">
    <java fork="true"
          maxmemory="${memory.max}"
          classpathref="project.classpath"
          classname="edu.internet2.middleware.grouper.eg.${package}.${name}"
          failonerror="true"
    />
  </target>
  <!-- eg-run -->

  <!-- ensure-cmd -->
  <target name="ensure-cmd" unless="cmd">
    <fail message='You must run this target with -Dcmd="command line arguments"'/>
  </target>
  <!-- ensure-cmd -->

  <!-- ensure-name -->
  <target name="ensure-name" unless="name">
    <fail message="You must run this target with -Dname=NAME"/>
  </target>
  <!-- ensure-name -->

  <!-- ensure-test-name -->
  <target name="ensure-test-name" unless="test">
    <fail message="You must run this target with -Dtest=TestName"/>
  </target>
  <!-- ensure-test-name -->

  <!-- findbugs -->
  <target name="findbugs" depends="dist,dist-lib">
    <taskdef  name="findbugs"       classname="edu.umd.cs.findbugs.anttask.FindBugsTask"/>
    <property name="findbugs.home"  location="${user.home}/Applications/findbugs"/>
    <findbugs home="${findbugs.home}"
              effort="max"
              reportLevel="low"
              output="html"
              outputFile="${dist.dir.run}/findbugs_grouper.html"
              jvmargs="-Xmx${memory.max}"
    >
      <auxClassPath>
        <fileset dir="${lib}">
          <include name="**/*.jar"/>
        </fileset>
      </auxClassPath>
      <sourcePath path="${src.dir.grouper}"/>
      <class location="${dist.dir}/lib/${app.name}.jar"/>
    </findbugs>
  </target>
  <!-- findbugs -->

  <!-- hsqldb -->
  <target name="hsqldb" 
          description="connect to hsqldb running in server mode"
          depends="init"
  >
    <java fork="true"
          maxmemory="${memory.max}"
          classpathref="project.classpath"
          jar="${hsqldb.jar}"
          dir="${conf.dir}"
    >
      <arg  value="grouper" />
    </java>
  </target>
  <!-- hsqldb -->

  <!-- hsqldb-start -->
  <target name="hsqldb-start" 
          description="starts hsqldb in server mode"
          depends="init"
  >
    <java fork="true"
          spawn="true"
          maxmemory="${memory.max}"
          classpathref="project.classpath"
          classname="org.hsqldb.Server"
          dir="${conf.dir}"
    />
  </target>
  <!-- hsqldb-start -->

  <!-- hsqldb-stop -->
  <target name="hsqldb-stop" 
          description="stops hsqldb running in server mode"
          depends="init"
  >
    <java fork="true"
          spawn="true"
          maxmemory="${memory.max}"
          classpathref="project.classpath"
          jar="${hsqldb.jar}"
          dir="${conf.dir}"
    >
      <arg  value="--sql"     />
      <arg  value="shutdown;" />
      <arg  value="grouper"   />
    </java>
  </target>
  <!-- hsqldb-stop -->

  <!-- info -->
  <target name="info" 
          depends="build"
          description="report system and configuration information"
  >
    <java fork="true"
          classpathref="project.classpath"
          classname="edu.internet2.middleware.grouper.GrouperInfo"
    />
  </target>
  <!-- info -->

  <!-- init -->
  <target name="init">
    <tstamp />
    <mkdir dir="${build.test}"    />
    <!-- only define our classpath once -->
    <path id="project.classpath">
      <pathelement path="${classpath}"/>
      <!-- for configuration files -->
      <pathelement location="${conf.dir}"/>
      <fileset dir="${lib}">
        <include name="**/*.jar"/>
      </fileset>
      <pathelement  location="${build.dir.grouper}"/>
      <pathelement  location="${build.test}"/>
      <pathelement  location="${user.home}/.ant/lib/clover.jar"/>
    </path>
    <pathconvert  targetos="unix"
                  property="project.classpath.string" 
                  refid="project.classpath"
    />
  </target>
  <!-- init -->

  <!-- pmd -->
  <target name="pmd" depends="init">
    <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask"/>
    <pmd shortFilenames="true">
      <ruleset>rulesets/favorites.xml</ruleset>
      <ruleset>basic</ruleset>
      <formatter  type="html" 
                  toFile="${dist.dir.run}/pmd_grouper.html"
                  toConsole="false"
                  linkPrefix="http://macinthrope.uchicago.edu/~blair/grouper/api/"
      />
      <fileset dir="${src.dir.grouper}">
        <include name="**/*.java"/>
      </fileset>
    </pmd>
  </target>
  <!-- pmd -->

  <!-- profile -->
  <target name="profile"
          description="Runs and profiles the case specified with -Dname=NAME"
          depends="build, ensure-name"
  >
    <!-- Setup profiling run -->
    <java fork="true"
          maxmemory="${memory.max}"
          classpathref="project.classpath"
          classname="edu.internet2.middleware.grouper.prof.${name}Setup"
          failonerror="true"
    />
    <java fork="true"
          maxmemory="${memory.max}"
          classpathref="project.classpath"
          classname="edu.internet2.middleware.grouper.prof.${name}"
          failonerror="true"
    >
      <jvmarg value="-Xrunhprof:cpu=samples,file=profile-${name}-${DSTAMP}${TSTAMP}.txt,depth=${hprof.depth}"/>
    </java>
  </target>
  <!-- profile -->

  <!-- profile-clean -->
  <target name="profile-clean" 
          description="clean up profiling output" 
  >
    <delete>
      <fileset dir="." includes="profile-*-*.txt"/>
    </delete>
  </target>
  <!-- profile-clean -->

  <!-- runtest -->
  <target name="runtest" 
          description="Runs the test you specify on the command line with -Dtest=NAME" 
          depends="test-build, ensure-test-name">
    <record name="${log.test.run}" action="start"/>
    <junit printsummary="withOutAndErr" fork="true"> 
        <classpath    refid="project.classpath" />
        <formatter    type="plain" usefile="false"/>
      <batchtest>
        <fileset dir="${src.test}">
          <include name="**/${test}.java"/>
        </fileset>
      </batchtest>
    </junit>
    <record name="${log.test.run}" action="stop"/>
  </target>
  <!-- runtest -->

  <!-- runtestprof -->
  <target name="runtestprof" 
          description="Runs and profiles the test case you specify on the command line with -Dtest=NAME" 
          depends="test-build, ensure-test-name">
    <record name="${log.test.run}" action="start"/>
    <java fork="true"
          maxmemory="${memory.max}"
          classpathref="project.classpath"
          classname="junit.textui.TestRunner"
          taskname="junit"
          failonerror="true"
    >
      <arg    value="edu.internet2.middleware.grouper.${test}"/>
      <jvmarg value="-Xrunhprof:cpu=samples,file=hprof.txt,depth=${hprof.depth}"/>
    </java>
    <record name="${log.test.run}" action="stop"/>
  </target>
  <!-- runtestprof -->

  <!-- serialver -->
  <target name="serialver" 
          description="Runs serialver on class specified with -Dname=NAME"
          depends="build, ensure-name"
  >
    <exec executable="serialver">
      <arg  value="-classpath"                                />
      <arg  value="${project.classpath.string}"               />
      <arg  value="edu.internet2.middleware.grouper.${name}"  />
    </exec>  
  </target>
  <!-- serialver -->

  <!-- sql -->
  <target name="sql"
          description="Apply sql file to Groups Registry [Pass -Dname=filename.sql]"
          depends="ensure-name"
  >
    <property file="${conf.dir}/grouper.hibernate.properties"/>
    <sql  classpathref="project.classpath"
          driver="${hibernate.connection.driver_class}"
          url="${hibernate.connection.url}"
          userid="${hibernate.connection.username}"
          password="${hibernate.connection.password}"
          src="${name}"
    />
  </target>
  <!-- sql -->

  <!-- test-build -->
  <target name="test-build" depends="build">
    <record name="${log.test.build}" action="start"/>
    <javac srcdir="${src.test}" destdir="${build.test}">
      <classpath  refid="project.classpath"/>
      <include name="**/*.java" />
    </javac>
    <record name="${log.test.build}" action="stop"/>
  </target>
  <!-- test-build -->

  <!-- test -->
  <target name="test" 
          depends="test-build"
          description="run unit tests"
  >
    <echo/>
    <echo   message="*** results can be found in ${dist.test} ***"/>
    <echo/>
    <record name="${log.test.run}" action="start"/>
    <mkdir  dir="${dist.test}"/>
    <junit  fork="yes"
            haltonerror="yes"
            haltonfailure="yes"
            maxmemory="${memory.max}"
            printsummary="yes"
            showoutput="yes"
    >
      <classpath  refid="project.classpath"/>
      <formatter  type="xml"/>
      <test       name="edu.internet2.middleware.grouper.SuiteDefault"
                  todir="${dist.test}"
      />
<!-- TODO 20061228 Switch to batchtest once I've migrated the tests
      <batchtest  fork="yes"
                  todir="${dist.test}"
      >
        <formatter  type="xml"/>
        <fileset    dir="${src.test}">
          <include  name="**/Test*.java"/>
          <exclude  name="**/Suite*.java"/>
        </fileset>  
      </batchtest>
-->
    </junit>
    <record name="${log.test.run}" action="stop"/>
  </target>
  <!-- test -->

  <!-- with.clover -->
  <target name="with.clover" depends="init, init-clover">
    <clover-setup>
      <fileset  dir="${src.dir.grouper}">
        <exclude  name="**/bench/*"/>
        <exclude  name="**/eg/**"/>
        <exclude  name="**/prof/*"/>
      </fileset>
    </clover-setup>
  </target> 
  <!-- with.clover -->

  <!-- with.clover.test -->
  <target name="with.clover.test" depends="init, init-clover">
    <taskdef resource="clovertasks"/>
    <clover-setup>
      <fileset  dir="${src.test}">
        <include  name="**/Test*.java"/>
      </fileset>
    </clover-setup>
  </target> 
  <!-- with.clover.test -->

  <!-- xml-export -->    
  <target name="xml-export"
          description='Perform XML export of Groups Registry [Pass -Dcmd="command line arguments"]'
          depends="ensure-cmd"        
  >
    <java fork="true"
          maxmemory="${memory.max}"
          classpathref="project.classpath"
          classname="edu.internet2.middleware.grouper.XmlExporter"
          failonerror="true"
    >
      <arg line="${cmd}"/>
    </java>
  </target>
  <!-- xml-export -->
      
  <!-- xml-import -->    
  <target name="xml-import"
          description='Perform XML import of Groups Registry [Pass -Dcmd="command line arguments"]'
          depends="ensure-cmd"        
  >
    <java fork="true"
          maxmemory="${memory.max}"
          classpathref="project.classpath"
          classname="edu.internet2.middleware.grouper.XmlImporter"
          failonerror="true"
    >
      <arg line="${cmd}"/>
    </java>
  </target>
  <!-- xml-import -->
      

  <!-- these remaining ant targets are not very well organized -->
  <target name="jar" depends="dist" />

  <target name="clover.log" depends="with.clover">
    <clover-log/>
  </target>

 <target name="clover.swing" depends="with.clover">
   <clover-view/>
 </target>

</project>

