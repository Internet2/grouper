<!-- $Id: build.xml,v 1.212 2008-11-18 06:35:43 mchyzer Exp $ -->

<project name="Grouper" default="compile" basedir=".">

  <!-- ant contrib allows conditionals in ant scripts -->
  <taskdef resource="net/sf/antcontrib/antcontrib.properties">
    <classpath>
      <pathelement location="${basedir}/lib/ant/ant-contrib.jar" />
    </classpath>
  </taskdef>
  
  <!-- PROPERTIES -->
   <property name="grouper.home"  value="${basedir}${file.separator}"/>
  <!-- Grouper Distribution and Versioning Properties -->
  <property name="app.name"     value="grouper"/>
  <property name="impl.url"     value="http://middleware.internet2.edu/dir/groups/grouper/"/>
  <property name="impl.vendor"  value="Internet2"/>

  <!-- copy build.properties if not there already -->
  <if><not><available file="build.properties" /></not>
    <then><copy file="build.example.properties" tofile="build.properties" /></then>
  </if> 


  <!-- Grouper Global Build Properties -->
  <property file="${basedir}/build.properties"/>

  <property file="${basedir}/misc/version.properties"/>

  <property name="dist.binary" value="${dist.dir}/binary"/>
  
  <!-- IMPORTS -->

  <!-- extension tasks -->
  <import file="${ext.dir}/ext-build.xml"/>

  <!-- setup example files -->
  <if><not><available file="${conf.dir}/ehcache.xml" /></not>
    <then><copy file="${conf.dir}/ehcache.example.xml" 
      tofile="${conf.dir}/ehcache.xml" /></then>
  </if> 
  <if><not><available file="${conf.dir}/grouper.ehcache.xml" /></not>
    <then><copy file="${conf.dir}/grouper.ehcache.example.xml" 
      tofile="${conf.dir}/grouper.ehcache.xml" /></then>
  </if> 
  <if><not><available file="${conf.dir}/grouper.properties" /></not>
    <then><copy file="${conf.dir}/grouper.example.properties" 
      tofile="${conf.dir}/grouper.properties" /></then>
  </if> 
  <if><not><available file="${conf.dir}/grouper.hibernate.properties" /></not>
    <then><copy file="${conf.dir}/grouper.hibernate.example.properties" 
      tofile="${conf.dir}/grouper.hibernate.properties" /></then>
  </if> 
  <if><not><available file="${conf.dir}/grouper-loader.properties" /></not>
    <then><copy file="${conf.dir}/grouper-loader.example.properties" 
      tofile="${conf.dir}/grouper-loader.properties" /></then>
  </if> 
  <if><not><available file="${conf.dir}/log4j.properties" /></not>
    <then><copy file="${conf.dir}/log4j.example.properties" 
      tofile="${conf.dir}/log4j.properties" /></then>
  </if> 
  <if><not><available file="${conf.dir}/morphString.properties" /></not>
    <then><copy file="${conf.dir}/morphString.example.properties" 
      tofile="${conf.dir}/morphString.properties" /></then>
  </if> 
  <if><not><available file="${conf.dir}/server.properties" /></not>
    <then><copy file="${conf.dir}/server.example.properties" 
      tofile="${conf.dir}/server.properties" /></then>
  </if> 
  <if><not><available file="${conf.dir}/sources.xml" /></not>
    <then><copy file="${conf.dir}/sources.example.xml" 
      tofile="${conf.dir}/sources.xml" /></then>
  </if> 
  <if><not><available file="${conf.dir}/spy.properties" /></not>
    <then><copy file="${conf.dir}/spy.example.properties" 
      tofile="${conf.dir}/spy.properties" /></then>
  </if> 

  <!-- TARGETS -->

  <!-- target: build -->
  <!-- TODO 20070315 deprecrate post 1.2.0 -->
  <target name="build">
    <antcall target="compile"/>
  </target>
  <!-- target: build -->

  <!-- target: clean -->
  <target name="clean" 
          description="Clean out (delete) previous build products including Java classes, the Grouper dist directory, log files and extensions"
  >
    <delete dir="${build.dir}"/>  
    <delete dir="${dist.dir}"/>
    <delete>
      <fileset dir="${basedir}" includes="*.log"/>
      <fileset dir="${basedir}" includes="*.log.?"/>
    </delete>
    <!-- clean extensions -->
    <antcall target="ext.clean"/>
  </target>
  <!-- target: clean -->

  <!-- target: compile -->
  <target name="compile" 
          description="Compile .java files, copy Hibernate mapping files"
          depends="init.conf"
  >
    <record name="${build.log}" action="start"/>
    <mkdir  dir="${build.dir.grouper}"/>
    <!-- 2008/04/23 CH dont allow turning off debug -->
    <javac  srcdir="${src.dir.grouper}" 
            destdir="${build.dir.grouper}"
            debug="true"
            deprecation="${compile.deprecation}"
            optimize="${compile.optimize}"
    >
      <classpath refid="project.classpath" />
<!--  TODO 20061011 I'll eventually have to deal with this migration
      <compilerarg  value="-Xlint:unchecked"  />
-->
    </javac>
    <!-- CH 20080215 copy source to the build dir... -->    
    <copy todir="${build.dir.grouper}">
      <fileset dir="${src.dir.grouper}">
        <include name="**/*.java"/>      <!-- source -->
        <include name="**/*.hbm.xml"/>      <!-- hibernate mappings -->
        <include name="**/*.properties"/>   <!-- xml default export|import properties -->
      </fileset>
    </copy>
    <!-- build extensions -->
    <antcall target="ext.compile"/>
    <!-- TODO 20070319 not sure if this is the right location - or name -->
    <antcall target="ext.install"/>
    <record name="${build.log}" action="stop"/>
  </target>
  <!-- target: compile -->

  <!-- target: db -->
  <target name="db" 
          depends="init" 
          description="Launch HSQLDB UI"
  >
    <property file="${conf.hibernate}"/>
    <java fork="true"
          classpathref="project.classpath"
          classname="org.hsqldb.util.DatabaseManager"
          maxmemory="${memory.max}"
    >
      <sysproperty key="grouper.home" value="${grouper.home}"/>
      <arg value="-driver"/>
      <arg value="${hibernate.connection.driver_class}"/>
      <arg value="-url"/>
      <arg value="${hibernate.connection.url}"/>
      <arg value="-user"/>
      <arg value="${hibernate.connection.username}"/>
      <arg value="-password"/>
      <arg value="${hibernate.connection.password}"/>
    </java>
  </target>
  <!-- target: db -->

  <!-- target: db.reset -->
  <!-- reset the groups registry -->
  <target name="db.reset"
          depends="compile"
  >
    <java fork="false"
               maxmemory="${memory.max}"
               classpathref="test.classpath"
               classname="edu.internet2.middleware.grouper.util.ConfirmDbChangePromptOnly"
               failonerror="true"
         >
         <sysproperty key="grouper.home" value="${grouper.home}"/>
         </java>
     
     <input validargs="y,n"
         addproperty="do.delete.reset"
       />
       <condition property="do.abort.reset">
         <equals arg1="n" arg2="${do.delete.reset}"/>
       </condition>
       <fail if="do.abort.reset">Build aborted by user.</fail>
     
      <java fork="true"
          maxmemory="${memory.max}"
          classpathref="project.classpath"
          classname="edu.internet2.middleware.grouper.registry.RegistryReset"
    >
        <sysproperty key="grouper.home" value="${grouper.home}"/>
        <jvmarg value="-Dgrouper.allow.db.changes=true"/> 
      </java>
    </target>
  <!-- target: db.reset -->

  <!--  -->
  <target name="distBinary" depends="clean, init.conf, javadoc, dist" description="make a binary distribution">
    
    <property name="dist.binary.zip" value="${dist.binary}/grouper.binary.${version}" />
    
    <mkdir dir="${dist.binary.zip}"/>
    <copy tofile="${dist.binary.zip}/README.txt" file="${basedir}/misc/BINARY-README.txt" />
    <copy todir="${dist.binary.zip}" file="${basedir}/API.txt" />
    <copy todir="${dist.binary.zip}" file="${basedir}/LICENSE.txt" />
    <copy tofile="${dist.binary.zip}/SOURCE_README.txt" file="${basedir}/README.txt" />
      
    <mkdir dir="${dist.binary.zip}/lib"/>
    <copy todir="${dist.binary.zip}/lib">
      <fileset dir="${lib.dir}">
        <include name="README.txt"/>
      </fileset>
    </copy>
    
    <mkdir dir="${dist.binary.zip}/lib/custom"/>
    <copy todir="${dist.binary.zip}/lib/custom">
      <fileset dir="${lib.dir}/custom">
        <include name="README.txt"/>
      </fileset>
    </copy>
    
    <mkdir dir="${dist.binary.zip}/lib/ant"/>
    <copy todir="${dist.binary.zip}/lib/ant">
      <fileset dir="${lib.dir}/ant">
        <include name="*.jar"/>
      </fileset>
    </copy>
    
    <mkdir dir="${dist.binary.zip}/lib/test"/>
    <copy todir="${dist.binary.zip}/lib/test">
      <fileset dir="${lib.dir}/test">
        <include name="*.jar"/>
      </fileset>
    </copy>
    
    <mkdir dir="${dist.binary.zip}/lib/grouper"/>
    <copy todir="${dist.binary.zip}/lib/grouper">
      <fileset dir="${lib.dir}/grouper">
        <include name="*.jar"/>
      </fileset>
    </copy>
    
    <mkdir dir="${dist.binary.zip}/dist"/>
    <mkdir dir="${dist.binary.zip}/dist/lib"/>
     <copy todir="${dist.binary.zip}/dist/lib">
      <fileset dir="${dist.dir}/lib">
        <include name="grouper.jar"/>
        <include name="test/grouper-test.jar"/>
      </fileset>
    </copy>
    

    <mkdir dir="${dist.binary.zip}/lib/jdbcSamples"/>
    <copy todir="${dist.binary.zip}/lib/jdbcSamples">
      <fileset dir="${lib.dir}/jdbcSamples">
        <include name="*.jar"/>
      </fileset>
    </copy>
  
   <!--<mkdir dir="${dist.binary.zip}/lib/test"/>
    <copy todir="${dist.binary.zip}/lib/test">
      <fileset dir="${lib.dir}/test">
        <include name="*.jar"/>
      </fileset>
    </copy>-->
    
    <!-- we need a jar for test code -->
   <!-- <jar destfile="${dist.binary.zip}/lib/test/grouper-test.jar">
      <manifest>
        <attribute name="Built-By"                value="${user.name}"/>
        <attribute name="Implementation-Vendor"   value="${impl.vendor}"/>
        <attribute name="Implementation-Title"    value="${app.name}"/>
        <attribute name="Implementation-Version"  value="${version}"/>
        <attribute name="Implementation-URL"      value="${impl.url}"/>
      </manifest>
      <fileset dir="${build.dir.test}">
        <include name="**/*.class"/>
      </fileset>
      <fileset dir="${src.dir.test}">
        <include name="**/*"/>
        <exclude name="conf/**"/>
      </fileset>
    </jar>-->

    <mkdir dir="${dist.binary.zip}/bin"/>
    <!--<copy todir="${dist.binary.zip}/bin">
      <fileset dir="bin">
        <include name="*.example.*"/>
      </fileset>
    </copy>-->
    <copy todir="${dist.binary.zip}/bin">
      <fileset dir="bin">
        <include name="gsh.bat"/>
        <include name="gsh.sh"/>
        <include name="setenv.example.bat"/>
        <include name="setenv.example.sh"/>
      </fileset>
     </copy>

    <!-- copy each to the new name 
    <copy file="${dist.binary.zip}/bin/grouperloader.example.bat" tofile="${dist.binary.zip}/bin/grouperloader.bat" />
    <copy file="${dist.binary.zip}/bin/grouperloader.example.sh" tofile="${dist.binary.zip}/bin/grouperloader.sh" />
    <copy file="${dist.binary.zip}/bin/gsh.example.bat" tofile="${dist.binary.zip}/bin/gsh.bat" />
    <copy file="${dist.binary.zip}/bin/gsh.example.sh" tofile="${dist.binary.zip}/bin/gsh.sh" />
    <copy file="${dist.binary.zip}/bin/groupertest.example.bat" tofile="${dist.binary.zip}/bin/groupertest.bat" />
    <copy file="${dist.binary.zip}/bin/groupertest.example.sh" tofile="${dist.binary.zip}/bin/groupertest.sh" />
    -->

    <!-- take out dist lib from bat file -->
    <!--<replace dir="${dist.binary.zip}/bin" value=" ">
      <include name="*" />
      <replacetoken><![CDATA[-cpjar %GROUPER_HOME%/dist/lib/grouper.jar]]></replacetoken>
    </replace>-->
    <!-- take out dist lib from bat file -->
    <replace dir="${dist.binary.zip}/bin" value=" " summary="true" >
      <include name="*" />
      <replacetoken><![CDATA[-cpjar ${GROUPER_HOME}/dist/lib/grouper.jar]]></replacetoken>
    </replace>
    <!-- fix the groupertest jar location, it will be in subdir of lib, so remove -->
    <replace dir="${dist.binary.zip}/bin" value=" " summary="true">
      <include name="*" />
      <replacetoken><![CDATA[-cpjar %GROUPER_HOME%/dist/binary/zip/lib/test/grouper-test.jar]]></replacetoken>
    </replace>
    <replace dir="${dist.binary.zip}/bin" value=" " summary="true">
      <include name="*" />
      <replacetoken><![CDATA[-cpjar ${GROUPER_HOME}/dist/binary/zip/lib/test/grouper-test.jar]]></replacetoken>
    </replace>
    
    <!-- fix line endings and permissions of scripts -->
    <fixcrlf srcdir="${dist.binary.zip}/bin" eol="unix" includes="*.sh" />
    <fixcrlf srcdir="${dist.binary.zip}/bin" eol="dos" includes="*.bat" />
    <chmod dir="${dist.binary.zip}/bin" includes="*.sh,*.bat" perm="ugo+rx"/>

    <mkdir dir="${dist.binary.zip}/conf"/>
    <copy todir="${dist.binary.zip}/conf">
      <fileset dir="conf">
        <include name="*.example.*"/>
      </fileset>
    </copy>

    <copy file="${dist.binary.zip}/conf/ehcache.example.xml" tofile="${dist.binary.zip}/conf/ehcache.xml" />
    <copy file="${dist.binary.zip}/conf/grouper.ehcache.example.xml" tofile="${dist.binary.zip}/conf/grouper.ehcache.xml" />
    <copy file="${dist.binary.zip}/conf/grouper.example.properties" tofile="${dist.binary.zip}/conf/grouper.properties" />
    <copy file="${dist.binary.zip}/conf/grouper.hibernate.example.properties" tofile="${dist.binary.zip}/conf/grouper.hibernate.properties" />
    <copy file="${dist.binary.zip}/conf/grouper-loader.example.properties" tofile="${dist.binary.zip}/conf/grouper-loader.properties" />
    <copy file="${dist.binary.zip}/conf/log4j.example.properties" tofile="${dist.binary.zip}/conf/log4j.properties" />
    <copy file="${dist.binary.zip}/conf/morphString.example.properties" tofile="${dist.binary.zip}/conf/morphString.properties" />
    <copy file="${dist.binary.zip}/conf/server.example.properties" tofile="${dist.binary.zip}/conf/server.properties" />
    <copy file="${dist.binary.zip}/conf/sources.example.xml" tofile="${dist.binary.zip}/conf/sources.xml" />
    <copy file="${dist.binary.zip}/conf/spy.example.properties" tofile="${dist.binary.zip}/conf/spy.properties" />
    
    <mkdir dir="${dist.binary.zip}/api"/>
    <mkdir dir="${dist.dir.javadoc}" />
    <copy todir="${dist.binary.zip}/api">
      <fileset dir="${dist.dir.javadoc}">
        <include name="**"/>
      </fileset>
    </copy>
    
     <if>
      <not>
        <equals arg1="${nozip}" arg2="true" casesensitive="true" trim="true"/>
      </not>
      <then>
        <if>
          <available file="/bin/tar" />
          <then>
            <!-- exec command="/bin/tar -czC /tmp/grouper/build_mchyzer/grouper/dist/binary/ -f /tmp/grouper/build_mchyzer/grouper/dist/binary/grouper.binary.1.4.0.tar.gz grouper.binary.1.4.0 "  -->
            <exec command="/bin/tar -czC ${dist.binary} -f ${dist.binary}/grouper.binary.${version}.tar.gz grouper.binary.${version}" />
          </then>
          <else>
       <tar basedir="${dist.binary}" compression="gzip"
      destfile="${dist.binary}/grouper.binary.${version}.tar.gz">
      <include name="grouper.binary.${version}/**" />
    </tar>
          </else>
        </if>
        <if>
          <available file="/usr/bin/zip" />
         <then>
           <!-- exec command="/usr/bin/zip -r grouper.binary.1.4.0.zip grouper.binary.1.4.0" dir="/tmp/grouper/build_mchyzer/grouper/dist/binary"  / -->
           <!-- exec command="/bin/bash -c &quot;cd /tmp/grouper/build_mchyzer/grouper/dist/binary; /usr/bin/zip -r grouper.binary.1.4.\
0.zip grouper.binary.1.4.0&quot;"  / -->
             
           <exec command="/bin/bash -c &quot;cd ${dist.binary}; /usr/bin/zip -r grouper.binary.${version}.zip grouper.binary.${version}&quot;"/>
         </then>
         <else>
    <zip basedir="${dist.binary}" 
          destfile="${dist.binary}/grouper.binary.${version}.zip">
          <include name="grouper.binary.${version}/**" />
     </zip>
         </else>
        </if>
      </then>
    </if>
  </target>
  
  <!-- target: dist -->
  <target name="dist" 
          depends="compile,test.compile" 
          description="Create Grouper API jar"
  >
    <mkdir dir="${dist.dir}/lib"/>
    <!-- keep this in the jar so we know where it is -->
    <copy file="${basedir}/misc/version.properties" 
      tofile="${build.dir.grouper}/grouper.version.properties" />
    <copy file="${conf.dir}/grouper.example.properties" 
      todir="${build.dir.grouper}" />
    <copy file="${conf.dir}/grouper.hibernate.example.properties" 
      todir="${build.dir.grouper}" />
    <copy file="${conf.dir}/grouper-loader.example.properties" 
      todir="${build.dir.grouper}" />
    <tstamp>
       <format property="the.timestamp" pattern="yyyy/MM/dd HH:mm:ss" />
    </tstamp>
    <jar destfile="${dist.dir}/lib/${app.name}-${DSTAMP}.jar" basedir="${build.dir.grouper}">
      <manifest>
        <attribute name="Built-By"                value="${user.name}"/>
        <attribute name="Implementation-Vendor"   value="${impl.vendor}"/>
        <attribute name="Implementation-Title"    value="${app.name}"/>
        <attribute name="Implementation-Version"  value="${version}"/>
        <attribute name="Implementation-URL"      value="${impl.url}"/>
        <attribute name="Build-Timestamp"         value="${the.timestamp}"/>
      </manifest>
    </jar>
    <copy file="${dist.dir}/lib/${app.name}-${DSTAMP}.jar"   
          tofile="${dist.dir}/lib/${app.name}.jar" 
    />
    
    
    <mkdir dir="${dist.dir}/lib/test"/>
        
    <!-- we need a jar for test code -->
    <jar destfile="${dist.dir}/lib/test/grouper-test.jar">
      <manifest>
        <attribute name="Built-By"                value="${user.name}"/>
        <attribute name="Implementation-Vendor"   value="${impl.vendor}"/>
        <attribute name="Implementation-Title"    value="${app.name}"/>
        <attribute name="Implementation-Version"  value="${version}"/>
        <attribute name="Implementation-URL"      value="${impl.url}"/>
      </manifest>
      <fileset dir="${build.dir.test}">
        <include name="**/*.class"/>
      </fileset>
      <fileset dir="${src.dir.test}">
        <include name="**/*"/>
        <exclude name="conf/**"/>
      </fileset>
    </jar>
  </target>
  <!-- target: dist -->

  <!-- target: eg.bootstrap -->
  <!-- run example bootstrap programs -->
  <target name="eg.bootstrap"
          depends="compile"
  >
    <record name="${basedir}/eg.log" action="start"/>
    <antcall  target="db.reset"/>
    <antcall  target="eg.run">
      <param name="name" value="Bootstrap"/> 
    </antcall>
    <record name="${basedir}/eg.log" action="stop"/>
  </target>
  <!--target:  eg.bootstrap -->

  <!-- target: eg.run -->
  <target name="eg.run">
    <java fork="true"
          maxmemory="${memory.max}"
          classpathref="project.classpath"
          classname="edu.internet2.middleware.grouper.eg.${name}"
          failonerror="true"
    >
    <sysproperty key="grouper.home" value="${grouper.home}"/>
    </java>
  </target>
  <!-- target: eg.run -->

  <!-- target: ensure.cmd -->
  <target name="ensure.cmd" unless="cmd">
    <fail message='You must run this target with -Dcmd="command line arguments"'/>
  </target>
  <!-- target: ensure.cmd -->

  <!-- target: ensure.name -->
  <target name="ensure.name" unless="name">
    <fail message="You must run this target with -Dname=NAME"/>
  </target>
  <!-- target: ensure.name -->

  <!-- target: ensure.test.name -->
  <target name="ensure.test.name" unless="test">
    <fail message="You must run this target with -Dtest=TestName"/>
  </target>
  <!-- target: ensure.test.name -->

  <!-- target: hsqldb -->
  <!-- connect to hsqldb running in server mode -->
  <target name="hsqldb" 
          depends="init"
  >
    <java fork="true"
          maxmemory="${memory.max}"
          classpathref="project.classpath"
          jar="${lib.jar.hsqldb}"
          dir="${conf.dir}"
    >
      <arg value="grouper" />
    </java>
  </target>
  <!-- target: hsqldb -->

  <!-- target: hsqldb.start -->
  <!-- start hsqldb in server mode -->
  <target name="hsqldb.start" 
          depends="init"
  >
    <java fork="true"
          spawn="true"
          maxmemory="${memory.max}"
          classpathref="project.classpath"
          classname="org.hsqldb.Server"
          dir="${conf.dir}"
    />
  </target>
  <!-- target: hsqldb.start -->

  <!-- target: hsqldb.stop -->
  <!-- stop hsqldb running in server mode -->
  <target name="hsqldb.stop" 
          depends="init"
  >
    <java fork="true"
          spawn="true"
          maxmemory="${memory.max}"
          classpathref="project.classpath"
          jar="${lib.jar.hsqldb}"
          dir="${conf.dir}"
    >
      <arg  value="--sql"     />
      <arg  value="shutdown;" />
      <arg  value="grouper"   />
    </java>
  </target>
  <!-- target: hsqldb.stop -->

  <!-- target: init -->
  <target name="init">
    <tstamp/>
    <mkdir dir="${build.dir.test}"/>
    <mkdir dir="${ext.dir.lib}"/> <!-- a bit of a hack -->
    <mkdir dir="${ext.dir}/conf"/>
    <!-- only define our classpath once -->
    <path id="project.classpath">
      <!-- for configuration files -->
      <pathelement location="${conf.dir}"/>
      <pathelement location="${ext.dir}/conf"/>
      <fileset dir="${lib.dir}">
        <include name="**/*.jar"/>
      </fileset>
      <!--<fileset dir="dist/lib">
        <include name="**/*.jar"/>
      </fileset>-->
      <fileset dir="${ext.dir.lib}">
        <include name="**/*.jar"/>
      </fileset>
      <pathelement  location="${build.dir.grouper}"/>
      <pathelement  location="${build.dir.grouper}"/>
      <pathelement  location="${build.dir.test}"/>
      <pathelement  location="${user.home}/.ant/lib/clover.jar"/>
      <pathelement path="${java.class.path}"/>
    </path>
    <pathconvert  targetos="unix"
                  property="project.classpath.string" 
                  refid="project.classpath"
    />
   <path id="test.classpath">
	<pathelement location="${build.dir.test}/conf"/>
	<path refid="project.classpath"/>
   </path>
   <pathconvert  targetos="unix"
                  property="test.classpath.string" 
                  refid="test.classpath"
    />
    

    <!-- fix line endings and permissions of scripts -->
    <fixcrlf srcdir="bin" eol="unix" includes="*.sh" />
    <fixcrlf srcdir="bin" eol="dos" includes="*.bat" />
    <chmod dir="bin" includes="*.sh,*.bat" perm="ugo+rx"/>

    <!-- fix line endings and permissions of scripts -->
    <fixcrlf srcdir="bin" eol="unix" includes="*.sh" />
    <fixcrlf srcdir="bin" eol="dos" includes="*.bat" />
    <chmod dir="bin" includes="*.sh,*.bat" perm="ugo+rx"/>

  </target>
  <!-- target: init -->

  <!-- target: init.conf -->
  <!-- expands macros in several configuration files to set proper absolute paths -->
  <target name="init.conf"
          depends="init"
  >
    <dirname property="base" file="build.xml"/>
    <pathconvert  targetos="unix"
                  property="converted.base"
    >
        <path path="${base}"/>
    </pathconvert>

    <!-- see if grouper.properties is there -->
    <condition property="configfile" value="${conf.dir}/grouper.properties" 
        else="${conf.dir}/grouper.example.properties">
      <available file="${conf.dir}/grouper.properties" type="file"/>
    </condition>
    
    <!-- if grouper.properties is there, copy it to itself, if not, get the example -->
    <copy tofile="${conf.dir}/grouper.properties" file="${configfile}" verbose="true" />
    
    <!-- see if morphString.properties is there -->
    <condition property="morphStringConfigfile" value="${conf.dir}/morphString.properties" 
        else="${conf.dir}/morphString.example.properties">
      <available file="${conf.dir}/morphString.properties" type="file"/>
    </condition>
    
    <!-- if morphString.properties is there, copy it to itself, if not, get the example -->
    <copy tofile="${conf.dir}/morphString.properties" file="${morphStringConfigfile}" verbose="true" />
    
    <!-- see if server.properties is there -->
    <condition property="serverConfigfile" value="${conf.dir}/server.properties" 
        else="${conf.dir}/server.example.properties">
      <available file="${conf.dir}/server.properties" type="file"/>
    </condition>
    
    <!-- if morphString.properties is there, copy it to itself, if not, get the example -->
    <copy tofile="${conf.dir}/server.properties" file="${serverConfigfile}" verbose="true" />
    
  </target>
  <!-- target: init.conf -->

  <!-- target: jar -->
  <!-- TODO 20070329 remove post 1.2.0 -->
  <target name="jar">
    <echo message="WARNING: target 'jar' is deprecrated and will be removed in a future release"/>
    <antcall target="dist"/>
  </target>
  <!-- target: jar -->

  <!-- target: javadoc -->
  <target name="javadoc"
          description="Create the JavaDocs"
          depends="init"
  >
    <delete dir="${dist.dir.javadoc}"/>
    <mkdir  dir="${dist.dir.javadoc}"/>
    <record name="${javadoc.log}" action="start"/>
    <copy file="${src.doc.css}" tofile="${javadoc.css}"/>
    <!-- TODO 20070315 use "overview=..." -->
    <echo message="generating javadoc in ${dist.dir.javadoc}"/>
    <javadoc  destdir="${dist.dir.javadoc}"
              access="public"
              author="true"
              breakiterator="true"
              classpathref="project.classpath" 
              nodeprecatedlist="false"
              nodeprecated="false"
              noindex="false"
              nonavbar="false"
              notree="false"
              splitindex="true"
              stylesheetfile="${javadoc.css}"
              use="true"
              version="true"
    >
      <packageset dir="${src.dir.grouper}" defaultexcludes="yes">
        <exclude name="edu/internet2/middleware/grouper/bench/**"/>
        <exclude name="edu/internet2/middleware/grouper/prof/**"/>
      </packageset>
    </javadoc>
    <!-- generate extension documentation -->
    <antcall target="ext.doc"/>
    <record name="${javadoc.log}" action="stop"/>
  </target>
  <!-- target: javadoc -->

  <!-- target: test -->
  <target name="test" 
          depends="test.compile"
          description="Run Grouper Tests"
  >
    <echo/>
    <echo message="*** results can be found in ${dist.dir.test} ***"/>
    <echo/>
    <record name="${test.log}" action="start" append="yes"/>
    <mkdir dir="${dist.dir.test}"/>
    <!-- prompt the user -->
    <java fork="false"
              maxmemory="${memory.max}"
              classpathref="test.classpath"
              classname="edu.internet2.middleware.grouper.util.ConfirmDbChangePromptOnly"
              failonerror="true"
        >
       <sysproperty key="grouper.home" value="${grouper.home}"/>
        <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,address=4001,suspend=y"/>
        </java>
    
    <input validargs="y,n"
        addproperty="do.sql"
      />
      <condition property="do.abort.sql">
        <equals arg1="n" arg2="${do.sql}"/>
      </condition>
      <fail if="do.abort.sql">Build aborted by user.</fail>

    <junit  fork="yes"
            haltonerror="yes"
            haltonfailure="yes"
            maxmemory="${memory.max}"
            printsummary="withOutAndErr"
            showoutput="yes"
    >
      <jvmarg value="-Dgrouper.allow.db.changes=true"/>
      <jvmarg value="-Dgrouper.home=${grouper.home}"/>
      <classpath  refid="test.classpath"/>
      <formatter  type="xml"/>
      <test       name="edu.internet2.middleware.grouper.SuiteDefault"
                  todir="${dist.dir.test}" 
      />
    </junit>
    <!-- TODO 20061228 Switch to batchtest once I've migrated the tests
          <batchtest  fork="yes"
                      todir="${dist.dir.test}"
          >
            <formatter  type="xml"/>
            <fileset    dir="${src.dir.test}">
              <include  name="**/Test*.java"/>
              <exclude  name="**/Suite*.java"/>
            </fileset>  
          </batchtest>
    -->
    <!-- test extensions -->
    <antcall target="ext.test"/>
    <record name="${test.log}" action="stop"/>
  </target>
  <!-- target: test -->

  <!-- target: test.compile -->
  <target name="test.compile" 
          depends="init, compile"
  >
    <record name="${test.log}" action="start" append="yes"/>
    <javac srcdir="${src.dir.test}" destdir="${build.dir.test}" debug="true">
      <classpath  refid="test.classpath"/>
      <include name="**/*.java" />
    </javac>
    <copy todir="${build.dir.test}">
      <fileset dir="${src.dir.test}">
        <include name="**/*.gsh"/>      <!-- source -->
      </fileset>
   </copy>
	<!--copy over test specific conf-->
	<mkdir dir="${build.dir.test}/conf"/>
	<copy todir="${build.dir.test}/conf">
		<fileset dir="${src.dir.test}/conf"/>
	</copy>
    <record name="${test.log}" action="stop"/>
  </target>
  <!-- target: test.compile -->

  <!-- target: test.run -->
  <target name="test.run" 
          depends="init, test.compile, ensure.test.name"
          description="Run the Grouper API test specified with -Dtest=NAME"
  >
    <record name="${test.log}" action="start" append="yes"/>
    <property name="test.class" value="edu.internet2.middleware.grouper.${test}"/>
    <available  classname="${test.class}"
                property="test.class.exists"
                classpathref="test.classpath" 
    />
    <fail unless="test.class.exists" message="Could not find test class '${test.class}'"/>
    <!-- CH example of prompting user with ant, then pass env var to init schema -->
    <java fork="false"
              maxmemory="${memory.max}"
              classpathref="test.classpath"
              classname="edu.internet2.middleware.grouper.util.ConfirmDbChangePromptOnly"
              failonerror="true"
        >
       <sysproperty key="grouper.home" value="${grouper.home}"/>
        </java>
    
    <input validargs="y,n"
        addproperty="do.delete.test"
      />
      <condition property="do.abort.test">
        <equals arg1="n" arg2="${do.delete.test}"/>
      </condition>
      <fail if="do.abort.test">Build aborted by user.</fail>
    <junit printsummary="withOutAndErr" fork="true"> 
      <!-- we just prompted the user about the changes -->
      <jvmarg value="-Dgrouper.allow.db.changes=true"/>
      <jvmarg value="-Dgrouper.home=${grouper.home}"/>
      <classpath  refid="test.classpath"/>
      <formatter  type="plain" usefile="false"/>
      <test       name="${test.class}"/>
    </junit>
    <record name="${test.log}" action="stop"/>
  </target>
  <!-- target: test.run -->
  
  <!-- target: xml.import -->    
  <target name="xml.import">
   <fail>The xml.import target has been superseded by gsh. Invoke gsh(.sh) -xmlimport</fail>
  </target>
  <!-- target: xml.import -->
  
  <!-- target: xml-import -->    
  <target name="xml-import">
   <fail>The xml-import target has been superseded by gsh. Invoke gsh(.sh) -xmlimport</fail>
  </target>
  <!-- target: xml.import -->
  <!-- target: xml.export -->    
  <target name="xml.export">
   <fail>The xml.export target has been superseded by gsh. Invoke gsh(.sh) -xmlexport</fail>
  </target>
  <!-- target: xml.export -->
   <!-- target: xml-export -->    
  <target name="xml-export">
   <fail>The xml-export target has been superseded by gsh. Invoke gsh(.sh) -xmlexport</fail>
  </target>
  <!-- target: xml.export -->
  
  <target name="schemaexport">
  	<fail>The schemaexport target has been superseded by gsh. Invoke gsh(.sh) -registry</fail>
  </target>
  <target name="db.init">
  	<fail>The db.init target has been superseded by gsh. Invoke gsh(.sh) -registry</fail>
  </target>
  <target name="db-init">
  	<fail>The db-init target has been superseded by gsh. Invoke gsh(.sh) -registry</fail>
  </target>

</project>

