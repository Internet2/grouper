#
# Copyright 2014 Internet2
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# Grouper Configuration
# $Id: grouper.example.properties,v 1.48 2009-12-16 06:02:30 mchyzer Exp $
#

# Grouper uses Grouper Configuration Overlays (documented on wiki)
# By default the configuration is read from grouper.base.properties
# (which should not be edited), and the grouper.properties overlays
# the base settings.  See the grouper.base.properties for the possible
# settings that can be applied to the grouper.properties


########################################
## Config chaining hierarchy
## This section is the configuration
## for chaining hierarchy
########################################

# comma separated config files that override each other (files on the right override the left)
# each should start with file: or classpath:
# e.g. classpath:grouper.example.properties, file:c:/something/myconfig.properties
# {valueType: "string", required: true, multiple: true, requiresRestart: true}
grouper.config.hierarchy = classpath:grouper.base.properties, classpath:grouper.properties

# seconds between checking to see if the config files are updated
# {valueType: "integer", required: true}
grouper.config.secondsBetweenUpdateChecks = 60


########################################
## General settings
########################################

# used to identify your institution (e.g. in TIER instrumentation)
# {valueType: "string"}
grouper.institution.name = 

# main stem for grouper built in objects
# Note: there are more locations to change than just this
# {valueType: "stem", required: true, defaultValue: "true"}
grouper.rootStemForBuiltinObjects = etc

#######################################
## inititalization and configuration settings
#######################################

#if grouper should auto init the registry if not initted (i.e. insert the root stem, built in fields, etc)
#defaults to true
# {valueType: "boolean", required: true}
registry.autoinit = true

#auto-create groups (increment the integer index), and auto-populate with users 
#(comma separated subject ids) to bootstrap the registry on startup
#(note: check config needs to be on)
# {regex: "configuration.autocreate.group.name.[0-9]+", valueType: "group", required: true}
#configuration.autocreate.group.name.0 = $$grouper.rootStemForBuiltinObjects$$:uiUsers

# {regex: "^configuration.autocreate.group.description.[0-9]+$", valueType: "string"}
#configuration.autocreate.group.description.0 = users allowed to log in to the UI

# {regex: "configuration.autocreate.group.subjects.[0-9]+", valueType: "subject"}
#configuration.autocreate.group.subjects.0 = johnsmith

# some attribute def
# {valueType: "attributeDef"}
someAttrDef =

# some attribute def name
# {valueType: "attributeDefName"}
someAttrDefName =

# some class extends another class
# {valueType: "class", mustExtendClass: "edu.internet2.middleware.grouper.cfg.dbConfig.GrouperDbConfigAbstractExample"}
someClassExtends =

# some class implements another class
# {valueType: "class", mustImplementInterface: "edu.internet2.middleware.grouper.cfg.dbConfig.GrouperDbConfigInterfaceExample"}
someClassImplements =

# some pass
# {valueType: "password", sensitive: true}
somePass = 

# some floatin
# {valueType: "floating"}
someFloating = 

# some group
# {valueType: "group"}
someGroup = 

# some integer
# {valueType: "integer"}
someInteger = 

# some stem
# {valueType: "stem"}
someStem = 

# some subject
# {valueType: "subject"}
someSubject = 

