package edu.internet2.middleware.grouper.app.reports;

import edu.internet2.middleware.grouper.GrouperSession;
import edu.internet2.middleware.grouper.attr.AttributeDef;
import edu.internet2.middleware.grouper.attr.AttributeDefName;
import edu.internet2.middleware.grouper.attr.finder.AttributeDefFinder;
import edu.internet2.middleware.grouper.attr.finder.AttributeDefNameFinder;
import edu.internet2.middleware.grouper.exception.GrouperSessionException;
import edu.internet2.middleware.grouper.internal.dao.QueryOptions;
import edu.internet2.middleware.grouper.misc.GrouperSessionHandler;

/**
 *
 */
public class GrouperReportConfigAttributeNames {
  
  /**
   * main attribute definition assigned to groups, folders
   */
  public static final String GROUPER_REPORT_CONFIG_DEF = "reportConfigDef";
  
  
  /**
   * main attribute name assigned to reportConfigDef
   */
  public static final String GROUPER_REPORT_CONFIG_ATTRIBUTE_NAME = "reportConfigMarker";
  
  
  /**
   * attribute definition for name value pairs assigned to assignment on groups or folders
   */
  public static final String GROUPER_REPORT_CONFIG_VALUE_DEF = "reportConfigValueDef";
  
  /**
   * report config type. Currently only SQL is available
   */
  public static final String GROUPER_REPORT_CONFIG_TYPE = "reportConfigType";
  
  
  /**
   * report config format. Currently only CSV is available
   */
  public static final String GROUPER_REPORT_CONFIG_FORMAT = "reportConfigFormat";

  /**
   * Name of report. No two reports in the same owner should have the same name
   */
  public static final String GROUPER_REPORT_CONFIG_NAME = "reportConfigName";
  
  
  /**
   * e.g. usersOfMyService_$$timestamp$$.csv $$timestamp$$ translates to current time in this format: yyyy_mm_dd_hh24_mi_ss
   */
  public static final String GROUPER_REPORT_CONFIG_FILE_NAME = "reportConfigFilename";
  
  
  /**
   * Textarea which describes the information in the report. Must be less than 4k
   */
  public static final String GROUPER_REPORT_CONFIG_DESCRIPTION = "reportConfigDescription";
  
  
  /**
   * sql config id
   */
  public static final String GROUPER_REPORT_CONFIG_SQL_CONFIG = "reportConfigSqlConfig";
  
  /**
   * Set to false if should not send report email if no data
   */
  public static final String GROUPER_REPORT_CONFIG_SEND_EMAIL_WITH_NO_DATA = "reportConfigSendEmailWithNoData";
  
  /**
   * Set to false if should not store if no data
   */
  public static final String GROUPER_REPORT_CONFIG_STORE_WITH_NO_DATA = "reportConfigStoreWithNoData";
  
  /**
   * GroupId of people who can view this report. Grouper admins can view any report
   */
  public static final String GROUPER_REPORT_CONFIG_VIEWERS_GROUP_ID = "reportConfigViewersGroupId";
  
  /**
   * Quartz cron-like schedule
   */
  public static final String GROUPER_REPORT_CONFIG_QUARTZ_CRON = "reportConfigQuartzCron";
  
  
  /**
   * true/false if email should be sent
   */
  public static final String GROUPER_REPORT_CONFIG_SEND_EMAIL = "reportConfigSendEmail";
  
  
  /**
   * subject for email (optional, will be generated from report name if blank)
   */
  public static final String GROUPER_REPORT_CONFIG_EMAIL_SUBJECT = "reportConfigEmailSubject";
  
  
  /**
   * optional, will be generated by a grouper default if blank

    body for email, support \n for newlines, and substitute in: $$reportConfigName$$, $$reportConfigDescription$$, $$subjectName$$ and $$reportLink$$ The link 
    will go to the report instance screen for this report
    
    note: the $$reportLink$$ must be in the email template if it is not blank
   */
  public static final String GROUPER_REPORT_CONFIG_EMAIL_BODY = "reportConfigEmailBody";
  
  
  /**
   * true/false if report viewers should get email (if reportSendEmail is true)
   */
  public static final String GROUPER_REPORT_CONFIG_SEND_EMAIL_TO_VIEWERS = "reportConfigSendEmailToViewers";
  
  /**
   * if reportSendEmail is true, and reportSendEmailToViewers is false), 
   * this is the groupId where members are retrieved from, and the subject email attribute, if not null then send
   */
  public static final String GROUPER_REPORT_CONFIG_SEND_EMAIL_TO_GROUP_ID = "reportConfigSendEmailToGroupId";
  
  /**
   * SQL for the report. The columns must be named in the SQL (e.g. not select *) and generally this comes from a view
   */
  public static final String GROUPER_REPORT_CONFIG_QUERY = "reportConfigQuery";
  
  /**
   * GSH script for report
   */
  public static final String GROUPER_REPORT_CONFIG_SCRIPT = "reportConfigScript";
  
  /**
   * logic from loader enabled, either enable or disabled this job
   */
  public static final String GROUPER_REPORT_CONFIG_ENABLED = "reportConfigEnabled";
  
  
  /**
   * marker attribute def assigned to stem or group
   * @return the attribute def name
   */
  public static AttributeDefName retrieveAttributeDefNameBase() {

    final String reportConfigAttributeName = GrouperReportSettings.reportConfigStemName()+":"+GROUPER_REPORT_CONFIG_ATTRIBUTE_NAME;

    AttributeDefName attributeDefName = (AttributeDefName)GrouperSession.internal_callbackRootGrouperSession(new GrouperSessionHandler() {
      
      @Override
      public Object callback(GrouperSession grouperSession)
          throws GrouperSessionException {
        
        return AttributeDefNameFinder.findByName(reportConfigAttributeName, false, new QueryOptions().secondLevelCache(false));
        
      }
      
    });
  
    if (attributeDefName == null) {
      throw new RuntimeException("Why cant grouperObjectTypeMarker attribute def name be found? '" + reportConfigAttributeName + "'");
    }
    
    return attributeDefName;
  }
  
  
    /**
     * attribute value def assigned to stem or group
     * @return the attribute def
     */
    public static AttributeDef retrieveAttributeDefBaseDef() {

      final String reportConfigNameOfDef = GrouperReportSettings.reportConfigStemName()+":"+GROUPER_REPORT_CONFIG_DEF;

      AttributeDef attributeDef = (AttributeDef)GrouperSession.internal_callbackRootGrouperSession(new GrouperSessionHandler() {
        
        @Override
        public Object callback(GrouperSession grouperSession)
            throws GrouperSessionException {
          
          return AttributeDefFinder.findByName(reportConfigNameOfDef, false, new QueryOptions().secondLevelCache(false));
          
        }
        
      });
    
      if (attributeDef == null) {
        throw new RuntimeException("Why cant reportConfigDef attribute def be found? '" + reportConfigNameOfDef + "'");
      }
      
      return attributeDef;
    }
    
    /**
     * attribute value def assigned to stem or group
     * @return the attribute def
     */
    public static AttributeDef retrieveAttributeDefValueDef() {
      
      final String reortConfigNameOfValueDef = GrouperReportSettings.reportConfigStemName()+":"+GROUPER_REPORT_CONFIG_VALUE_DEF;

      AttributeDef attributeDef = (AttributeDef)GrouperSession.internal_callbackRootGrouperSession(new GrouperSessionHandler() {
        
        @Override
        public Object callback(GrouperSession grouperSession)
            throws GrouperSessionException {
          
          return AttributeDefFinder.findByName(reortConfigNameOfValueDef, false, new QueryOptions().secondLevelCache(false));
          
        }
        
      });
    
      if (attributeDef == null) {
        throw new RuntimeException("Why cant reportConfigValueDef attribute def be found? '" + reortConfigNameOfValueDef + "'");
      }
      
      return attributeDef;
    }

}
