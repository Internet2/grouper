#
# Copyright 2014 Internet2
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


# Max number of subjects to be able to pass to addMember service, default is 1000000
ws.add.member.subjects.max = 20000

# Max number of subjects to be able to pass to addMember service, default is 1000000
ws.has.member.subjects.max = 20000

# Max number of subjects to be able to pass to addMember service, default is 1000000
ws.group.save.max = 20000

# Max number of subjects to be able to pass to getGroups service, default is 1000000
ws.get.groups.subjects.max = 20000

# This is the number of subjects found which is too many to see if in group.  When seeing if
# in group, that requires batched in size 80 each subject.  So for 800 subjects, that is 
# 10 queries
ws.get.subjects.max.filter.by.group = 1000

# Web service users who are in the following group can use the actAs field to act as someone else
# You can put multiple groups separated by commas.  e.g. a:b:c, e:f:g
# You can put a single entry as the group the calling user has to be in, and the grouper the actAs has to be in
# separated by 4 colons
# e.g. if the configured values is:       a:b:c, e:f:d :::: r:e:w, x:e:w
# then if the calling user is in a:b:c or x:e:w, then the actAs can be anyone
# if not, then if the calling user is in e:f:d, then the actAs must be in r:e:w.  If multiple rules, then 
# if one passes, then it is a success, if they all fail, then fail.
ws.act.as.group = etc:webServiceActAsGroup

# cache the decision to allow a user to actAs another, so it doesnt have to be calculated each time
# defaults to 30 minutes
ws.act.as.cache.minutes = 30

# If there is an entry here for group name, then all web service client users must be in this group (before the actAs)
ws.client.user.group.name = etc:webServiceClientUsers

# cache the decision to allow a user to user web services, so it doesnt have to be calculated each time
# defaults to 30 minutes: 
ws.client.user.group.cache.minutes = 30

# if you have subject namespace overlap (or not), set the default subject 
# source to lookup the user if none specified in user name
ws.logged.in.subject.default.source = 

# subject attribute names to send back when a WsSubjectResult is sent, comma separated
# e.g. name, netid
# default is none
ws.subject.result.attribute.names = 

# subject result attribute names when extended data is requested (comma separated)
# default is name, description
# note, these will be in addition to ws.subject.result.attribute.names
ws.subject.result.detail.attribute.names = 

# if the request has no content type (http params), and the response content type is not
# specified in the url, then put it here.  must be a valid value of WsLiteResponseContentType
# defaults to xhtml if blank
ws.rest.default.response.content.type = xhtml

# to provide custom authentication (instead of the default httpServletRequest.getUserPrincipal()
# for non-Rampart authentication.  Class must implement the interface:
# edu.internet2.middleware.grouper.ws.security.WsCustomAuthentication
# class must be fully qualified.  e.g. edu.school.whatever.MyAuthenticator
# blank means use default: edu.internet2.middleware.grouper.ws.security.WsGrouperDefaultAuthentication
# kerberos: edu.internet2.middleware.grouper.ws.security.WsGrouperKerberosAuthentication
ws.security.non-rampart.authentication.class = 

# to provide rampart authentication, Class must implement the interface:
# edu.internet2.middleware.grouper.ws.security.GrouperWssecAuthentication
# class must be fully qualified.  e.g. edu.school.whatever.MyAuthenticator
# blank means rampart will throw 404 status code
ws.security.rampart.authentication.class = 

###############################################
## Misc settings
###############################################

# ignore extraneous xml fields from server (e.g. on server upgrade, when the client isnt upgraded)
# if you dont ignore, and there is an extraneous field which is not omitted (below), then an exception 
# will be thrown
ws.ignoreExtraneousXmlFieldsRest = false

# register fields to be ignored with xstream.  this is useful if you are not
# ignoring extraneous fields (above), but know that there are a few to be ignored
# place them here with fully qualified classname dont property name, comma separated
# e.g. edu.internet2.middleware.grouper.ws.soap.WsResponseMeta.millis, edu.internet2.middleware.grouper.ws.soap.WsResponseMeta.millis2
ws.omitXmlPropertiesRest = 

# will add the charset to the content type, blank to omit
ws.restHttpContentTypeCharset = UTF-8

# configure the pluggable json converter (defaults to json.org implementation), must implement the JsonConverter interface
# to use the xstream converter, set to edu.internet2.middleware.grouper.ws.rest.json.XstreamJsonConverter
jsonConverter = 


################# KERBEROS settings, only needed if doing kerberos simple auth ################
# realm, whatever your realm is, e.g. SCHOOL.EDU
kerberos.realm =
# address of your kdc, e.g. kdc.school.edu
kerberos.kdc.address =

################# DIAGNOSTICS ##################

#if ignore tests.  Note, in job names, invalid chars need to be replaced with underscore (e.g. colon)
#anything in this regex: [^a-zA-Z0-9._-]
ws.diagnostic.ignore.memoryTest = false
ws.diagnostic.ignore.dbTest_grouper = false
ws.diagnostic.ignore.source_jdbc = false
ws.diagnostic.ignore.loader_CHANGE_LOG_changeLogTempToChangeLog = false

#number of minute that can go by without a success before an error is thrown
ws.diagnostic.minutesSinceLastSuccess.loader_SQL_GROUP_LIST__aStem_aGroup2 = 60

#list groups which should check the size, in this case, "employee" or "students" in the key name is a variable
#ws.diagnostic.checkGroupSize.employees.groupName = community:employees
#ws.diagnostic.checkGroupSize.employees.minSize = 28000

#ws.diagnostic.checkGroupSize.students.groupName = community:students
#ws.diagnostic.checkGroupSize.students.minSize = 18000

################# TESTING ################### 
# for testing only, where the main dir is from the test project (or any)
ws.testing.grouper-ws.dir=../grouper-ws

# for testing only, where is the generated client dir for samples / testing
ws.testing.generated.client.dir=../grouper-ws-java-generated-client

# for testing only, where is the manual client dir for samples / testing
ws.testing.manual.client.dir=../grouper-ws-java-manual-client

# http prefix for hitting tests
ws.testing.httpPrefix=http

# host for hitting tests
ws.testing.host=localhost

# port for hitting tests
ws.testing.port=8090

# app name for hitting tests
ws.testing.appName=grouper-ws

# user to login to tests
ws.testing.user=GrouperSystem

# pass to login to tests
ws.testing.pass=private

# version the client advertises to server
ws.testing.version=v2_0_000

ws.client.user.group.name = testGroup
