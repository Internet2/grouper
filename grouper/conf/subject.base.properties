#
# Copyright 2014 Internet2
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# Subject configuration
# $Id: subject.base.properties,v 1.24 2009-12-30 04:23:02 mchyzer Exp $
#

# The subject proprties uses Grouper Configuration Overlays (documented on wiki)
# By default the configuration is read from subject.base.properties
# (which should not be edited), and the subject.properties overlays
# the base settings.  See the subject.base.properties for the possible
# settings that can be applied to the subject.properties

########################################
## Config chaining hierarchy
########################################

# comma separated config files that override each other (files on the right override the left)
# each should start with file: or classpath:
# e.g. classpath:subject.example.properties, file:c:/something/myconfig.properties
# {valueType: "string", required: true, multiple: true}
subject.config.hierarchy = classpath:subject.base.properties, classpath:subject.properties

# seconds between checking to see if the config files are updated
# {valueType: "integer", required: true}
subject.config.secondsBetweenUpdateChecks = 60

########################################
## Subject caching
########################################

# There are various caches for subjects.
# This cache will alleviate calls to databases and ldaps.
# {valueType: "string"}
subject.cache.enable = true

# implementation of a serializer for the cache
# {valueType: "class", mustExtendClass: "edu.internet2.middleware.grouper.subj.cache.SubjectSourceSerializer"}
subject.cache.serializer = edu.internet2.middleware.grouper.subj.cache.SubjectSourceSerializerFile

# if we are serializing to a file, enter a directory, else it is not used
# {valueType: "string"}
subject.cache.serializer.directory = 

# max subjects in cache
# {valueType: "integer"}
subject.cache.maxElementsInMemory = 200000

# if the cache should auto refresh in background
# {valueType: "boolean"}
subject.cache.autoRefresh = true

# Sets the time to live cycle for an element before it expires or gets refreshed.  Default 1 hour
# {valueType: "integer", required: true}
subject.cache.timeToLiveSeconds = 3600

# Resolve subjects again if necessary, after this percent of time to live
# {valueType: "integer", required: true}
subject.cache.timeToLivePercentageToResolveSubjectsIfNecessary = 90

# Sets the time to live cycle for an element which is not found before it expires or gets refreshed.  Default 3 minute
# {valueType: "integer", required: true}
subject.cache.timeToLiveNotFoundSeconds = 180

# Resolve subjects again if necessary, after this percent of time to live for not found subjects.
# note if the time to live for not found subjects is low, this has to be low too so there is time to resolve...
# {valueType: "integer", required: true}
subject.cache.timeToLiveNotFoundPercentageToResolveSubjectsIfNecessary = 50

# if the subject has been used at least this many times in the last cycle then auto refresh the subject
# or else just remove the subject.  in other words if the subject is used once (default) in the time to live (default is 1 hour),
# then dont remove from cache.  This will make room for new subjects in cache
# set to 0 to refresh all
# {valueType: "integer", required: true}
subject.cache.minUseInCycleToAutoRefresh = 1

# if the subject has been used at least this many times in the last cycle then dont delete unless needed.
# If the cache is 90% full, and all subjects that havent been used once have been deleted, then in the second
# level delete all subjects that were used less than 5 times, to make room for new subjects in cache
# {valueType: "integer", required: true}
subject.cache.minUseLevel2ToNotDelete = 5

# if the subject has been used at least this many times in the last cycle then dont delete unless needed.
# if the cache is 90% full, and the level 1 pass and level 2 pass have been completed, and the cache is still
# 90% full, then delete subjects that were used less than 20 times, to make room for new subjects.
# {valueType: "integer", required: true}
subject.cache.minUseLevel3ToNotDelete = 20

# will log stats of the cache to WARN from edu.internet2.middleware.grouper.subj.cache.SubjectSourceCache
# -1 to not log.  Might want to write daily: 86400
# {valueType: "integer"}
subject.cache.logStatsSeconds = 86400

# exclude these sourceIds from cache, comma separated
# {valueType: "string", multiple: true}
subject.cache.excludeSourceIds = $$subjectApi.source.g_gsa.id$$

# this helps configure the subject source correctly.  if a subject is found by identifier, and that attribute is
# not mapped in the subject source, log at warn level so the admin can change the subject source so grouper knows the attribute is an identifier.
# {valueType: "boolean"}
subject.cache.logWarnIfIdentiferNotConfigured = true

# sleep this many seconds in between looking for items to delete (if cache is full).  wont run more than once per minute
# {valueType: "integer", required: true}
subject.cache.waitSecondsBetweenSweepforDeletes = 60

# dont sweep cache unless the cache is this percent full.  note this operation is quick but dont overdo it
# sweeping will delete items in cache which are expired and not used often, or if that doesnt help, then if they are expired
# {valueType: "integer"}
subject.cache.dontSweepCacheForDeletesUnlessCacheIsThisPercentFull = 90

# store a copy to external storage after this many seconds
# {valueType: "integer"}
subject.cache.storeToStorageAfterThisManySeconds = 1800

# rebuild cache to make consistent after this many seconds.  this does not resolve all subjects, just internal
# {valueType: "integer"}
subject.cache.rebuildCacheAfterThisManySeconds = 86400

# clone subjects out of cache in case they are edited
# {valueType: "boolean"}
subject.cache.cloneSubjectsOnReturn = true

# sleep this many seconds in between thread runs (which checks for delete, resolved, file store, etc)
# {valueType: "integer"}
subject.cache.sleepSecondsInBetweenThreadRuns = 120

########################################
## Legacy config
########################################

# enter the location of the sources.xml.  Must start with classpath: or file:
# blank means dont use sources.xml, use subject.properties
# default is: classpath:sources.xml
# e.g. file:/dir1/dir2/sources.xml
# {valueType: "string"}
subject.sources.xml.location = classpath:sources.xml

#########################################
## Configuration for source id: g:gsa
## Source configName: g_gsa
##########################################

# source id
# {valueType: "string", required: true}
subjectApi.source.g_gsa.id = g:gsa

# this is a friendly name for the source
# {valueType: "string", required: true}
subjectApi.source.g_gsa.name = Grouper: Group Source Adapter

# type is not used all that much.  Can have multiple types, comma separate.  Can be person, group, application
# {valueType: "string", required: true, multiple: true}
subjectApi.source.g_gsa.types = group

# the adapter class implements the interface: edu.internet2.middleware.subject.Source
# adapter class must extend: edu.internet2.middleware.subject.provider.BaseSourceAdapter
# edu.internet2.middleware.grouper.subj.GrouperJdbcSourceAdapter2  :  if doing JDBC this should be used if possible.  All subject data in one table/view.
# edu.internet2.middleware.grouper.subj.GrouperJdbcSourceAdapter   :  oldest JDBC source.  Put freeform queries in here
# edu.internet2.middleware.grouper.subj.GrouperJndiSourceAdapter   :  used for LDAP
# edu.internet2.middleware.subject.provider.NullSourceAdapter      :  returns not found.  You can use if you phase out a subject source
# {valueType: "class", mustExtendClass: "edu.internet2.middleware.subject.provider.BaseSourceAdapter"}
subjectApi.source.g_gsa.adapterClass = edu.internet2.middleware.grouper.GrouperSourceAdapter

# This virtual attribute index 0 is accessible via: subject.getAttributeValue("searchAttribute0");
# {valueType: "string", required: true, regex: "^subjectApi\\.source\\.g_gsa\\.param\\.subjectVirtualAttribute_([0-9]+)_([^.]+)\\.value$"}
subjectApi.source.g_gsa.param.subjectVirtualAttribute_0_searchAttribute0.value = ${subject.getAttributeValue('name')},${subject.getAttributeValue('displayName')},${subject.getAttributeValue('alternateName')}

# the nth sort attribute for lists on screen that are derived from member table (e.g. search for member in group)
# you can have up to 5 sort attributes 
# {valueType: "string", required: true, regex: "^subjectApi\\.source\\.g_gsa\\.param\\.sortAttribute([0-9]+)\\.value$"}
subjectApi.source.g_gsa.param.sortAttribute0.value = displayExtension

# the 1st search attribute for lists on screen that are derived from member table (e.g. search for member in group)
# you can have up to 5 search attributes 
# {valueType: "string", required: true, regex: "^subjectApi\\.source\\.g_gsa\\.param\\.searchAttribute([0-9]+)\\.value$"}
subjectApi.source.g_gsa.param.searchAttribute0.value = searchAttribute0

# max page size
# {valueType: "integer", required: true, regex: "^subjectApi\\.source\\.g_gsa\\.param\\.maxPageSize\\.value$"}
subjectApi.source.g_gsa.param.maxPageSize.value = 100

# internal attributes are used by grouper only not exposed to code that uses subjects.  comma separated
# {valueType: "string", regex: "^subjectApi\\.source\\.g_gsa\\.internalAttributes$"}
subjectApi.source.g_gsa.internalAttributes = searchAttribute0


#########################################
## Configuration for source id: grouperEntities
## Source configName: grouperEntities
##########################################

# source id
# {valueType: "string", required: true}
subjectApi.source.grouperEntities.id = grouperEntities

# this is a friendly name for the source
# {valueType: "string", required: true}
subjectApi.source.grouperEntities.name = Grouper: Entity Source Adapter

# type is not used all that much.  Can have multiple types, comma separate.  Can be person, group, application
# {valueType: "string", required: true, multiple: true}
subjectApi.source.grouperEntities.types = application

# the adapter class implements the interface: edu.internet2.middleware.subject.Source
# adapter class must extend: edu.internet2.middleware.subject.provider.BaseSourceAdapter
# edu.internet2.middleware.grouper.subj.GrouperJdbcSourceAdapter2  :  if doing JDBC this should be used if possible.  All subject data in one table/view.
# edu.internet2.middleware.grouper.subj.GrouperJdbcSourceAdapter   :  oldest JDBC source.  Put freeform queries in here
# edu.internet2.middleware.grouper.subj.GrouperJndiSourceAdapter   :  used for LDAP
# edu.internet2.middleware.subject.provider.NullSourceAdapter      :  returns not found.  You can use if you phase out a subject source
# {valueType: "class", mustExtendClass: "edu.internet2.middleware.subject.provider.BaseSourceAdapter"}
subjectApi.source.grouperEntities.adapterClass = edu.internet2.middleware.grouper.entity.EntitySourceAdapter

# This virtual attribute index 0 is accessible via: subject.getAttributeValue("searchAttribute0");
# {valueType: "string", required: true, regex: "^subjectApi\\.source\\.grouperEntities\\.param\\.subjectVirtualAttribute_([0-9]+)_([^.]+)\\.value$"}
subjectApi.source.grouperEntities.param.subjectVirtualAttribute_0_searchAttribute0.value = ${subject.getAttributeValue('name')},${subject.getAttributeValue('displayName')},${subject.getAttributeValue('alternateName')}

# the 1st sort attribute for lists on screen that are derived from member table (e.g. search for member in group)
# you can have up to 5 sort attributes 
# {valueType: "string", required: true, regex: "^subjectApi\\.source\\.grouperEntities\\.param\\.sortAttribute([0-9]+)\\.value$"}
subjectApi.source.grouperEntities.param.sortAttribute0.value = name

# the 1st search attribute for lists on screen that are derived from member table (e.g. search for member in group)
# you can have up to 5 search attributes 
# {valueType: "string", required: true, regex: "^subjectApi\\.source\\.grouperEntities\\.param\\.searchAttribute([0-9]+)\\.value$"}
subjectApi.source.grouperEntities.param.searchAttribute0.value = searchAttribute0

# internal attributes are used by grouper only not exposed to code that uses subjects.  comma separated
# {valueType: "string"}
subjectApi.source.grouperEntities.internalAttributes = searchAttribute0

#########################################
## Configuration for source id: jdbc
## Source configName: jdbc
#########################################

# note the config id does not have to be the same as the source id
#subjectApi.source.someConfigId.id = someSourceId
#                       ^
#                       |
#subjectApi.source.jdbc.id = jdbc

# this is a friendly name for the source
#subjectApi.source.jdbc.name = Example JDBC Source Adapter

# type is not used all that much.  Can have multiple types, comma separate.  Can be person, group, application
#subjectApi.source.jdbc.types = person

# the adapter class implements the interface: edu.internet2.middleware.subject.Source
# adapter class must extend: edu.internet2.middleware.subject.provider.BaseSourceAdapter
# edu.internet2.middleware.grouper.subj.GrouperJdbcSourceAdapter2  :  if doing JDBC this should be used if possible.  All subject data in one table/view.
# edu.internet2.middleware.grouper.subj.GrouperJdbcSourceAdapter   :  oldest JDBC source.  Put freeform queries in here
# edu.internet2.middleware.grouper.subj.GrouperJndiSourceAdapter   :  used for LDAP
# edu.internet2.middleware.subject.provider.NullSourceAdapter      :  returns not found.  You can use if you phase out a subject source
#subjectApi.source.jdbc.adapterClass = edu.internet2.middleware.grouper.subj.GrouperJdbcSourceAdapter

#subjectApi.source.jdbc.param.jdbcConnectionProvider.value = edu.internet2.middleware.grouper.subj.GrouperJdbcConnectionProvider

#subjectApi.source.jdbc.param.emailAttributeName.value = email

# maximum number of results from a search, generally no need to get more than 1000
#subjectApi.source.jdbc.param.maxResults.value = 1000

#subjectApi.source.jdbc.param.maxPageSize.value = 100

#subjectApi.source.jdbc.param.maxActive.value = 16

#subjectApi.source.jdbc.param.maxIdle.value = 16

#subjectApi.source.jdbc.param.maxWait.value = -1

#       e.g. mysql:           com.mysql.jdbc.Driver
#       e.g. p6spy (log sql): com.p6spy.engine.spy.P6SpyDriver
#         for p6spy, put the underlying driver in spy.properties
#       e.g. oracle:          oracle.jdbc.driver.OracleDriver
#       e.g. hsqldb:          org.hsqldb.jdbcDriver
#       e.g. postgres:        org.postgresql.Driver
#subjectApi.source.jdbc.param.dbDriver.value = org.hsqldb.jdbcDriver

#       e.g. mysql:           jdbc:mysql://localhost:3306/grouper
#       e.g. p6spy (log sql): [use the URL that your DB requires]
#       e.g. oracle:          jdbc:oracle:thin:@server.school.edu:1521:sid
#       e.g. hsqldb (a):      jdbc:hsqldb:dist/run/grouper;create=true
#       e.g. hsqldb (b):      jdbc:hsqldb:hsql://localhost:9001
#       e.g. postgres:        jdbc:postgresql:grouper
#subjectApi.source.jdbc.param.dbUrl.value = jdbc:hsqldb:C:/projects/GrouperI2MI_1-2/grouper/dist/run/grouper

# username when connecting to the database
#subjectApi.source.jdbc.param.dbUser.value = sa

# password when connecting to the database (or file with encrypted password inside)
#subjectApi.source.jdbc.param.dbPwd.value = 

# ldap attribute which is the subject id.  e.g. exampleEduRegID   Each subject has one and only one subject id.  Generally it is opaque and permanent.
#subjectApi.source.jdbc.param.SubjectID_AttributeType.value = id

# attribute which is the subject name
#subjectApi.source.jdbc.param.Name_AttributeType.value = name

# attribute which is the subject description
#subjectApi.source.jdbc.param.Description_AttributeType.value = description

# This virtual attribute index 0 is accessible via: subject.getAttributeValue("searchAttribute0");
#subjectApi.source.jdbc.param.subjectVirtualAttribute_0_searchAttribute0.value = ${subject.name},${subjectUtils.defaultIfBlank(subject.getAttributeValue('LFNAME'), "")},${subjectUtils.defaultIfBlank(subject.getAttributeValue('LOGINID'), "")},${subjectUtils.defaultIfBlank(subject.description, "")},${subjectUtils.defaultIfBlank(subject.getAttributeValue('EMAIL'), "")}

# the 1st sort attribute for lists on screen that are derived from member table (e.g. search for member in group)
# you can have up to 5 sort attributes 
#subjectApi.source.jdbc.param.sortAttribute0.value = LFNAME

# the 2nd sort attribute for lists on screen that are derived from member table (e.g. search for member in group)
# you can have up to 5 sort attributes 
#subjectApi.source.jdbc.param.sortAttribute1.value = LOGINID

# the 1st search attribute for lists on screen that are derived from member table (e.g. search for member in group)
# you can have up to 5 search attributes 
#subjectApi.source.jdbc.param.searchAttribute0.value = searchAttribute0

#subjectApi.source.jdbc.param.useInClauseForIdAndIdentifier.value = true

#subjectApi.source.jdbc.param.identifierAttributes.value = LOGINID

# subject identifier to store in grouper's member table.  this is used to increase speed of loader and perhaps for provisioning
# you can have up to max 1 subject identifier
#subjectApi.source.jdbc.param.subjectIdentifierAttribute0.value = LOGINID

#searchSubject: find a subject by ID.  ID is generally an opaque and permanent identifier, e.g. 12345678.
#  Each subject has one and only on ID.  Returns one result when searching for one ID.
# sql is the sql to search for the subject by id should use an {inclause}
#subjectApi.source.jdbc.search.searchSubject.param.sql.value = select    s.subjectid as id, s.name as name,    (select sa2.value from subjectattribute sa2 where name='name' and sa2.SUBJECTID = s.subjectid) as lfname,    (select sa3.value from subjectattribute sa3 where name='loginid' and sa3.SUBJECTID = s.subjectid) as loginid,    (select sa4.value from subjectattribute sa4 where name='description' and sa4.SUBJECTID = s.subjectid) as description,    (select sa5.value from subjectattribute sa5 where name='email' and sa5.SUBJECTID = s.subjectid) as email from    subject s where    {inclause}

# inclause allows searching by subject for multiple ids or identifiers in one query, must have {inclause} in the sql query,
#    this will be subsituted to in clause with the following.  Should use a question mark ? for bind variable
#subjectApi.source.jdbc.search.searchSubject.param.inclause.value = s.subjectid = ?

#searchSubjectByIdentifier: find a subject by identifier.  Identifier is anything that uniquely
#  identifies the user, e.g. jsmith or jsmith@institution.edu.
#  Subjects can have multiple identifiers.  Note: it is nice to have if identifiers are unique
#  even across sources.  Returns one result when searching for one identifier.
# sql is the sql to search for the subject by identifier should use an {inclause}
#subjectApi.source.jdbc.search.searchSubjectByIdentifier.param.sql.value = select    s.subjectid as id, s.name as name,    (select sa2.value from subjectattribute sa2 where name='name' and sa2.SUBJECTID = s.subjectid) as lfname,    (select sa3.value from subjectattribute sa3 where name='loginid' and sa3.SUBJECTID = s.subjectid) as loginid,    (select sa4.value from subjectattribute sa4 where name='description' and sa4.SUBJECTID = s.subjectid) as description,    (select sa5.value from subjectattribute sa5 where name='email' and sa5.SUBJECTID = s.subjectid) as email from    subject s, subjectattribute a where    a.name='loginid' and s.subjectid = a.subjectid and {inclause}

# inclause allows searching by subject for multiple ids or identifiers in one query, must have {inclause} in the sql query,
#    this will be subsituted to in clause with the following.  Should use a question mark ? for bind variable
#subjectApi.source.jdbc.search.searchSubjectByIdentifier.param.inclause.value = a.value = ?

#   search: find subjects by free form search.  Returns multiple results.
# sql is the sql to search for the subject free-form search.  user question marks for bind variables
#subjectApi.source.jdbc.search.search.param.sql.value = select    s.subjectid as id, s.name as name,    (select sa2.value from subjectattribute sa2 where name='name' and sa2.SUBJECTID = s.subjectid) as lfname,    (select sa3.value from subjectattribute sa3 where name='loginid' and sa3.SUBJECTID = s.subjectid) as loginid,    (select sa4.value from subjectattribute sa4 where name='description' and sa4.SUBJECTID = s.subjectid) as description,    (select sa5.value from subjectattribute sa5 where name='email' and sa5.SUBJECTID = s.subjectid) as email from     subject s where    s.subjectid in (       select subjectid from subject where lower(name) like concat('%',concat(?,'%')) union       select subjectid from subjectattribute where searchvalue like concat('%',concat(?,'%'))    )

# internal attributes are used by grouper only not exposed to code that uses subjects.  comma separated
#subjectApi.source.jdbc.internalAttributes = searchAttribute0


#########################################
## Configuration for source id: sourceId
## Source configName: sourceId
#########################################

# source id
# {valueType: "string", required: true, regex: "^subjectApi\\.source\\.([^.]+)\\.id$"}
#subjectApi.source.sourceId.id = sourceId

# this is a friendly name for the source
# {valueType: "string", required: true, regex: "^subjectApi\\.source\\.([^.]+)\\.name$"}
#subjectApi.source.sourceId.name = Source name

# type is not used all that much.  Can have multiple types, comma separate.  Can be person, group, application
# {valueType: "string", required: true, multiple: true, regex: "^subjectApi\\.source\\.([^.]+)\\.types$"}
#subjectApi.source.sourceId.types = person

# the adapter class implements the interface: edu.internet2.middleware.subject.Source
# adapter class must extend: edu.internet2.middleware.subject.provider.BaseSourceAdapter
# edu.internet2.middleware.grouper.subj.GrouperJdbcSourceAdapter2  :  if doing JDBC this should be used if possible.  All subject data in one table/view.
# edu.internet2.middleware.grouper.subj.GrouperJdbcSourceAdapter   :  oldest JDBC source.  Put freeform queries in here
# edu.internet2.middleware.grouper.subj.GrouperJndiSourceAdapter   :  used for LDAP
# edu.internet2.middleware.subject.provider.NullSourceAdapter      :  returns not found.  You can use if you phase out a subject source
# {valueType: "class", mustExtendClass: "edu.internet2.middleware.subject.provider.BaseSourceAdapter", regex: "^subjectApi\\.source\\.([^.]+)\\.adapterClass$"}
#subjectApi.source.sourceId.adapterClass = edu.internet2.middleware.grouper.subj.GrouperJdbcSourceAdapter2

# if this is jdbc, this is the provider
# {valueType: "class", mustExtendClass: "edu.internet2.middleware.grouperClient.jdbc.GcJdbcConnectionProvider", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.jdbcConnectionProvider\\.value$"}
#subjectApi.source.sourceId.param.jdbcConnectionProvider.value = edu.internet2.middleware.grouper.subj.GrouperJdbcConnectionProvider

# maximum number of results from a search, generally no need to get more than 1000
# {valueType: "integer", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.maxResults\\.value$"}
#subjectApi.source.sourceId.param.maxResults.value = 1000

# the table or view to query results from.  Note, could prefix with a schema name
# {valueType: "string", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.dbTableOrView\\.value$"}
#subjectApi.source.sourceId.param.dbTableOrView.value = person_source_v

# the column name to get the subjectId from
# {valueType: "string", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.subjectIdCol\\.value$"}
#subjectApi.source.sourceId.param.subjectIdCol.value = some_id

# the column name to get the name from
# {valueType: "string", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.nameCol\\.value$"}
#subjectApi.source.sourceId.param.nameCol.value = name

# column name to get description from
# {valueType: "string", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.descriptionCol\\.value$"}
#subjectApi.source.sourceId.param.descriptionCol.value = description

# search col where general searches take place, lower case
# {valueType: "string", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.lowerSearchCol\\.value$"}
#subjectApi.source.sourceId.param.lowerSearchCol.value = description_lower

# optional col if you want the search results sorted in the API (note, UI might override)
# {valueType: "string", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.defaultSortCol\\.value$"}
#subjectApi.source.sourceId.param.defaultSortCol.value = description

# you can count up from 0 to N of columns to search by identifier (which might also include by id)
# {valueType: "string", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.subjectIdentifierCol([0-9]+)\\.value$"}
#subjectApi.source.sourceId.param.subjectIdentifierCol0.value = pennname

# you can count up from 0 to N of columns to search by identifier (which might also include by id)
# {valueType: "string", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.subjectIdentifierCol([0-9]+)\\.value$"}
#subjectApi.source.sourceId.param.subjectIdentifierCol1.value = penn_id

# now you can count up from 0 to N of attributes for various cols.  The name is how to reference in subject.getAttribute()
# {valueType: "string", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.subjectAttributeCol([0-9]+)\\.value$"}
#subjectApi.source.sourceId.param.subjectAttributeCol0.value = pennname

# you can count up from 0 to N of attributes for various cols.  The name is how to reference in subject.getAttribute()
# {valueType: "string", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.subjectAttributeName([0-9]+)\\.value$"}
#subjectApi.source.sourceId.param.subjectAttributeName0.value = PENNNAME

# now you can count up from 0 to N of attributes for various cols.  The name is how to reference in subject.getAttribute()
# {valueType: "string", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.subjectAttributeCol([0-9]+)\\.value$"}
#subjectApi.source.sourceId.param.subjectAttributeCol1.value = description_lower

# you can count up from 0 to N of attributes for various cols.  The name is how to reference in subject.getAttribute()
# {valueType: "string", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.subjectAttributeName([0-9]+)\\.value$"}
#subjectApi.source.sourceId.param.subjectAttributeName1.value = searchAttribute0

# This virtual attribute index 0 is accessible via: subject.getAttributeValue("something");
# {valueType: "string", required: true, regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.subjectVirtualAttribute_([0-9]+)_([^.]+)\\.value$"}
#subjectApi.source.sourceId.param.subjectVirtualAttribute_0_something.value = ${subject.name},${subjectUtils.defaultIfBlank(subject.getAttributeValue('PENNNAME'), "")}

# the 1st sort attribute for lists on screen that are derived from member table (e.g. search for member in group)
# you can have up to 5 sort attributes 
# {valueType: "string", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.sortAttribute([0-9]+)\\.value$"}
#subjectApi.source.sourceId.param.sortAttribute0.value = description

# the 1st search attribute for lists on screen that are derived from member table (e.g. search for member in group)
# you can have up to 5 search attributes 
# {valueType: "string", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.searchAttribute([0-9]+)\\.value$"}
#subjectApi.source.sourceId.param.searchAttribute0.value = searchAttribute0

# STATUS SECTION for searches to filter out inactives and allow
# the user to filter by status with e.g. status=all
# this is optional, and advanced
#
# field in database or ldap or endpoint that is the status field
# {valueType: "string", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.statusDatastoreFieldName\\.value$"}
#subjectApi.source.sourceId.param.statusDatastoreFieldName.value = status

# search string from user which represents the status.  e.g. status=active
# {valueType: "string", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.statusLabel\\.value$"}
#subjectApi.source.sourceId.param.statusLabel.value = status

# available statuses from screen (if not specified, any will be allowed). comma separated list.
# Note, this is optional and you probably dont want to configure it, it is mostly necessary
# when you have multiple sources with statuses...  if someone types an invalid status
# and you have this configured, it will not filter by it
# {valueType: "string", multiple: true, regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.statusesFromUser\\.value$"}
#subjectApi.source.sourceId.param.statusesFromUser.value = Active, Inactive, Pending, All

# if no status is specified, this will be used (e.g. for active only).  Note, the value should be of the
# form the user would type in
# {valueType: "string", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.statusSearchDefault\\.value$"}
#subjectApi.source.sourceId.param.statusSearchDefault.value = status=active

# translate between screen values of status, and the data store value.  Increment the 0 to 1, 2, etc for more translations.
# so the user could enter: status=active, and that could translate to status_col=A.  The 'user' is what the user types in,
# the 'datastore' is what is in the datastore.  The user part is not case-sensitive.  Note, this could be a many to one
# {valueType: "string", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.statusTranslateUser([0-9]+)\\.value$"}
#subjectApi.source.sourceId.param.statusTranslateUser0.value = active

# datastore value status
# {valueType: "string", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.statusTranslateDatastore([0-9]+)\\.value$"}
#subjectApi.source.sourceId.param.statusTranslateDatastore0.value = A

# internal attributes are used by grouper only not exposed to code that uses subjects.  comma separated
# {valueType: "string", multiple: true, regex: "^subjectApi\\.source\\.([^.]+)\\.internalAttributes$"}
#subjectApi.source.sourceId.internalAttributes = searchAttribute0

# attribure that is the email address for the user
# {valueType: "string", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.emailAttributeName\\.value$"}
#subjectApi.source.sourceId.param.emailAttributeName.value = email

# maximum number of results from a search, generally no need to get more than 1000
# {valueType: "integer", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.emailAttributeName\\.value$"}
#subjectApi.source.sourceId.param.maxResults.value = 1000

# max page size
# {valueType: "integer", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.maxPageSize\\.value$"}
#subjectApi.source.sourceId.param.maxPageSize.value = 100

# max active connections
# {valueType: "integer", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.maxActive\\.value$"}
#subjectApi.source.sourceId.param.maxActive.value = 16

# max idle connections
# {valueType: "integer", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.maxIdle\\.value$"}
#subjectApi.source.sourceId.param.maxIdle.value = 16

# max wait for connection
# {valueType: "integer", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.maxWait\\.value$"}
#subjectApi.source.sourceId.param.maxWait.value = -1

#       e.g. mysql:           com.mysql.jdbc.Driver
#       e.g. p6spy (log sql): com.p6spy.engine.spy.P6SpyDriver
#         for p6spy, put the underlying driver in spy.properties
#       e.g. oracle:          oracle.jdbc.driver.OracleDriver
#       e.g. hsqldb:          org.hsqldb.jdbcDriver
#       e.g. postgres:        org.postgresql.Driver
# {valueType: "class", mustImplementInterface: "java.sql.Driver", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.dbDriver\\.value$"}
#subjectApi.source.sourceId.param.dbDriver.value = org.hsqldb.jdbcDriver

#       e.g. mysql:           jdbc:mysql://localhost:3306/grouper
#       e.g. p6spy (log sql): [use the URL that your DB requires]
#       e.g. oracle:          jdbc:oracle:thin:@server.school.edu:1521:sid
#       e.g. hsqldb (a):      jdbc:hsqldb:dist/run/grouper;create=true
#       e.g. hsqldb (b):      jdbc:hsqldb:hsql://localhost:9001
#       e.g. postgres:        jdbc:postgresql:grouper
# {valueType: "string", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.dbUrl\\.value$"}
#subjectApi.source.sourceId.param.dbUrl.value = jdbc:hsqldb:C:/projects/GrouperI2MI_1-2/grouper/dist/run/grouper

# username when connecting to the database
# {valueType: "string", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.dbUser\\.value$"}
#subjectApi.source.sourceId.param.dbUser.value = sa

# password when connecting to the database (or file with encrypted password inside)
# {valueType: "string", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.dbPwd\\.value$"}
#subjectApi.source.sourceId.param.dbPwd.value = 

# ldap attribute which is the subject id.  e.g. exampleEduRegID   Each subject has one and only one subject id.  Generally it is opaque and permanent.
# {valueType: "string", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.SubjectID_AttributeType\\.value$"}
#subjectApi.source.sourceId.param.SubjectID_AttributeType.value = id

# attribute which is the subject name
# {valueType: "string", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.Name_AttributeType\\.value$"}
#subjectApi.source.sourceId.param.Name_AttributeType.value = name

# attribute which is the subject description
# {valueType: "string", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.Description_AttributeType\\.value$"}
#subjectApi.source.sourceId.param.Description_AttributeType.value = description

# if inclause should be userd for bulk retrieves
# {valueType: "string", regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.useInClauseForIdAndIdentifier\\.value$"}
#subjectApi.source.sourceId.param.useInClauseForIdAndIdentifier.value = true

# attributes used in search by identifier
# {valueType: "string", multiple: true, regex: "^subjectApi\\.source\\.([^.]+)\\.param\\.identifierAttributes\\.value$"}
#subjectApi.source.sourceId.param.identifierAttributes.value = LOGINID


#########################################
## Configuration for source id: example
## Source configName: example
#########################################
#subjectApi.source.example.id = example

# this is a friendly name for the source
#subjectApi.source.example.name = Example Edu

# type is not used all that much.  Can have multiple types, comma separate.  Can be person, group, application
#subjectApi.source.example.types = person

# the adapter class implements the interface: edu.internet2.middleware.subject.Source
# adapter class must extend: edu.internet2.middleware.subject.provider.BaseSourceAdapter
# edu.internet2.middleware.grouper.subj.GrouperJdbcSourceAdapter2  :  if doing JDBC this should be used if possible.  All subject data in one table/view.
# edu.internet2.middleware.grouper.subj.GrouperJdbcSourceAdapter   :  oldest JDBC source.  Put freeform queries in here
# edu.internet2.middleware.grouper.subj.GrouperJndiSourceAdapter   :  used for LDAP
# edu.internet2.middleware.subject.provider.NullSourceAdapter      :  returns not found.  You can use if you phase out a subject source
#subjectApi.source.example.adapterClass = edu.internet2.middleware.grouper.subj.GrouperJndiSourceAdapter

# configuration in grouper-loader.properties with the ldap connection information (e.g. url, user, password, pooling, etc)
#subjectApi.source.example.param.ldapServerId.value = personLdap

# ldap attribute which is the subject id.  e.g. exampleEduRegID   Each subject has one and only one subject id.  Generally it is opaque and permanent.
#subjectApi.source.example.param.SubjectID_AttributeType.value = exampleEduRegID

# if the subject id should be changed to lower case after reading from datastore.  true or false
#subjectApi.source.example.param.SubjectID_formatToLowerCase.value = false

# attribute which is the subject name
#subjectApi.source.example.param.Name_AttributeType.value = cn

# attribute which is the subject description
#subjectApi.source.example.param.Description_AttributeType.value = description

# This virtual attribute index 0 is accessible via: subject.getAttributeValue("searchAttribute0");
#subjectApi.source.example.param.subjectVirtualAttribute_0_searchAttribute0.value = ${subjectUtils.defaultIfBlank(subject.getAttributeValueOrCommaSeparated('uid'), "")},${subjectUtils.defaultIfBlank(subject.getAttributeValueOrCommaSeparated('cn'), "")},${subjectUtils.defaultIfBlank(subject.getAttributeValueOrCommaSeparated('exampleEduRegId'), "")}

# the 1st sort attribute for lists on screen that are derived from member table (e.g. search for member in group)
# you can have up to 5 sort attributes 
#subjectApi.source.example.param.sortAttribute0.value = cn

# the 1st search attribute for lists on screen that are derived from member table (e.g. search for member in group)
# you can have up to 5 search attributes 
#subjectApi.source.example.param.searchAttribute0.value = searchAttribute0

# STATUS SECTION for searches to filter out inactives and allow
# the user to filter by status with e.g. status=all
# this is optional, and advanced
#
# field in database or ldap or endpoint that is the status field
#subjectApi.source.example.param.statusDatastoreFieldName.value = status

# search string from user which represents the status.  e.g. status=active
#subjectApi.source.example.param.statusLabel.value = status

# available statuses from screen (if not specified, any will be allowed). comma separated list.
# Note, this is optional and you probably dont want to configure it, it is mostly necessary
# when you have multiple sources with statuses...  if someone types an invalid status
# and you have this configured, it will not filter by it
#subjectApi.source.example.param.statusesFromUser.value = Active, Inactive, Pending, All

# all label from the user
#subjectApi.source.example.param.statusAllFromUser.value = All

# if no status is specified, this will be used (e.g. for active only).  Note, the value should be of the
# form the user would type in
#subjectApi.source.example.param.statusSearchDefault.value = status=active

# translate between screen values of status, and the data store value.  Increment the 0 to 1, 2, etc for more translations.
# so the user could enter: status=active, and that could translate to status_col=A.  The 'user' is what the user types in,
# the 'datastore' is what is in the datastore.  The user part is not case-sensitive.  Note, this could be a many to one
#subjectApi.source.example.param.statusTranslateUser0.value = active
#subjectApi.source.example.param.statusTranslateDatastore0.value = A

# subject identifier to store in grouper's member table.  this is used to increase speed of loader and perhaps for provisioning
# you can have up to max 1 subject identifier
#subjectApi.source.example.param.subjectIdentifierAttribute0.value = uid

#searchSubject: find a subject by ID.  ID is generally an opaque and permanent identifier, e.g. 12345678.
#  Each subject has one and only on ID.  Returns one result when searching for one ID.
# sql is the sql to search for the subject by id.  %TERM% will be subsituted by the id searched for
#subjectApi.source.example.search.searchSubject.param.filter.value = (& (exampleEduRegId=%TERM%) (objectclass=exampleEduPerson))

# Scope Values can be: OBJECT_SCOPE, ONELEVEL_SCOPE, SUBTREE_SCOPE
#subjectApi.source.example.search.searchSubject.param.scope.value = SUBTREE_SCOPE

# base dn to search in - this is relative to the base dn specified in the LDAP url in your grouper-loader.properties configuration
# e.g. if your url is ldaps://ldapserver.school.edu:636/dc=school,dc=edu, then you might specify ou=people here
#      if your url is ldaps://ldapserver.school.edu:636, then you might specify ou=people,dc=school,dc=edu here
#subjectApi.source.example.search.searchSubject.param.base.value = ou=people

#searchSubjectByIdentifier: find a subject by identifier.  Identifier is anything that uniquely
#  identifies the user, e.g. jsmith or jsmith@institution.edu.
#  Subjects can have multiple identifiers.  Note: it is nice to have if identifiers are unique
#  even across sources.  Returns one result when searching for one identifier.
# sql is the sql to search for the subject by identifier.  %TERM% will be subsituted by the identifier searched for
#subjectApi.source.example.search.searchSubjectByIdentifier.param.filter.value = (& (uid=%TERM%) (objectclass=exampleEduPerson))

# Scope Values can be: OBJECT_SCOPE, ONELEVEL_SCOPE, SUBTREE_SCOPE
#subjectApi.source.example.search.searchSubjectByIdentifier.param.scope.value = SUBTREE_SCOPE

# base dn to search in - this is relative to the base dn specified in the LDAP url in your grouper-loader.properties configuration
# e.g. if your url is ldaps://ldapserver.school.edu:636/dc=school,dc=edu, then you might specify ou=people here
#      if your url is ldaps://ldapserver.school.edu:636, then you might specify ou=people,dc=school,dc=edu here
#subjectApi.source.example.search.searchSubjectByIdentifier.param.base.value = ou=people

#   search: find subjects by free form search.  Returns multiple results.
# sql is the sql to search for the subject by free form search.  %TERM% will be subsituted by the text searched for
#subjectApi.source.example.search.search.param.filter.value = (& (|(|(uid=%TERM%)(cn=*%TERM%*))(exampleEduRegId=%TERM%))(objectclass=exampleEduPerson))

# Scope Values can be: OBJECT_SCOPE, ONELEVEL_SCOPE, SUBTREE_SCOPE
#subjectApi.source.example.search.search.param.scope.value = SUBTREE_SCOPE

# base dn to search in - this is relative to the base dn specified in the LDAP url in your grouper-loader.properties configuration
# e.g. if your url is ldaps://ldapserver.school.edu:636/dc=school,dc=edu, then you might specify ou=people here
#      if your url is ldaps://ldapserver.school.edu:636, then you might specify ou=people,dc=school,dc=edu here
#subjectApi.source.example.search.search.param.base.value = ou=people

# attributes from ldap object to become subject attributes.  comma separated
#subjectApi.source.example.attributes = cn, sn, uid, department, exampleEduRegId

# internal attributes are used by grouper only not exposed to code that uses subjects.  comma separated
#subjectApi.source.example.internalAttributes = searchAttribute0

