/*
  Copyright 2004-2005 University Corporation for Advanced Internet Development, Inc.
  Copyright 2004-2005 The University Of Chicago

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

/*
 * This class was generated by [Kodekopelli](http://www.kodekopelli.org/)
 */

package test.edu.internet2.middleware.grouper;

import  edu.internet2.middleware.grouper.*;
import  edu.internet2.middleware.subject.*;
import  edu.internet2.middleware.subject.provider.*;
import  java.io.*;
import  java.util.*;
import  junit.framework.*;

public class TestMonolithic extends TestCase {

  public TestMonolithic(String name) {
    super(name);
  }

  protected void setUp () {
    DB db = new DB();
    db.emptyTables();
    db.stop();
  }

  protected void tearDown () {
    // Nothing -- Yet
  }

  /*
   * TESTS
   */

  public void testMonolithic() { 

    Set   children  = new HashSet();
    List  found     = new ArrayList();
 
    // create root stem: a
    Stem a = new Stem();
    a.setExtension("a");
    Assert.assertNotNull("0.0", a);
    Assert.assertTrue("0.1", a.getExtension().equals("a"));
    Assert.assertNull("0.2", a.getParentStem());
    Assert.assertNull("0.3", a.getChildStems());
    Assert.assertNull("0.4", a.getChildGroups());
    Assert.assertNull("0.5", a.getCreateTime());
    Assert.assertNull("0.6", a.getCreator());
    Assert.assertNull("0.7", a.getDescription());
    Assert.assertNull("0.8", a.getDisplayExtension());
    Assert.assertNull("0.9", a.getDisplayName());
    Assert.assertNull("0.10", a.getModifier());
    Assert.assertNull("0.11", a.getModifyTime());
    Assert.assertNull("0.12", a.getName());
    Assert.assertNull("0.13", a.getUuid());

    // create stem: a:b
    Stem ab = new Stem();
    ab.setExtension("b");
    Assert.assertNotNull("1.0", ab);
    Assert.assertTrue("1.1", ab.getExtension().equals("b"));
    Assert.assertNull("1.2", ab.getParentStem());
    Assert.assertNull("1.3", ab.getChildStems());
    Assert.assertNull("1.4", ab.getChildGroups());
    Assert.assertNull("1.5", ab.getCreateTime());
    Assert.assertNull("1.6", ab.getCreator());
    Assert.assertNull("1.7", ab.getDescription());
    Assert.assertNull("1.8", ab.getDisplayExtension());
    Assert.assertNull("1.9", ab.getDisplayName());
    Assert.assertNull("1.10", ab.getModifier());
    Assert.assertNull("1.11", ab.getModifyTime());
    Assert.assertNull("1.12", ab.getName());
    Assert.assertNull("1.13", ab.getUuid());

    // add child stem: a, a:b
    ab.setParentStem(a);
    Assert.assertTrue("2.0", ab.getParentStem().equals(a));
    Assert.assertNull("2.1", a.getChildStems());
    children = new HashSet();
    children.add( ab );
    a.setChildStems( children );
    Assert.assertTrue("2.2", a.getChildStems().size() == 1);
    Assert.assertTrue("2.3", a.getChildStems().contains(a));

    // create stem: a:b:c
    Stem abc = new Stem();
    abc.setExtension("c");
    Assert.assertNotNull("3.0", abc);
    Assert.assertTrue("3.1", abc.getExtension().equals("c"));
    Assert.assertNull("3.2", abc.getParentStem());
    Assert.assertNull("3.3", abc.getChildStems());
    Assert.assertNull("3.4", abc.getChildGroups());
    Assert.assertNull("3.5", abc.getCreateTime());
    Assert.assertNull("3.6", abc.getCreator());
    Assert.assertNull("3.7", abc.getDescription());
    Assert.assertNull("3.8", abc.getDisplayExtension());
    Assert.assertNull("3.9", abc.getDisplayName());
    Assert.assertNull("3.10", abc.getModifier());
    Assert.assertNull("3.11", abc.getModifyTime());
    Assert.assertNull("3.12", abc.getName());
    Assert.assertNull("3.13", abc.getUuid());

    // add child stem: a:b, a:b:c
    abc.setParentStem(ab);
    Assert.assertTrue("4.0", abc.getParentStem().equals(ab));
    Assert.assertTrue("4.0.0", abc.getParentStem().getParentStem().equals(a));
    Assert.assertNull("4.1", ab.getChildStems());
    children = new HashSet();
    children.add( abc );
    ab.setChildStems( children );
    Assert.assertTrue("4.2", ab.getChildStems().size() == 1);
    Assert.assertTrue("4.3", ab.getChildStems().contains(abc));

  }

}

