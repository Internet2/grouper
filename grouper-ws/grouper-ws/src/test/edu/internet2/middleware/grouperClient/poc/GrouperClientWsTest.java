/*******************************************************************************
 * Copyright 2012 Internet2
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
/*
 * @author mchyzer
 * $Id$
 */
package edu.internet2.middleware.grouperClient.poc;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PrintStream;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.exception.ExceptionUtils;

import edu.internet2.middleware.grouper.FieldFinder;
import edu.internet2.middleware.grouper.FieldType;
import edu.internet2.middleware.grouper.Group;
import edu.internet2.middleware.grouper.GroupFinder;
import edu.internet2.middleware.grouper.GroupSave;
import edu.internet2.middleware.grouper.GroupType;
import edu.internet2.middleware.grouper.GroupTypeFinder;
import edu.internet2.middleware.grouper.GrouperSession;
import edu.internet2.middleware.grouper.Member;
import edu.internet2.middleware.grouper.MemberFinder;
import edu.internet2.middleware.grouper.Membership;
import edu.internet2.middleware.grouper.MembershipFinder;
import edu.internet2.middleware.grouper.Stem;
import edu.internet2.middleware.grouper.StemFinder;
import edu.internet2.middleware.grouper.StemSave;
import edu.internet2.middleware.grouper.SubjectFinder;
import edu.internet2.middleware.grouper.attr.AttributeDef;
import edu.internet2.middleware.grouper.attr.AttributeDefName;
import edu.internet2.middleware.grouper.attr.AttributeDefNameSave;
import edu.internet2.middleware.grouper.attr.AttributeDefNameTest;
import edu.internet2.middleware.grouper.attr.AttributeDefSave;
import edu.internet2.middleware.grouper.attr.AttributeDefTest;
import edu.internet2.middleware.grouper.attr.AttributeDefType;
import edu.internet2.middleware.grouper.attr.AttributeDefValueType;
import edu.internet2.middleware.grouper.attr.assign.AttributeAssign;
import edu.internet2.middleware.grouper.attr.assign.AttributeAssignResult;
import edu.internet2.middleware.grouper.attr.finder.AttributeDefFinder;
import edu.internet2.middleware.grouper.attr.finder.AttributeDefNameFinder;
import edu.internet2.middleware.grouper.authentication.GrouperPassword;
import edu.internet2.middleware.grouper.authentication.GrouperPasswordSave;
import edu.internet2.middleware.grouper.cache.GrouperCacheUtils;
import edu.internet2.middleware.grouper.cfg.GrouperConfig;
import edu.internet2.middleware.grouper.changeLog.ChangeLogTempToEntity;
import edu.internet2.middleware.grouper.externalSubjects.ExternalSubject;
import edu.internet2.middleware.grouper.externalSubjects.ExternalSubjectSave;
import edu.internet2.middleware.grouper.group.TypeOfGroup;
import edu.internet2.middleware.grouper.helper.GroupHelper;
import edu.internet2.middleware.grouper.helper.GrouperTest;
import edu.internet2.middleware.grouper.helper.SessionHelper;
import edu.internet2.middleware.grouper.helper.SubjectTestHelper;
import edu.internet2.middleware.grouper.internal.dao.QueryOptions;
import edu.internet2.middleware.grouper.j2ee.Authentication;
import edu.internet2.middleware.grouper.messaging.GrouperBuiltinMessagingSystem;
import edu.internet2.middleware.grouper.misc.CompositeType;
import edu.internet2.middleware.grouper.misc.SaveMode;
import edu.internet2.middleware.grouper.permissions.role.Role;
import edu.internet2.middleware.grouper.privs.AccessPrivilege;
import edu.internet2.middleware.grouper.privs.AttributeDefPrivilege;
import edu.internet2.middleware.grouper.privs.NamingPrivilege;
import edu.internet2.middleware.grouper.util.GrouperUtil;
import edu.internet2.middleware.grouper.ws.GrouperWsConfig;
import edu.internet2.middleware.grouper.ws.util.RestClientSettings;
import edu.internet2.middleware.grouperClient.GrouperClient;
import edu.internet2.middleware.grouperClient.api.GcGetGroups;
import edu.internet2.middleware.grouperClient.api.GcGroupSave;
import edu.internet2.middleware.grouperClient.messaging.GrouperMessage;
import edu.internet2.middleware.grouperClient.messaging.GrouperMessageQueueType;
import edu.internet2.middleware.grouperClient.messaging.GrouperMessageReceiveParam;
import edu.internet2.middleware.grouperClient.messaging.GrouperMessageReceiveResult;
import edu.internet2.middleware.grouperClient.messaging.GrouperMessageSendParam;
import edu.internet2.middleware.grouperClient.messaging.GrouperMessagingEngine;
import edu.internet2.middleware.grouperClient.util.GrouperClientConfig;
import edu.internet2.middleware.grouperClient.util.GrouperClientUtils;
import edu.internet2.middleware.grouperClient.ws.GcWebServiceError;
import edu.internet2.middleware.grouperClient.ws.GrouperClientWs;
import edu.internet2.middleware.grouperClient.ws.beans.WsGetGroupsResults;
import edu.internet2.middleware.grouperClient.ws.beans.WsGroup;
import edu.internet2.middleware.grouperClient.ws.beans.WsGroupLookup;
import edu.internet2.middleware.grouperClient.ws.beans.WsGroupSaveResults;
import edu.internet2.middleware.grouperClient.ws.beans.WsGroupToSave;
import edu.internet2.middleware.grouperClient.ws.beans.WsMemberChangeSubjectResults;
import edu.internet2.middleware.subject.Subject;
import junit.textui.TestRunner;

/**
 *
 */
public class GrouperClientWsTest extends GrouperTest {

  /**
   *
   * @param args
   */
  public static void main(String[] args) {
    TestRunner.run(new GrouperClientWsTest("testFindAttributeDefNamesServiceRole"));
    //TestRunner.run(new GrouperClientWsTest("testGroupSaveLookupNameSame"));
    //TestRunner.run(new GrouperClientWsTest("testGroupSaveNoLookup"));

  }

  /**
   *
   * @see edu.internet2.middleware.grouper.helper.GrouperTest#setUp()
   */
  @Override
  protected void setUp() {

    // dont do this, it deletes types
    // super.setUp();
    GrouperTest.shutdownDelayThreadInterrupt();
    GrouperCacheUtils.clearAllCaches();

    String wsUserLabel = GrouperClientConfig.retrieveConfig().propertyValueStringRequired(
        "grouperClient.webService.user.label");
    String wsUserString = GrouperClientConfig.retrieveConfig().propertyValueStringRequired(
        "grouperClient.webService." + wsUserLabel);

    RestClientSettings.resetData(wsUserString, false);

    GrouperConfig.retrieveConfig().propertiesOverrideMap().put("groups.create.grant.all.read", "true");
    GrouperConfig.retrieveConfig().propertiesOverrideMap().put("groups.create.grant.all.view", "true");

    GrouperClientConfig.retrieveConfig().propertiesOverrideMap().put("encrypt.key",
        "sdfklj24lkj34lk34");
    GrouperClientConfig.retrieveConfig().propertiesOverrideMap().put(
        "encrypt.disableExternalFileLookup", "false");

    GrouperClientConfig.retrieveConfig().propertiesOverrideMap()
        .put(
            "webService.addMember.output",
            "Index ${index}: success: ${resultMetadata.success}: code: ${resultMetadata.resultCode}: ${wsSubject.id}$newline$");
    GrouperClientConfig.retrieveConfig().propertiesOverrideMap()
        .put(
            "webService.getMembers.output",
            "GroupIndex ${groupIndex}: success: ${resultMetadata.success}: code: ${resultMetadata.resultCode}: group: ${wsGroup.name}: subjectIndex: ${subjectIndex}: ${wsSubject.id}$newline$");
    GrouperClientConfig.retrieveConfig().propertiesOverrideMap()
        .put(
            "webService.deleteMember.output",
            "Index ${index}: success: ${resultMetadata.success}: code: ${resultMetadata.resultCode}: ${wsSubject.id}$newline$");
    GrouperClientConfig.retrieveConfig().propertiesOverrideMap()
        .put(
            "webService.hasMember.output",
            "Index ${index}: success: ${resultMetadata.success}: code: ${resultMetadata.resultCode}: ${wsSubject.id}: ${hasMember}$newline$");
    GrouperClientConfig.retrieveConfig().propertiesOverrideMap()
        .put(
            "webService.getGroups.output",
            "SubjectIndex ${subjectIndex}: success: ${resultMetadata.success}: code: ${resultMetadata.resultCode}: subject: ${wsSubject.id}: groupIndex: ${groupIndex}: ${wsGroup.name}$newline$");
    GrouperClientConfig.retrieveConfig().propertiesOverrideMap()
        .put(
            "webService.groupSave.output",
            "Success: ${resultMetadata.success}: code: ${resultMetadata.resultCode}: ${wsGroup.name}$newline$");
    GrouperClientConfig.retrieveConfig().propertiesOverrideMap()
        .put(
            "webService.stemSave.output",
            "Success: ${resultMetadata.success}: code: ${resultMetadata.resultCode}: ${wsStem.name}$newline$");
    GrouperClientConfig.retrieveConfig().propertiesOverrideMap()
        .put(
            "webService.groupDelete.output",
            "Index ${index}: success: ${resultMetadata.success}: code: ${resultMetadata.resultCode}: ${wsGroup.name}$newline$");
    GrouperClientConfig.retrieveConfig().propertiesOverrideMap()
        .put(
            "webService.stemDelete.output",
            "Index ${index}: success: ${resultMetadata.success}: code: ${resultMetadata.resultCode}: ${wsStem.name}$newline$");
    GrouperClientConfig.retrieveConfig().propertiesOverrideMap()
        .put(
            "webService.getGrouperPrivilegesLite.output",
            "Index ${index}: success: ${resultMetadata.success}: code: ${resultMetadata.resultCode}: ${objectType}: ${objectName}: subject: ${wsSubject.id}: ${wsGrouperPrivilegeResult.privilegeType}: ${wsGrouperPrivilegeResult.privilegeName}$newline$");
    GrouperClientConfig.retrieveConfig().propertiesOverrideMap()
        .put(
            "webService.assignGrouperPrivilegesLite.output",
            "Success: ${resultMetadata.success}: code: ${resultMetadata.resultCode}: ${objectType}: ${objectName}: subject: ${wsSubject.id}: ${wsAssignGrouperPrivilegesLiteResult.privilegeType}: ${wsAssignGrouperPrivilegesLiteResult.privilegeName}$newline$");
    GrouperClientConfig.retrieveConfig().propertiesOverrideMap()
        .put(
            "webService.findGroups.output",
            "Index ${index}: name: ${wsGroup.name}, displayName: ${wsGroup.displayName}$newline$");
    GrouperClientConfig.retrieveConfig().propertiesOverrideMap()
        .put(
            "webService.findStems.output",
            "Index ${index}: name: ${wsStem.name}, displayName: ${wsStem.displayName}$newline$");
    GrouperClientConfig.retrieveConfig().propertiesOverrideMap()
        .put(
            "webService.memberChangeSubject.output",
            "Success: ${resultMetadata.success}: code: ${resultMetadata.resultCode}: oldSubject: ${wsSubjectOld.id}, newSubject: ${wsSubjectNew.id}$newline$");

    GrouperClientConfig.retrieveConfig().propertiesOverrideMap()
    .put(
        "webService.getSubjects.output",
        "Index: ${index}: success: ${success}, code: ${wsSubject.resultCode}, subject: ${wsSubject.id}$newline$");

    GrouperClientConfig.retrieveConfig().propertiesOverrideMap()
    .put(
        "webService.assignAttributeDefNameInheritance.output",
        "Success: ${resultMetadata.success}: code: ${resultMetadata.resultCode}, message: ${resultMetadata.resultMessage}$newline$");
    GrouperClientConfig.retrieveConfig().propertiesOverrideMap()
    .put(
        "webService.attributeDefNameSave.output",
        "Success: ${resultMetadata.success}: code: ${resultMetadata.resultCode}: ${wsAttributeDefName.name}$newline$");
    GrouperClientConfig.retrieveConfig().propertiesOverrideMap()
    .put(
        "webService.attributeDefNameDelete.output",
        "Index ${index}: success: ${resultMetadata.success}: code: ${resultMetadata.resultCode}: ${wsAttributeDefName.name}$newline$");
    GrouperClientConfig.retrieveConfig().propertiesOverrideMap()
    .put(
        "webService.findAttributeDefNames.output",
        "Index ${index}: name: ${wsAttributeDefName.name}, displayName: ${wsAttributeDefName.displayName}$newline$");

    GrouperClientConfig.retrieveConfig().propertiesOverrideMap().put(
        "grouperClient.alias.subjectIds", "pennIds");
    GrouperClientConfig.retrieveConfig().propertiesOverrideMap().put(
        "grouperClient.alias.subjectIdentifiers", "pennKeys");
    GrouperClientConfig.retrieveConfig().propertiesOverrideMap().put(
        "grouperClient.alias.SubjectId", "PennId");
    GrouperClientConfig.retrieveConfig().propertiesOverrideMap().put(
        "grouperClient.alias.SubjectIdentifier", "PennKey");
    GrouperClientConfig.retrieveConfig().propertiesOverrideMap().put(
        "grouperClient.alias.subjectId", "pennId");
    GrouperClientConfig.retrieveConfig().propertiesOverrideMap().put(
        "grouperClient.alias.subjectIdentifier", "pennKey");

    GrouperClientConfig.retrieveConfig().propertiesOverrideMap()
        .put(
            "webService.hasMember.output",
            "Index ${index}: success: ${wsHasMemberResult.resultMetadata.success}: code: ${wsHasMemberResult.resultMetadata.resultCode}: ${wsHasMemberResult.wsSubject.id}: ${hasMember}$newline$");


    GrouperSession grouperSession = GrouperSession.startRootSession();

    Group group = GroupFinder.findByName(grouperSession, "aStem:aGroup4", false);

    if (group != null) {
      group.delete();
    }

    GrouperClient.exitOnError = false;
    
    // insert GrouperSystem/admin123 for grouper ws authentication
    GrouperPasswordSave grouperPasswordSave = new GrouperPasswordSave();
    
    String userName = GrouperWsConfig.retrieveConfig().propertyValueString("ws.testing.user");
    if (StringUtils.isBlank(userName)) {
      throw new RuntimeException("Set ws.testing.user in grouper.ws.properties file");
    }
    
    String password = GrouperWsConfig.retrieveConfig().propertyValueString("ws.testing.pass");
    if (StringUtils.isBlank(password)) {
      throw new RuntimeException("Set ws.testing.pass in grouper.ws.properties file");
    }
    
    grouperPasswordSave.assignUsername(userName).assignPassword(password).assignEntityType("username");
    grouperPasswordSave.assignApplication(GrouperPassword.Application.WS);
    new Authentication().assignUserPassword(grouperPasswordSave);
    
    GrouperTest.testing = true;
  }

  /**
   *
   * @see edu.internet2.middleware.grouper.helper.GrouperTest#tearDown()
   */
  @Override
  protected void tearDown() {

    GrouperClientConfig.retrieveConfig().propertiesOverrideMap().clear();

    super.tearDown();

  }

  /**
   * @param name
   */
  public GrouperClientWsTest(String name) {
    super(name);
  }

  /**
   * @throws Exception
   */
  public void testAddMember() throws Exception {

    // make sure group exists
    // GrouperSession grouperSession = GrouperSession.startRootSession();
    // Group group = Group.saveGroup(grouperSession, "aStem:aGroup", null,
    // "aStem:aGroup", "aGroup", null, null, true);
    //
    // //give permissions
    // String wsUserLabel =
    // GrouperClientUtils.propertiesValue("grouperClient.webService.user.label",
    // true);
    // String wsUserString =
    // GrouperClientUtils.propertiesValue("grouperClient.webService." +
    // wsUserLabel, true);
    // Subject wsUser = SubjectFinder.findByIdOrIdentifier(wsUserString, true);

    GrouperSession grouperSession = GrouperSession.startRootSession();
    Group group = GroupFinder.findByName(grouperSession, "aStem:aGroup", true);

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=addMemberWs --groupName=aStem:aGroup --subjectIds=test.subject.0,test.subject.1 --xRequestId=abc --xCorrelationId=xyz --debug=true",
                  " "));
      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      Pattern pattern = Pattern
          .compile("^Index (\\d+): success: T: code: ([A-Z_]+): (.*+)$");
      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS", matcher.group(2));
      assertEquals(outputLines[0], "test.subject.0", matcher.group(3));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("test.subject.1", matcher.group(3));

      // #####################################################
      // run again, should be already added
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=addMemberWs --groupName=aStem:aGroup --pennIds=test.subject.0,test.subject.1 --xRequestId=abc --xCorrelationId=xyz --debug=true",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS_ALREADY_EXISTED", matcher.group(2));
      assertEquals("test.subject.0", matcher.group(3));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("SUCCESS_ALREADY_EXISTED", matcher.group(2));
      assertEquals("test.subject.1", matcher.group(3));

      // #####################################################
      // run again, with enabled date
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=addMemberWs --groupName=aStem:aGroup --pennIds=test.subject.0 --enabledTime=2010/02/03",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS_ALREADY_EXISTED", matcher.group(2));
      assertEquals("test.subject.0", matcher.group(3));

      Membership membership = group.getImmediateMembership(Group.getDefaultList(), SubjectTestHelper.SUBJ0, false, true);
      assertEquals(GrouperClientUtils.stringToDate("2010/02/03 00:00:00.000"), membership.getEnabledTime());
      assertEquals(null, membership.getDisabledTime());

      // #####################################################
      // run again, with disabled date
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=addMemberWs --groupName=aStem:aGroup --pennIds=test.subject.0 --disabledTime=2010/02/03",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS_ALREADY_EXISTED", matcher.group(2));
      assertEquals("test.subject.0", matcher.group(3));

      membership = group.getImmediateMembership(Group.getDefaultList(), SubjectTestHelper.SUBJ0, false, true);
      assertEquals(GrouperClientUtils.stringToDate("2010/02/03 00:00:00.000"), membership.getDisabledTime());
      assertEquals(null, membership.getEnabledTime());

      // #####################################################
      // run again, remove enabled disabled
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=addMemberWs --groupName=aStem:aGroup --pennIds=test.subject.0",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("test.subject.0", matcher.group(3));

      membership = group.getImmediateMembership(Group.getDefaultList(), SubjectTestHelper.SUBJ0, false, true);
      assertEquals(null, membership.getDisabledTime());
      assertEquals(null, membership.getEnabledTime());

      // #####################################################
      // run again, with uuid
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=addMemberWs --groupUuid=" + group.getUuid() + " --pennIds=test.subject.0,test.subject.1",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS_ALREADY_EXISTED", matcher.group(2));
      assertEquals("test.subject.0", matcher.group(3));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("SUCCESS_ALREADY_EXISTED", matcher.group(2));
      assertEquals("test.subject.1", matcher.group(3));

      // #####################################################
      // run again, with idIndex
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=addMemberWs --groupIdIndex=" + group.getIdIndex() + " --pennIds=test.subject.0,test.subject.1",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS_ALREADY_EXISTED", matcher.group(2));
      assertEquals("test.subject.0", matcher.group(3));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("SUCCESS_ALREADY_EXISTED", matcher.group(2));
      assertEquals("test.subject.1", matcher.group(3));

      // #####################################################
      // run with invalid args
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // test a command line template
      try {
        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=addMemberWs --groupName=aStem:aGroup --subjectIds=test.subject.0,test.subject.1 --ousdfsdfate=${index}",
                    " "));
      } catch (Exception e) {
        assertTrue(e.getMessage(), e.getMessage().contains("ousdfsdfate"));
      }
      System.out.flush();

      System.setOut(systemOut);

      // #####################################################
      // run with custom template
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // test a command line template
      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=addMemberWs --groupName=aStem:aGroup --subjectIdentifiers=id.test.subject.0,id.test.subject.1 --outputTemplate=${index}",
                  " "));

      System.out.flush();

      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      assertEquals("01", output);

      // #####################################################
      // run again, with field
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=addMemberWs --groupName=aStem:aGroup --pennKeys=id.test.subject.0,id.test.subject.1 --fieldName=members",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS_ALREADY_EXISTED", matcher.group(2));
      assertEquals("test.subject.0", matcher.group(3));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("SUCCESS_ALREADY_EXISTED", matcher.group(2));
      assertEquals("test.subject.1", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("fieldName")
              && GrouperClientWs.mostRecentRequest.contains("members")
              && !GrouperClientWs.mostRecentRequest.contains("txType"));

      // #####################################################
      // run again, with txType
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=addMemberWs --groupName=aStem:aGroup --subjectIds=test.subject.0,test.subject.1 --txType=NONE",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS_ALREADY_EXISTED", matcher.group(2));
      assertEquals("test.subject.0", matcher.group(3));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("SUCCESS_ALREADY_EXISTED", matcher.group(2));
      assertEquals("test.subject.1", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName")
              && !GrouperClientWs.mostRecentRequest.contains("members")
              && GrouperClientWs.mostRecentRequest.contains("txType")
              && GrouperClientWs.mostRecentRequest.contains("NONE")
              && !GrouperClientWs.mostRecentRequest
                  .contains("includeGroupDetail")
              && !GrouperClientWs.mostRecentRequest
                  .contains("includeSubjectDetail")
              && !GrouperClientWs.mostRecentRequest
                  .contains("includeGroupDetail")
              && !GrouperClientWs.mostRecentRequest
                  .contains("includeSubjectDetail"));

      // #####################################################
      // run again, with includeGroupDetail and includeSubjectDetail
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=addMemberWs --groupName=aStem:aGroup --subjectIds=test.subject.0,test.subject.1 --includeGroupDetail=true --includeSubjectDetail=true",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS_ALREADY_EXISTED", matcher.group(2));
      assertEquals("test.subject.0", matcher.group(3));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("SUCCESS_ALREADY_EXISTED", matcher.group(2));
      assertEquals("test.subject.1", matcher.group(3));

      assertTrue(!GrouperClientWs.mostRecentRequest.contains("txType")
          && !GrouperClientWs.mostRecentRequest.contains("NONE")
          && GrouperClientWs.mostRecentRequest.contains("includeGroupDetail")
          && GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));

      // #####################################################
      // run again, with subject attributes
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=addMemberWs --groupName=aStem:aGroup --subjectIds=test.subject.0,test.subject.1 --subjectAttributeNames=name --outputTemplate=${index}:$space$${wsAddMemberResult.wsSubject.getAttributeValue(0)}$newline$",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertTrue(outputLines[0], outputLines[0]
          .contains("my name is test.subject.0"));

      assertTrue(outputLines[1], outputLines[1]
          .contains("my name is test.subject.1"));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("\"name\""));
      assertTrue(GrouperClientWs.mostRecentResponse
          .contains("my name is test.subject.0"));

      // #####################################################
      // run again, with default subject source
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=addMemberWs --groupName=aStem:aGroup --subjectIds=test.subject.0,test.subject.1 --defaultSubjectSource=jdbc",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS_ALREADY_EXISTED", matcher.group(2));
      assertEquals("test.subject.0", matcher.group(3));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("SUCCESS_ALREADY_EXISTED", matcher.group(2));
      assertEquals("test.subject.1", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("jdbc"));

      // #####################################################
      // run again, subjects ids coming from file
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      String subjectIdsFileName = "subjectIdsFile_"
          + GrouperClientUtils.uniqueId() + ".txt";
      File subjectIdsFile = new File(subjectIdsFileName);

      GrouperClientUtils.saveStringIntoFile(subjectIdsFile,
          "test.subject.0\ntest.subject.1");

      try {
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=addMemberWs --groupName=aStem:aGroup --subjectIdsFile="
                + subjectIdsFileName, " "));
        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLines[0], matcher.matches());

        assertEquals("0", matcher.group(1));
        assertEquals("SUCCESS_ALREADY_EXISTED", matcher.group(2));
        assertEquals("test.subject.0", matcher.group(3));

        matcher = pattern.matcher(outputLines[1]);

        assertTrue(outputLines[1], matcher.matches());

        assertEquals("1", matcher.group(1));
        assertEquals("SUCCESS_ALREADY_EXISTED", matcher.group(2));
        assertEquals("test.subject.1", matcher.group(3));

        // #####################################################
        // run again, with params
        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=addMemberWs --groupName=aStem:aGroup --subjectIds=test.subject.0,test.subject.1 --paramName0=whatever --paramValue0=someValue",
                    " "));
        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLines[0], matcher.matches());

        assertEquals("0", matcher.group(1));
        assertEquals("SUCCESS_ALREADY_EXISTED", matcher.group(2));
        assertEquals("test.subject.0", matcher.group(3));

        matcher = pattern.matcher(outputLines[1]);

        assertTrue(outputLines[1], matcher.matches());

        assertEquals("1", matcher.group(1));
        assertEquals("SUCCESS_ALREADY_EXISTED", matcher.group(2));
        assertEquals("test.subject.1", matcher.group(3));

        assertTrue(GrouperClientWs.mostRecentRequest.contains("whatever")
            && GrouperClientWs.mostRecentRequest.contains("someValue"));

        // #####################################################
        // run again, with addExternalSubjectIfNotFound
        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        //NOTE FOR THIS TO WORK YOU NEED TO ENABLE (externalSubjects.autoCreateSource = true) AUTO CREATE EXTERNAL SUBJECTS IN GROUPER.PROPERTIES ON WS
        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=addMemberWs --groupName=aStem:aGroup --subjectIdentifiers=a@idp.example.edu --addExternalSubjectIfNotFound=true",
                    " "));
        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");
        assertEquals(1, outputLines.length);

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLines[0], matcher.matches());

        assertEquals("0", matcher.group(1));
        assertEquals(output, "SUCCESS_CREATED", matcher.group(2));
        //cant do that since not the id... its the identifier
        //assertEquals("a@b.c", matcher.group(3));

        assertTrue(GrouperClientWs.mostRecentRequest
            .contains("addExternalSubjectIfNotFound"));

        // #####################################################
        // run again, with replaceAllExisting
        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=addMemberWs --groupName=aStem:aGroup --subjectIds=test.subject.0,test.subject.1 --replaceAllExisting=true",
                    " "));
        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLines[0], matcher.matches());

        assertEquals("0", matcher.group(1));
        assertEquals("SUCCESS_ALREADY_EXISTED", matcher.group(2));
        assertEquals("test.subject.0", matcher.group(3));

        matcher = pattern.matcher(outputLines[1]);

        assertTrue(outputLines[1], matcher.matches());

        assertEquals("1", matcher.group(1));
        assertEquals("SUCCESS_ALREADY_EXISTED", matcher.group(2));
        assertEquals("test.subject.1", matcher.group(3));

        assertTrue(GrouperClientWs.mostRecentRequest
            .contains("replaceAllExisting"));

        // #######################################################
        // get members, make sure all there

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=hasMemberWs --groupName=aStem:aGroup --subjectIds=test.subject.0,test.subject.1",
                    " "));
        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        pattern = Pattern
            .compile("^Index (\\d+): success: T: code: ([A-Z_]+): (.+): (false|true)$");
        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLines[0], matcher.matches());

        assertEquals("0", matcher.group(1));
        assertEquals("IS_MEMBER", matcher.group(2));
        assertEquals("test.subject.0", matcher.group(3));
        assertEquals("true", matcher.group(4));

        matcher = pattern.matcher(outputLines[1]);

        assertTrue(outputLines[1], matcher.matches());

        assertEquals("1", matcher.group(1));
        assertEquals("IS_MEMBER", matcher.group(2));
        assertEquals("test.subject.1", matcher.group(3));
        assertEquals("true", matcher.group(4));

      } finally {
        if (subjectIdsFile.exists()) {
          subjectIdsFile.delete();
        }
      }
    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testGetGrouperPrivilegeLite() throws Exception {

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getGrouperPrivilegesLiteWs --groupName=aStem:aGroup --subjectId=test.subject.0",
                  " "));
      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      Pattern pattern = Pattern
          .compile("^Index (\\d+): success: T: code: ([A-Z_]+): (group|stem): (.+): subject: (.+): (.+): (.+)$");
      Matcher matcher = pattern.matcher(outputLines[0]);

      assertEquals(GrouperClientUtils.length(outputLines), 3);
      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("group", matcher.group(3));
      assertEquals("aStem:aGroup", matcher.group(4));
      assertEquals("test.subject.0", matcher.group(5));
      assertEquals("access", matcher.group(6));
      assertEquals("admin", matcher.group(7));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("group", matcher.group(3));
      assertEquals("aStem:aGroup", matcher.group(4));
      assertEquals("test.subject.0", matcher.group(5));
      assertEquals("access", matcher.group(6));
      assertEquals("read", matcher.group(7));

      matcher = pattern.matcher(outputLines[2]);

      assertTrue(outputLines[2], matcher.matches());

      assertEquals("2", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("group", matcher.group(3));
      assertEquals("aStem:aGroup", matcher.group(4));
      assertEquals("test.subject.0", matcher.group(5));
      assertEquals("access", matcher.group(6));
      assertEquals("view", matcher.group(7));

      // #####################################################
      // run again with subject identifier, and privilege type
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getGrouperPrivilegesLiteWs --groupName=aStem:aGroup --subjectIdentifier=id.test.subject.0 --privilegeType=access",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertEquals(GrouperClientUtils.length(outputLines), 3);
      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("group", matcher.group(3));
      assertEquals("aStem:aGroup", matcher.group(4));
      assertEquals("test.subject.0", matcher.group(5));
      assertEquals("access", matcher.group(6));
      assertEquals("admin", matcher.group(7));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("group", matcher.group(3));
      assertEquals("aStem:aGroup", matcher.group(4));
      assertEquals("test.subject.0", matcher.group(5));
      assertEquals("access", matcher.group(6));
      assertEquals("read", matcher.group(7));

      matcher = pattern.matcher(outputLines[2]);

      assertTrue(outputLines[2], matcher.matches());

      assertEquals("2", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("group", matcher.group(3));
      assertEquals("aStem:aGroup", matcher.group(4));
      assertEquals("test.subject.0", matcher.group(5));
      assertEquals("access", matcher.group(6));
      assertEquals("view", matcher.group(7));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("access")
              && GrouperClientWs.mostRecentRequest.contains("privilegeType")
              && GrouperClientWs.mostRecentRequest
                  .contains("id.test.subject.0"));

      // #####################################################
      // run with invalid args
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // test a command line template
      try {
        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=getGrouperPrivilegesLiteWs --groupName=aStem:aGroup --subjectId=test.subject.0 --ousdfsdfate=${index}",
                    " "));
      } catch (Exception e) {
        assertTrue(e.getMessage(), e.getMessage().contains("ousdfsdfate"));
      }
      System.out.flush();

      System.setOut(systemOut);

      // #####################################################
      // run with custom template
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // test a command line template
      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getGrouperPrivilegesLiteWs --groupName=aStem:aGroup --pennKey=id.test.subject.0 --outputTemplate=${index}",
                  " "));

      System.out.flush();

      output = new String(baos.toByteArray());

      assertEquals("012", output);

      System.setOut(systemOut);

      // #####################################################
      // run with privilege name
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // test a command line template
      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getGrouperPrivilegesLiteWs --groupName=aStem:aGroup --pennKey=id.test.subject.0 --privilegeName=admin",
                  " "));

      System.out.flush();

      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertEquals(output, GrouperClientUtils.length(outputLines), 1);
      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS_ALLOWED", matcher.group(2));
      assertEquals("group", matcher.group(3));
      assertEquals("aStem:aGroup", matcher.group(4));
      assertEquals("test.subject.0", matcher.group(5));
      assertEquals("access", matcher.group(6));
      assertEquals("admin", matcher.group(7));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("admin")
              && GrouperClientWs.mostRecentRequest.contains("privilegeName")
              && GrouperClientWs.mostRecentRequest
                  .contains("id.test.subject.0"));

      // #####################################################
      // run again, with stem
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getGrouperPrivilegesLiteWs --stemName=aStem --pennKey=id.test.subject.0",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertEquals(GrouperClientUtils.length(outputLines), 2);
      assertTrue(outputLines[0], matcher.matches());

      // #####################################################
      // run again, with stem with no results
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getGrouperPrivilegesLiteWs --stemName=aStem --pennKey=id.test.subject.6",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      assertTrue(outputLines[0], StringUtils.isBlank(output));

      // Index 0: success: T: code: SUCCESS: stem: aStem: subject:
      // test.subject.0: naming: create
      // Index 1: success: T: code: SUCCESS: stem: aStem: subject:
      // test.subject.0: naming: stemAdmin

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("stem", matcher.group(3));
      assertEquals("aStem", matcher.group(4));
      assertEquals("test.subject.0", matcher.group(5));
      assertEquals("naming", matcher.group(6));
      assertEquals("create", matcher.group(7));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("stem", matcher.group(3));
      assertEquals("aStem", matcher.group(4));
      assertEquals("test.subject.0", matcher.group(5));
      assertEquals("naming", matcher.group(6));
      assertEquals("stemAdmin", matcher.group(7));

      // #####################################################
      // run again, with includeGroupDetail and includeSubjectDetail
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getGrouperPrivilegesLiteWs --groupName=aStem:aGroup --subjectId=test.subject.0 --includeGroupDetail=true --includeSubjectDetail=true",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertEquals(3, GrouperClientUtils.length(outputLines));
      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("group", matcher.group(3));
      assertEquals("aStem:aGroup", matcher.group(4));
      assertEquals("test.subject.0", matcher.group(5));
      assertEquals("access", matcher.group(6));
      assertEquals("admin", matcher.group(7));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("group", matcher.group(3));
      assertEquals("aStem:aGroup", matcher.group(4));
      assertEquals("test.subject.0", matcher.group(5));
      assertEquals("access", matcher.group(6));
      assertEquals("read", matcher.group(7));

      matcher = pattern.matcher(outputLines[2]);

      assertTrue(outputLines[2], matcher.matches());

      assertEquals("2", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("group", matcher.group(3));
      assertEquals("aStem:aGroup", matcher.group(4));
      assertEquals("test.subject.0", matcher.group(5));
      assertEquals("access", matcher.group(6));
      assertEquals("view", matcher.group(7));

      assertTrue(GrouperClientWs.mostRecentRequest
          .contains("includeGroupDetail")
          && GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));

      // #####################################################
      // run again, with subject attributes
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getGrouperPrivilegesLiteWs --groupName=aStem:aGroup --subjectId=test.subject.0 --subjectAttributeNames=name --outputTemplate=${index}:$space$${wsSubject.getAttributeValue(0)}$newline$",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertTrue(outputLines[0], outputLines[0]
          .contains("my name is test.subject.0"));

      assertTrue(outputLines[1], outputLines[1]
          .contains("my name is test.subject.0"));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("\"name\""));
      assertTrue(GrouperClientWs.mostRecentResponse
          .contains("my name is test.subject.0"));

      // #####################################################
      // run again, with params
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getGrouperPrivilegesLiteWs --groupName=aStem:aGroup --subjectId=test.subject.0 --paramName0=whatever --paramValue0=someValue",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertEquals(GrouperClientUtils.length(outputLines), 3);
      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("group", matcher.group(3));
      assertEquals("aStem:aGroup", matcher.group(4));
      assertEquals("test.subject.0", matcher.group(5));
      assertEquals("access", matcher.group(6));
      assertEquals("admin", matcher.group(7));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("group", matcher.group(3));
      assertEquals("aStem:aGroup", matcher.group(4));
      assertEquals("test.subject.0", matcher.group(5));
      assertEquals("access", matcher.group(6));
      assertEquals("read", matcher.group(7));

      matcher = pattern.matcher(outputLines[2]);

      assertTrue(outputLines[2], matcher.matches());

      assertEquals("2", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("group", matcher.group(3));
      assertEquals("aStem:aGroup", matcher.group(4));
      assertEquals("test.subject.0", matcher.group(5));
      assertEquals("access", matcher.group(6));
      assertEquals("view", matcher.group(7));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("whatever")
          && GrouperClientWs.mostRecentRequest.contains("someValue"));

    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testAssignGrouperPrivilegeLite() throws Exception {

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=assignGrouperPrivilegesLiteWs --groupName=aStem:aGroup --subjectId=test.subject.0 --privilegeName=optin --allowed=true",
                  " "));
      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      Pattern pattern = Pattern
          .compile("^Success: T: code: ([A-Z_]+): (group|stem): (.+): subject: (.+): (.+): (.+)$");
      Matcher matcher = pattern.matcher(outputLines[0]);

      assertEquals(GrouperClientUtils.length(outputLines), 1);
      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS_ALLOWED", matcher.group(1));
      assertEquals("group", matcher.group(2));
      assertEquals("aStem:aGroup", matcher.group(3));
      assertEquals("test.subject.0", matcher.group(4));
      assertEquals("access", matcher.group(5));
      assertEquals("optin", matcher.group(6));

      // #####################################################
      // run again with subject identifier, and privilege type
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=assignGrouperPrivilegesLiteWs --groupName=aStem:aGroup --subjectIdentifier=id.test.subject.0 --privilegeType=access --privilegeName=optin --allowed=true",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertEquals(GrouperClientUtils.length(outputLines), 1);
      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS_ALLOWED_ALREADY_EXISTED", matcher.group(1));
      assertEquals("group", matcher.group(2));
      assertEquals("aStem:aGroup", matcher.group(3));
      assertEquals("test.subject.0", matcher.group(4));
      assertEquals("access", matcher.group(5));
      assertEquals("optin", matcher.group(6));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("access")
              && GrouperClientWs.mostRecentRequest.contains("privilegeType")
              && GrouperClientWs.mostRecentRequest
                  .contains("id.test.subject.0"));

      // #####################################################
      // run with invalid args
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // test a command line template
      try {
        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=assignGrouperPrivilegesLiteWs --groupName=aStem:aGroup --subjectId=test.subject.0 --privilegeName=optin --allowed=true --ousdfsdfate=${index}",
                    " "));
      } catch (Exception e) {
        assertTrue(e.getMessage(), e.getMessage().contains("ousdfsdfate"));
      }
      System.out.flush();

      System.setOut(systemOut);

      // #####################################################
      // run with custom template
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // test a command line template
      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=assignGrouperPrivilegesLiteWs --groupName=aStem:aGroup --pennKey=id.test.subject.0 --privilegeName=optin --allowed=true --outputTemplate=${wsSubject.identifierLookup}",
                  " "));

      System.out.flush();

      output = new String(baos.toByteArray());

      assertEquals("id.test.subject.0", output);

      System.setOut(systemOut);

      // #####################################################
      // run again, with stem
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=assignGrouperPrivilegesLiteWs --stemName=aStem --pennKey=id.test.subject.0 --privilegeName=stem --allowed=true",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertEquals(GrouperClientUtils.length(outputLines), 1);
      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS_ALLOWED_ALREADY_EXISTED", matcher.group(1));
      assertEquals("stem", matcher.group(2));
      assertEquals("aStem", matcher.group(3));
      assertEquals("test.subject.0", matcher.group(4));
      assertEquals("naming", matcher.group(5));
      assertEquals("stemAdmin", matcher.group(6));

      // #####################################################
      // run again, with includeGroupDetail and includeSubjectDetail
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=assignGrouperPrivilegesLiteWs --groupName=aStem:aGroup --subjectId=test.subject.0 --includeGroupDetail=true --includeSubjectDetail=true --privilegeName=optin --allowed=false",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertEquals(GrouperClientUtils.length(outputLines), 1);
      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS_NOT_ALLOWED", matcher.group(1));
      assertEquals("group", matcher.group(2));
      assertEquals("aStem:aGroup", matcher.group(3));
      assertEquals("test.subject.0", matcher.group(4));
      assertEquals("access", matcher.group(5));
      assertEquals("optin", matcher.group(6));

      assertTrue(GrouperClientWs.mostRecentRequest
          .contains("includeGroupDetail")
          && GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));

      // #####################################################
      // run again, with subject attributes
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=assignGrouperPrivilegesLiteWs --groupName=aStem:aGroup --subjectId=test.subject.0 --subjectAttributeNames=name --privilegeName=optin --allowed=false --outputTemplate=${index}:$space$${wsSubject.getAttributeValue(0)}$newline$",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertTrue(outputLines[0], outputLines[0]
          .contains("my name is test.subject.0"));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("\"name\""));
      assertTrue(GrouperClientWs.mostRecentResponse
          .contains("my name is test.subject.0"));

      // #####################################################
      // run again, with params
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=assignGrouperPrivilegesLiteWs --groupName=aStem:aGroup --privilegeName=optin --allowed=false --subjectId=test.subject.0 --paramName0=whatever --paramValue0=someValue",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertEquals(GrouperClientUtils.length(outputLines), 1);
      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS_NOT_ALLOWED_DIDNT_EXIST", matcher.group(1));
      assertEquals("group", matcher.group(2));
      assertEquals("aStem:aGroup", matcher.group(3));
      assertEquals("test.subject.0", matcher.group(4));
      assertEquals("access", matcher.group(5));
      assertEquals("optin", matcher.group(6));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("whatever")
          && GrouperClientWs.mostRecentRequest.contains("someValue"));

    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testGroupDelete() throws Exception {

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=groupDeleteWs --groupNames=aStem:aGroup", " "));
      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      Pattern pattern = Pattern
          .compile("^Index (\\d+): success: T: code: ([A-Z_]+): (.*+)$");
      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("aStem:aGroup", matcher.group(3));

      // #####################################################
      // run again, should be already deleted
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=groupDeleteWs --groupNames=aStem:aGroup", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS_GROUP_NOT_FOUND", matcher.group(2));
      assertEquals("aStem:aGroup", matcher.group(3));

      // #####################################################
      // run with invalid args
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // test a command line template
      try {
        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=groupDeleteWs --groupNames=aStem:aGroup --ousdfsdfate=${index}",
                    " "));
      } catch (Exception e) {
        assertTrue(e.getMessage(), e.getMessage().contains("ousdfsdfate"));
      }
      System.out.flush();

      System.setOut(systemOut);

      // #####################################################
      // run with custom template
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // test a command line template
      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=groupDeleteWs --groupNames=aStem:aGroup --outputTemplate=${index}",
                  " "));

      System.out.flush();

      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      assertEquals("0", output);

      // #####################################################
      // run again, with txType
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=groupDeleteWs --groupNames=aStem:aGroup --txType=NONE",
          " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS_GROUP_NOT_FOUND", matcher.group(2));
      assertEquals("aStem:aGroup", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("txType")
              && GrouperClientWs.mostRecentRequest.contains("NONE"));

      // #####################################################
      // run again, with includeSubjectDetail
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=groupDeleteWs --groupNames=aStem:aGroup --includeGroupDetail=true",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS_GROUP_NOT_FOUND", matcher.group(2));
      assertEquals("aStem:aGroup", matcher.group(3));

      assertTrue(!GrouperClientWs.mostRecentRequest.contains("txType")
          && !GrouperClientWs.mostRecentRequest.contains("NONE")
          && GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));

      // #####################################################
      // run again, with params
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=groupDeleteWs --groupNames=aStem:aGroup --paramName0=whatever --paramValue0=someValue",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS_GROUP_NOT_FOUND", matcher.group(2));
      assertEquals("aStem:aGroup", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("whatever")
          && GrouperClientWs.mostRecentRequest.contains("someValue"));

    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testStemDelete() throws Exception {

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=stemDeleteWs --stemNames=aStem:aStem0", " "));
      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      Pattern pattern = Pattern
          .compile("^Index (\\d+): success: T: code: ([A-Z_]+): (.*+)$");
      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("aStem:aStem0", matcher.group(3));

      // #####################################################
      // run again, should be already deleted
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=stemDeleteWs --stemNames=aStem:aStem0", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS_STEM_NOT_FOUND", matcher.group(2));
      assertEquals("aStem:aStem0", matcher.group(3));

      // #####################################################
      // run with invalid args
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // test a command line template
      try {
        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=stemDeleteWs --stemNames=aStem:aStem0 --ousdfsdfate=${index}",
                    " "));
      } catch (Exception e) {
        assertTrue(e.getMessage(), e.getMessage().contains("ousdfsdfate"));
      }
      System.out.flush();

      System.setOut(systemOut);

      // #####################################################
      // run with custom template
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // test a command line template
      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=stemDeleteWs --stemNames=aStem:aStem0 --outputTemplate=${index}",
                  " "));

      System.out.flush();

      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      assertEquals("0", output);

      // #####################################################
      // run again, with txType
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=stemDeleteWs --stemNames=aStem:aStem0 --txType=NONE",
          " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS_STEM_NOT_FOUND", matcher.group(2));
      assertEquals("aStem:aStem0", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("txType")
              && GrouperClientWs.mostRecentRequest.contains("NONE"));

      // #####################################################
      // run again, with params
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=stemDeleteWs --stemNames=aStem:aStem0 --paramName0=whatever --paramValue0=someValue",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS_STEM_NOT_FOUND", matcher.group(2));
      assertEquals("aStem:aStem0", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("whatever")
          && GrouperClientWs.mostRecentRequest.contains("someValue"));

    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * normal save
   * @throws Exception
   */
  public void testGroupSaveNoLookup() throws Exception {

    WsGroupToSave wsGroupToSave = new WsGroupToSave();
    wsGroupToSave.setSaveMode("INSERT");

    WsGroup wsGroup = new WsGroup();
    wsGroup.setDisplayExtension("a group4");
    wsGroup.setExtension("aGroup4");
    wsGroup.setName("aStem:aGroup4");
    wsGroupToSave.setWsGroup(wsGroup);
    WsGroupSaveResults wsGroupSaveResults = new GcGroupSave().addGroupToSave(wsGroupToSave).execute();

    //prints SUCCESS_INSERTED when it works
    String resultCode = wsGroupSaveResults.getResults()[0].getResultMetadata().getResultCode();

    assertEquals("SUCCESS_INSERTED", resultCode);
  }

  /**
   * normal save
   * @throws Exception
   */
  public void testGroupSaveLookupNameSame() throws Exception {

    WsGroupToSave wsGroupToSave = new WsGroupToSave();
    wsGroupToSave.setSaveMode("INSERT");
    wsGroupToSave.setWsGroupLookup(new WsGroupLookup("aStem:aGroup4", null));
    WsGroup wsGroup = new WsGroup();
    wsGroup.setDisplayExtension("a group4");
    wsGroup.setExtension("aGroup4");
    wsGroup.setName("aStem:aGroup4");
    wsGroupToSave.setWsGroup(wsGroup);
    WsGroupSaveResults wsGroupSaveResults = new GcGroupSave().addGroupToSave(wsGroupToSave).execute();

    //prints SUCCESS_INSERTED when it works
    String resultCode = wsGroupSaveResults.getResults()[0].getResultMetadata().getResultCode();

    assertEquals("SUCCESS_INSERTED", resultCode);
  }

  /**
   * normal save
   * @throws Exception
   */
  public void testGroupSaveInsertAlreadyExists() throws Exception {

    {
      WsGroupToSave wsGroupToSave = new WsGroupToSave();
      wsGroupToSave.setSaveMode("INSERT");
      wsGroupToSave.setWsGroupLookup(new WsGroupLookup(null, null));
      WsGroup wsGroup = new WsGroup();
      wsGroup.setDisplayExtension("a group4");
      wsGroup.setExtension("aGroup4");
      wsGroup.setName("aStem:aGroup4");
      wsGroupToSave.setWsGroup(wsGroup);
      WsGroupSaveResults wsGroupSaveResults = new GcGroupSave().addGroupToSave(wsGroupToSave).execute();

      //prints SUCCESS_INSERTED when it works
      String resultCode = wsGroupSaveResults.getResults()[0].getResultMetadata().getResultCode();

      assertEquals("SUCCESS_INSERTED", resultCode);
    }

    {
      WsGroupToSave wsGroupToSave = new WsGroupToSave();
      wsGroupToSave.setSaveMode("INSERT");
      wsGroupToSave.setWsGroupLookup(new WsGroupLookup(null, null));
      WsGroup wsGroup = new WsGroup();
      wsGroup.setDisplayExtension("a group4");
      wsGroup.setExtension("aGroup4");
      wsGroup.setName("aStem:aGroup4");
      wsGroupToSave.setWsGroup(wsGroup);
      try {
        @SuppressWarnings("unused")
        WsGroupSaveResults wsGroupSaveResults = new GcGroupSave().addGroupToSave(wsGroupToSave).execute();

        fail("Should not insert twice");

        //System.out.println(resultCode);
      } catch (GcWebServiceError gwse) {
        WsGroupSaveResults wsGroupSaveResults = (WsGroupSaveResults)gwse.getContainerResponseObject();

        String resultCode = wsGroupSaveResults.getResults()[0].getResultMetadata().getResultCode();

        assertEquals("GROUP_ALREADY_EXISTS", resultCode);
      }
    }
  }

  /**
   * update a group to an existing name
   * @throws Exception
   */
  public void testGroupSaveUpdateExistingName() throws Exception {

    {
      WsGroupToSave wsGroupToSave = new WsGroupToSave();
      wsGroupToSave.setSaveMode("INSERT");
      wsGroupToSave.setWsGroupLookup(new WsGroupLookup(null, null));
      WsGroup wsGroup = new WsGroup();
      wsGroup.setDisplayExtension("a group4");
      wsGroup.setExtension("aGroup4");
      wsGroup.setName("aStem:aGroup4");
      wsGroupToSave.setWsGroup(wsGroup);
      WsGroupSaveResults wsGroupSaveResults = new GcGroupSave().addGroupToSave(wsGroupToSave).execute();

      //prints SUCCESS_INSERTED when it works
      String resultCode = wsGroupSaveResults.getResults()[0].getResultMetadata().getResultCode();

      assertEquals("SUCCESS_INSERTED", resultCode);
    }
    String uuid = null;
    {
      WsGroupToSave wsGroupToSave = new WsGroupToSave();
      wsGroupToSave.setSaveMode("INSERT");
      wsGroupToSave.setWsGroupLookup(new WsGroupLookup(null, null));
      WsGroup wsGroup = new WsGroup();
      wsGroup.setDisplayExtension("a group5");
      wsGroup.setExtension("aGroup5");
      wsGroup.setName("aStem:aGroup5");
      wsGroupToSave.setWsGroup(wsGroup);
      WsGroupSaveResults wsGroupSaveResults = new GcGroupSave().addGroupToSave(wsGroupToSave).execute();

      uuid = wsGroupSaveResults.getResults()[0].getWsGroup().getUuid();

      //prints SUCCESS_INSERTED when it works
      String resultCode = wsGroupSaveResults.getResults()[0].getResultMetadata().getResultCode();

      assertEquals("SUCCESS_INSERTED", resultCode);

    }

    {
      WsGroupToSave wsGroupToSave = new WsGroupToSave();
      wsGroupToSave.setSaveMode("UPDATE");
      wsGroupToSave.setWsGroupLookup(new WsGroupLookup(null, uuid));
      WsGroup wsGroup = new WsGroup();
      wsGroup.setDisplayExtension("a group4");
      wsGroup.setExtension("aGroup4");
      wsGroup.setName("aStem:aGroup4");
      wsGroupToSave.setWsGroup(wsGroup);
      try {
        @SuppressWarnings("unused")
        WsGroupSaveResults wsGroupSaveResults = new GcGroupSave().addGroupToSave(wsGroupToSave).execute();

        fail("Should not update to existing name");

        //System.out.println(resultCode);
      } catch (GcWebServiceError gwse) {
        WsGroupSaveResults wsGroupSaveResults = (WsGroupSaveResults)gwse.getContainerResponseObject();

        String resultCode = wsGroupSaveResults.getResults()[0].getResultMetadata().getResultCode();

        assertEquals("EXCEPTION", resultCode);
      }
    }

  }

  /**
   * @throws Exception
   */
  public void testGroupSaveMoveCopy() throws Exception {

    GrouperSession grouperSession = GrouperSession.startRootSession();
    
    new GroupSave(grouperSession).assignCreateParentStemsIfNotExist(true).assignName("test:testGroupToCopy").save();

    Group group = GroupFinder.findByName(grouperSession, "test:stemDestination:testGroupToCopy", false);
    
    if (group != null) {
      group.delete();
    }
    
    Stem toStem = new StemSave(grouperSession).assignCreateParentStemsIfNotExist(true).assignName("test:stemDestination").save();
    
    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));
    String output = null;
    String[] outputLines = null;
    Pattern pattern = null;
    Matcher matcher = null;
    try {
      //try with name with slash
      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=groupSaveWs --name=test:testGroupToCopy --paramName0=moveOrCopy --paramValue0=copy "
          + "--paramName1=moveOrCopyToStemName --paramValue1=test:stemDestination "
          + "--paramName2=copyPrivilegesOfGroup --paramValue2=true "
          + "--paramName3=copyGroupAsPrivilege --paramValue3=true "
          + "--paramName4=copyListMembersOfGroup --paramValue4=true "
          + "--paramName5=copyListGroupAsMember --paramValue5=true "
          + "--paramName6=copyAttributes --paramValue6=true "
          + "  ", " "));
      System.out.flush();
      output = new String(baos.toByteArray());
      
      systemOut.println(output);
      
      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      pattern = Pattern.compile("^Success: T: code: ([A-Z_]+): (.*+)$");
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS_INSERTED", matcher.group(1));
      //doesnt work
      //      assertEquals("test:stemDestination:testGroupToCopy", matcher.group(2));
      
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("moveOrCopy")
              && GrouperClientWs.mostRecentRequest.contains("copy"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("moveOrCopyToStemName")
              && GrouperClientWs.mostRecentRequest.contains("test:stemDestination"));

      group = GroupFinder.findByName(grouperSession, "test:stemDestination:testGroupToCopy", false, new QueryOptions().secondLevelCache(false));
      
      assertTrue(group != null);
      
      // #####################################################
      // run again, with move

      group = GroupFinder.findByName(grouperSession, "test:stemDestination:testGroupToCopy", true, new QueryOptions().secondLevelCache(false));
      
      if (group != null) {
        group.delete();
      }

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=groupSaveWs --name=test:testGroupToCopy --paramName0=moveOrCopy --paramValue0=move "
          + "--paramName1=moveOrCopyToStemUuid --paramValue1=" + toStem.getUuid() + " "
          + "--paramName2=moveAssignAlternateName --paramValue2=false", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      pattern = Pattern.compile("^Success: T: code: ([A-Z_]+): (.*+)$");
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS_INSERTED", matcher.group(1));

      //doesnt work
      //      assertEquals("test:stemDestination:testGroupToCopy", matcher.group(2));
      
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("moveOrCopy")
              && GrouperClientWs.mostRecentRequest.contains("move"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("moveAssignAlternateName")
              && GrouperClientWs.mostRecentRequest.contains(toStem.getUuid()));

      group = GroupFinder.findByName(grouperSession, "test:stemDestination:testGroupToCopy", false, new QueryOptions().secondLevelCache(false));
      
      assertTrue(group != null);

      group = GroupFinder.findByName(grouperSession, "test:testGroupToCopy", false, new QueryOptions().secondLevelCache(false));
      
      assertTrue(group == null);

    } finally {
      
    }
  }
  
  /**
   * @throws Exception
   */
  public void testStemSaveMoveCopy() throws Exception {

    GrouperSession grouperSession = GrouperSession.startRootSession();
    
    new StemSave(grouperSession).assignCreateParentStemsIfNotExist(true).assignName("test:testStemToCopy").save();

    Stem stemToCopy = StemFinder.findByName(grouperSession, "test:stemDestination:testStemToCopy", false);
    
    if (stemToCopy != null) {
      stemToCopy.delete();
    }
    
    Stem toStem = new StemSave(grouperSession).assignCreateParentStemsIfNotExist(true).assignName("test:stemDestination").save();
    
    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));
    String output = null;
    String[] outputLines = null;
    Pattern pattern = null;
    Matcher matcher = null;
    try {
      //try with name with slash
      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=stemSaveWs --name=test:testStemToCopy --paramName0=moveOrCopy --paramValue0=copy "
          + "--paramName1=moveOrCopyToStemName --paramValue1=test:stemDestination "
          + "--paramName2=copyPrivilegesOfGroup --paramValue2=true "
          + "--paramName3=copyGroupAsPrivilege --paramValue3=true "
          + "--paramName4=copyListMembersOfGroup --paramValue4=true "
          + "--paramName5=copyListGroupAsMember --paramValue5=true "
          + "--paramName6=copyAttributes --paramValue6=true "
          + "--paramName7=copyPrivilegesOfStem --paramValue7=true"
          + "  ", " "));
      System.out.flush();
      output = new String(baos.toByteArray());
      
      systemOut.println(output);
      
      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      pattern = Pattern.compile("^Success: T: code: ([A-Z_]+): (.*+)$");
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS_INSERTED", matcher.group(1));
      //doesnt work
      //      assertEquals("test:stemDestination:testStemToCopy", matcher.group(2));
      
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("moveOrCopy")
              && GrouperClientWs.mostRecentRequest.contains("copy"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("moveOrCopyToStemName")
              && GrouperClientWs.mostRecentRequest.contains("test:stemDestination"));

      stemToCopy = StemFinder.findByName(grouperSession, "test:stemDestination:testStemToCopy", false, new QueryOptions().secondLevelCache(false));
      
      assertTrue(stemToCopy != null);
      
      // #####################################################
      // run again, with move

      stemToCopy = StemFinder.findByName(grouperSession, "test:stemDestination:testStemToCopy", true, new QueryOptions().secondLevelCache(false));
      
      if (stemToCopy != null) {
        stemToCopy.delete();
      }

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=stemSaveWs --name=test:testStemToCopy --paramName0=moveOrCopy --paramValue0=move "
          + "--paramName1=moveOrCopyToStemUuid --paramValue1=" + toStem.getUuid() + " "
          + "--paramName2=moveAssignAlternateName --paramValue2=false", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      pattern = Pattern.compile("^Success: T: code: ([A-Z_]+): (.*+)$");
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS_INSERTED", matcher.group(1));

      //doesnt work
      //      assertEquals("test:stemDestination:testStemToCopy", matcher.group(2));
      
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("moveOrCopy")
              && GrouperClientWs.mostRecentRequest.contains("move"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("moveAssignAlternateName")
              && GrouperClientWs.mostRecentRequest.contains(toStem.getUuid()));

      stemToCopy = StemFinder.findByName(grouperSession, "test:stemDestination:testStemToCopy", false, new QueryOptions().secondLevelCache(false));
      
      assertTrue(stemToCopy != null);

      stemToCopy = StemFinder.findByName(grouperSession, "test:testStemToCopy", false, new QueryOptions().secondLevelCache(false));
      
      assertTrue(stemToCopy == null);

    } finally {
      
    }
  }
  
  /**
   * @throws Exception
   */
  public void testGroupSave() throws Exception {

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));
    String output = null;
    String[] outputLines = null;
    Pattern pattern = null;
    Matcher matcher = null;
    
    /**
    * Note that the following test uses some UTF-8
    * encoded characters (i.e. äöüß) that are more commonly used
    * by European-based languages such as German and
    * French. If you do not see these properly in your
    * development environment and/or editor and if they
    * show up as question marks for you, please ensure
    * the file encoding is correctly indicated as UTF-8.
    **/
    try {
      systemOut.println("Umlaut: äöüß");
      //try with name with slash
      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=groupSaveWs --name=aStem:newGroup0äöüß", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");
//äöüß
      pattern = Pattern.compile("^Success: T: code: ([A-Z_]+): (.*+)$");
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS_INSERTED", matcher.group(1));
      assertEquals("aStem:newGroup0äöüß", matcher.group(2));

      // ##########################
      //try with name with slash

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // THIS WORKS IF WS HAS THIS IN grouper.properties
      //  group.validateExtensionByDefault = true
      //  stem.validateExtensionByDefault = true
      //  attributeDef.validateExtensionByDefault = true
      //  attributeDefName.validateExtensionByDefault = true
          
      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=groupSaveWs --name=aStem:newGroup0/1", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      pattern = Pattern.compile("^Success: T: code: ([A-Z_]+): (.*+)$");
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS_INSERTED", matcher.group(1));
      assertEquals("aStem:newGroup0/1", matcher.group(2));

      // #####################################################
      // run again, with clientVersion

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=groupSaveWs --name=aStem:newGroup0", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      pattern = Pattern.compile("^Success: T: code: ([A-Z_]+): (.*+)$");
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS_INSERTED", matcher.group(1));
      assertEquals("aStem:newGroup0", matcher.group(2));

      // #####################################################
      // run again, with clientVersion

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=groupSaveWs --name=aStem:newGroup0 --clientVersion=v1_3_000",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS", matcher.group(1));
      assertEquals("aStem:newGroup0", matcher.group(2));

      // #####################################################
      // run again, should be already added
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=groupSaveWs --name=aStem:newGroup0", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS_NO_CHANGES_NEEDED", matcher.group(1));
      assertEquals("aStem:newGroup0", matcher.group(2));

      // #####################################################
      // run again, should be already added
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=groupSaveWs --name=aStem:newGroup0 --displayExtension=newGroup0displayExtension",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS_UPDATED", matcher.group(1));
      assertEquals("aStem:newGroup0", matcher.group(2));

      // #####################################################
      // run with invalid args
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // test a command line template
      try {
        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=groupSaveWs --name=aStem:newGroup0 --ousdfsdfate=${index}",
                    " "));
      } catch (Exception e) {
        assertTrue(e.getMessage(), e.getMessage().contains("ousdfsdfate"));
      }
      System.out.flush();

      System.setOut(systemOut);

      // #####################################################
      // run with custom template
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // test a command line template
      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=groupSaveWs --name=aStem:newGroup0 --outputTemplate=${index}",
                  " "));

      System.out.flush();

      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      assertEquals("0", output);

      // #####################################################
      // run again, with field
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=groupSaveWs --name=aStem:newGroup0 --saveMode=UPDATE",
          " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS_NO_CHANGES_NEEDED", matcher.group(1));
      assertEquals("aStem:newGroup0", matcher.group(2));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("saveMode")
              && GrouperClientWs.mostRecentRequest.contains("UPDATE"));

      // #####################################################
      // run again, with txType
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=groupSaveWs --name=aStem:newGroup0 --txType=NONE", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS_NO_CHANGES_NEEDED", matcher.group(1));
      assertEquals("aStem:newGroup0", matcher.group(2));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("txType")
              && GrouperClientWs.mostRecentRequest.contains("NONE")
              && !GrouperClientWs.mostRecentRequest
                  .contains("includeGroupDetail"));

      // #####################################################
      // run again, with includeGroupDetail
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=groupSaveWs --name=aStem:newGroup0 --includeGroupDetail=true",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS_NO_CHANGES_NEEDED", matcher.group(1));
      assertEquals("aStem:newGroup0", matcher.group(2));

      assertTrue(!GrouperClientWs.mostRecentRequest.contains("txType")
          && !GrouperClientWs.mostRecentRequest.contains("NONE")
          && GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));

      // #####################################################
      // run again, with groupLookupName
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=groupSaveWs --name=aStem:newGroup1 --groupLookupName=aStem:newGroup0",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS_UPDATED", matcher.group(1));
      assertEquals("aStem:newGroup1", matcher.group(2));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("txType")
              && !GrouperClientWs.mostRecentRequest.contains("NONE")
              && !GrouperClientWs.mostRecentRequest
                  .contains("includeGroupDetail")
              && GrouperClientWs.mostRecentRequest.contains("wsGroupLookup")
              && GrouperClientWs.mostRecentRequest.contains("aStem:newGroup1")
              && GrouperClientWs.mostRecentRequest.contains("aStem:newGroup0"));

      // #####################################################
      // run again, with saveMode
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=groupSaveWs --name=aStem:newGroup3 --saveMode=INSERT",
          " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS_INSERTED", matcher.group(1));
      assertEquals("aStem:newGroup3", matcher.group(2));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("saveMode")
          && GrouperClientWs.mostRecentRequest.contains("INSERT"));

      // #####################################################
      // run again, description
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {
        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=groupSaveWs --name=aStem:newGroup0 --description=aDescription",
                    " "));
        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLines[0], matcher.matches());

        assertEquals("SUCCESS_UPDATED", matcher.group(1));
        assertEquals("aStem:newGroup0", matcher.group(2));

        assertTrue(GrouperClientWs.mostRecentRequest.contains("description")
            && GrouperClientWs.mostRecentRequest.contains("aDescription"));

        // #####################################################
        // run again, with params
        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=groupSaveWs --name=aStem:newGroup0 --paramName0=whatever --paramValue0=someValue",
                    " "));
        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLines[0], matcher.matches());

        assertEquals("SUCCESS_UPDATED", matcher.group(1));
        assertEquals("aStem:newGroup0", matcher.group(2));

        assertTrue(GrouperClientWs.mostRecentRequest.contains("whatever")
            && GrouperClientWs.mostRecentRequest.contains("someValue"));

        // #####################################################
        // run again, with typeNames
        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=groupSaveWs --name=aStem:newGroup0 --typeNames=aType",
            " "));
        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLines[0], matcher.matches());

        assertEquals("SUCCESS_UPDATED", matcher.group(1));
        assertEquals("aStem:newGroup0", matcher.group(2));

        assertTrue(GrouperClientWs.mostRecentRequest.contains("typeNames")
            && GrouperClientWs.mostRecentRequest.contains("aType"));

        // #####################################################
        // run again, with attributes
        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=groupSaveWs --name=aStem:newGroup0 --typeNames=aType --attributeName0=attr_1 --attributeValue0=whatever",
                    " "));
        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLines[0], matcher.matches());

        assertEquals("SUCCESS_UPDATED", matcher.group(1));
        assertEquals("aStem:newGroup0", matcher.group(2));

        assertTrue(GrouperClientWs.mostRecentRequest.contains("attr_1")
            && GrouperClientWs.mostRecentRequest.contains("whatever"));

        // #####################################################
        // run again, with groupDetailParamName0
        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=groupSaveWs --name=aStem:newGroup0 --groupDetailParamName0=something --groupDetailParamValue0=whatever",
                    " "));
        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLines[0], matcher.matches());

        assertEquals("SUCCESS_UPDATED", matcher.group(1));
        assertEquals("aStem:newGroup0", matcher.group(2));

        assertTrue(GrouperClientWs.mostRecentRequest.contains("something")
            && GrouperClientWs.mostRecentRequest.contains("whatever"));

        // #####################################################
        // run again, with composite

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=groupSaveWs --name=aStem:leftGroup", " "));
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=groupSaveWs --name=aStem:rightGroup", " "));

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=groupSaveWs --name=aStem:newGroup0 --compositeType=union --leftGroupName=aStem:leftGroup --rightGroupName=aStem:rightGroup --includeGroupDetail=true",
                    " "));
        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLines[0], matcher.matches());

        assertEquals("SUCCESS_UPDATED", matcher.group(1));
        assertEquals("aStem:newGroup0", matcher.group(2));

        assertTrue(GrouperClientWs.mostRecentRequest.contains("union")
            && GrouperClientWs.mostRecentRequest.contains("aStem:leftGroup")
            && GrouperClientWs.mostRecentRequest.contains("aStem:rightGroup"));


        // #####################################################
        // run again, with typeOfGroup
        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=groupSaveWs --name=aStem:newGroup4 --typeOfGroup=entity",
                    " "));
        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLines[0], matcher.matches());

        assertEquals("SUCCESS_INSERTED", matcher.group(1));
        assertEquals("aStem:newGroup4", matcher.group(2));

        assertTrue(GrouperClientWs.mostRecentRequest, GrouperClientWs.mostRecentRequest.contains("typeOfGroup\":\"entity"));


        // #####################################################
        // run again, with idIndex
        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=groupSaveWs --name=aStem:newGroup5 --idIndex=12345",
                    " "));
        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLines[0], matcher.matches());

        assertEquals("SUCCESS_INSERTED", matcher.group(1));
        assertEquals("aStem:newGroup5", matcher.group(2));

        assertTrue(GrouperClientWs.mostRecentRequest, GrouperClientWs.mostRecentRequest.contains("idIndex\":\"12345"));
        assertTrue(GrouperClientWs.mostRecentResponse, GrouperClientWs.mostRecentResponse.contains("idIndex\":\"12345"));

        // #####################################################
        // run again, with idIndex
        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=groupSaveWs --name=aStem:newGroup5 --groupLookupIdIndex=12345 --description=newDescription",
                    " "));
        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLines[0], matcher.matches());

        assertEquals("SUCCESS_UPDATED", matcher.group(1));
        assertEquals("aStem:newGroup5", matcher.group(2));

        assertTrue(GrouperClientWs.mostRecentRequest, GrouperClientWs.mostRecentRequest.contains("idIndex\":\"12345"));
        assertTrue(GrouperClientWs.mostRecentResponse, GrouperClientWs.mostRecentResponse.contains("idIndex\":\"12345"));


      } finally {
      }
    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testStemSave() throws Exception {

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    GrouperSession grouperSession = GrouperSession.startRootSession();
    Stem someStem = new StemSave(grouperSession).assignName("someStem").save();
    GrouperSession.stopQuietly(grouperSession);
    try {

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=stemSaveWs --name=aStem:newStem0", " "));
      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      Pattern pattern = Pattern.compile("^Success: T: code: ([A-Z_]+): (.*+)$");
      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS_INSERTED", matcher.group(1));
      assertEquals("aStem:newStem0", matcher.group(2));

      // #####################################################
      // run again, with clientVersion

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=stemSaveWs --name=aStem:newStem0 --clientVersion=v1_3_000",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS", matcher.group(1));
      assertEquals("aStem:newStem0", matcher.group(2));

      // #####################################################
      // run again, should be already added
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=stemSaveWs --name=aStem:newStem0", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS_NO_CHANGES_NEEDED", matcher.group(1));
      assertEquals("aStem:newStem0", matcher.group(2));

      // #####################################################
      // run again, should be already added
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=stemSaveWs --name=aStem:newStem0 --displayExtension=newStem0displayExtension",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS_UPDATED", matcher.group(1));
      assertEquals("aStem:newStem0", matcher.group(2));

      // #####################################################
      // run with invalid args
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // test a command line template
      try {
        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=stemSaveWs --name=aStem:newStem0 --ousdfsdfate=${index}",
                    " "));
      } catch (Exception e) {
        assertTrue(e.getMessage(), e.getMessage().contains("ousdfsdfate"));
      }
      System.out.flush();

      System.setOut(systemOut);

      // #####################################################
      // run with custom template
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // test a command line template
      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=stemSaveWs --name=aStem:newStem0 --outputTemplate=${index}",
                  " "));

      System.out.flush();

      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      assertEquals("0", output);

      // #####################################################
      // run with custom template with function
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // test a command line template
      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=stemSaveWs --name=aStem:newStem0 --outputTemplate=a${grouperClientUtils.defaultString(wsStemSaveResult.resultMetadata.resfsdfCode)}",
                  " "));

      System.out.flush();

      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      assertEquals("a", output);

      // #####################################################
      // run again, with field
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils
          .splitTrim(
              "--operation=stemSaveWs --name=aStem:newStem0 --saveMode=UPDATE",
              " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS_NO_CHANGES_NEEDED", matcher.group(1));
      assertEquals("aStem:newStem0", matcher.group(2));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("saveMode")
              && GrouperClientWs.mostRecentRequest.contains("UPDATE"));

      // #####################################################
      // run again, with txType
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=stemSaveWs --name=aStem:newStem0 --txType=NONE", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS_NO_CHANGES_NEEDED", matcher.group(1));
      assertEquals("aStem:newStem0", matcher.group(2));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("txType")
              && GrouperClientWs.mostRecentRequest.contains("NONE")
              && !GrouperClientWs.mostRecentRequest
                  .contains("includeGroupDetail"));

      // #####################################################
      // run again, with groupLookupName
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=stemSaveWs --name=aStem:newStem1 --stemLookupName=aStem:newStem0",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS_UPDATED", matcher.group(1));
      assertEquals("aStem:newStem1", matcher.group(2));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsStemLookup")
              && GrouperClientWs.mostRecentRequest.contains("aStem:newStem1")
              && GrouperClientWs.mostRecentRequest.contains("aStem:newStem0"));

      //lets delete and recreate this stem...
      grouperSession = GrouperSession.startRootSession();
      try {
        Stem stem = StemFinder.findByName(grouperSession, "aStem:newStem0", true, new QueryOptions().secondLevelCache(false));
        stem.delete();
      } finally {
        GrouperSession.stopQuietly(grouperSession);
      }

      // #####################################################
      // run again, with saveMode
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils
          .splitTrim(
              "--operation=stemSaveWs --name=aStem:newStem0 --saveMode=INSERT",
              " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS_INSERTED", matcher.group(1));
      assertEquals("aStem:newStem0", matcher.group(2));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("saveMode")
          && GrouperClientWs.mostRecentRequest.contains("INSERT"));

      // #####################################################
      // run again, description
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=stemSaveWs --name=aStem:newStem0 --description=aDescription",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS_UPDATED", matcher.group(1));
      assertEquals("aStem:newStem0", matcher.group(2));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("description")
          && GrouperClientWs.mostRecentRequest.contains("aDescription"));

      // #####################################################
      // run again, with params
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=stemSaveWs --name=aStem:newStem0 --paramName0=whatever --paramValue0=someValue",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS_UPDATED", matcher.group(1));
      assertEquals("aStem:newStem0", matcher.group(2));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("whatever")
          && GrouperClientWs.mostRecentRequest.contains("someValue"));

      // #####################################################
      // run again, with inserting with id index
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=stemSaveWs --name=aStem:newStem5 --idIndex=12345",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS_INSERTED", matcher.group(1));
      assertEquals("aStem:newStem5", matcher.group(2));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("idIndex"));


      // #####################################################
      // run again, with lookup by id index
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=stemSaveWs --name=someStem --description=myDescription --stemLookupIdIndex=" + someStem.getIdIndex(),
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS_UPDATED", matcher.group(1));
      assertEquals("someStem", matcher.group(2));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("idIndex"));

    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testGetGroups() throws Exception {

    // make sure group exists
    GrouperSession grouperSession = GrouperSession.startRootSession();
    Group group = Group.saveGroup(grouperSession, "aStem:aGroup", null,
        "aStem:aGroup", "aGroup", null, null, true);
    Group group2 = Group.saveGroup(grouperSession, "aStem:aGroup2", null,
        "aStem:aGroup2", "aGroup2", null, null, true);
    Group group3 = Group.saveGroup(grouperSession, "aStem:aGroup3", null,
        "aStem:aGroup3", "aGroup3", null, null, true);
    Group group4 = Group.saveGroup(grouperSession, "aStem:aGroup4", null,
        "aStem:aGroup4", "aGroup4", null, null, true);
    Group group5 = Group.saveGroup(grouperSession, "aStem:aGroup5", null,
        "aStem:aGroup5", "aGroup5", null, null, true);
    Group group6 = Group.saveGroup(grouperSession, "aStem:aGroup6", null,
        "aStem:aGroup6", "aGroup6", null, null, true);

    // give permissions
    String wsUserLabel = GrouperClientUtils.propertiesValue(
        "grouperClient.webService.user.label", true);
    String wsUserString = GrouperClientUtils.propertiesValue(
        "grouperClient.webService." + wsUserLabel, true);
    Subject wsUser = SubjectFinder.findByIdOrIdentifier(wsUserString, true);

    group.grantPriv(wsUser, AccessPrivilege.READ, false);
    group.grantPriv(wsUser, AccessPrivilege.VIEW, false);
    group2.grantPriv(wsUser, AccessPrivilege.READ, false);
    group2.grantPriv(wsUser, AccessPrivilege.VIEW, false);
    group3.grantPriv(wsUser, AccessPrivilege.READ, false);
    group3.grantPriv(wsUser, AccessPrivilege.VIEW, false);
    group4.grantPriv(wsUser, AccessPrivilege.VIEW, false);
    group4.grantPriv(wsUser, AccessPrivilege.READ, false);
    group5.grantPriv(wsUser, AccessPrivilege.VIEW, false);
    group5.grantPriv(wsUser, AccessPrivilege.READ, false);
    group6.grantPriv(wsUser, AccessPrivilege.VIEW, false);
    group6.grantPriv(wsUser, AccessPrivilege.READ, false);

    // add some subjects for PIT
    group4.addMember(SubjectTestHelper.SUBJ0, false);
    group4.deleteMember(SubjectTestHelper.SUBJ0, false);
    Thread.sleep(100);
    Timestamp pointInTimeFrom = new Timestamp(new Date().getTime());
    Thread.sleep(100);

    // add some subjects
    group.addMember(SubjectTestHelper.SUBJ0, false);
    group2.addMember(SubjectTestHelper.SUBJ0, false);
    group2.addMember(SubjectTestHelper.SUBJ1, false);
    group3.addMember(SubjectTestHelper.SUBJ1, false);

    // add some subjects for PIT
    group5.addMember(SubjectTestHelper.SUBJ0, false);
    group5.deleteMember(SubjectTestHelper.SUBJ0, false);
    Thread.sleep(100);
    Timestamp pointInTimeTo = new Timestamp(new Date().getTime());
    Thread.sleep(100);
    group6.addMember(SubjectTestHelper.SUBJ0, false);
    group6.deleteMember(SubjectTestHelper.SUBJ0, false);
    ChangeLogTempToEntity.convertRecords();


    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getGroupsWs --subjectIds=test.subject.0,test.subject.1",
          " "));
      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      System.out.println(output);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      Pattern pattern = Pattern
          .compile("^SubjectIndex (\\d+): success: T: code: ([A-Z_]+): subject: (.*): groupIndex: (\\d+): (.*+)$");
      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("test.subject.0", matcher.group(3));
      assertEquals("0", matcher.group(4));
      assertTrue(matcher.group(5), GrouperClientUtils.equals("aStem:aGroup",
          matcher.group(5))
          || GrouperClientUtils.equals("aStem:aGroup2", matcher.group(5)));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("test.subject.0", matcher.group(3));
      assertEquals("1", matcher.group(4));
      assertTrue(matcher.group(5), GrouperClientUtils.equals("aStem:aGroup",
          matcher.group(5))
          || GrouperClientUtils.equals("aStem:aGroup2", matcher.group(5)));

      matcher = pattern.matcher(outputLines[2]);

      assertTrue(outputLines[2], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("test.subject.1", matcher.group(3));
      assertEquals("0", matcher.group(4));
      assertTrue(matcher.group(5), GrouperClientUtils.equals("aStem:aGroup2",
          matcher.group(5))
          || GrouperClientUtils.equals("aStem:aGroup3", matcher.group(5)));

      matcher = pattern.matcher(outputLines[3]);

      assertTrue(outputLines[3], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("test.subject.1", matcher.group(3));
      assertEquals("1", matcher.group(4));
      assertTrue(matcher.group(5), GrouperClientUtils.equals("aStem:aGroup2",
          matcher.group(5))
          || GrouperClientUtils.equals("aStem:aGroup3", matcher.group(5)));

      // ######################################################
      // Try point in time

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      ArrayList<String> args = new ArrayList<String>();
      args.add("--operation=getGroupsWs");
      args.add("--subjectIds=test.subject.0,test.subject.1");
      args.add("--pointInTimeFrom=" + GrouperClientUtils.timestampToString(pointInTimeFrom));
      args.add("--pointInTimeTo=" + GrouperClientUtils.timestampToString(pointInTimeTo));
      GrouperClient.main(args.toArray(new String[0]));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      System.out.println(output);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("test.subject.0", matcher.group(3));
      assertEquals("0", matcher.group(4));
      assertTrue(matcher.group(5), GrouperClientUtils.equals("aStem:aGroup", matcher.group(5))
          || GrouperClientUtils.equals("aStem:aGroup2", matcher.group(5))
          || GrouperClientUtils.equals("aStem:aGroup5", matcher.group(5)));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("test.subject.0", matcher.group(3));
      assertEquals("1", matcher.group(4));
      assertTrue(matcher.group(5), GrouperClientUtils.equals("aStem:aGroup", matcher.group(5))
          || GrouperClientUtils.equals("aStem:aGroup2", matcher.group(5))
          || GrouperClientUtils.equals("aStem:aGroup5", matcher.group(5)));

      matcher = pattern.matcher(outputLines[2]);

      assertTrue(outputLines[2], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("test.subject.0", matcher.group(3));
      assertEquals("2", matcher.group(4));
      assertTrue(matcher.group(5), GrouperClientUtils.equals("aStem:aGroup", matcher.group(5))
          || GrouperClientUtils.equals("aStem:aGroup2", matcher.group(5))
          || GrouperClientUtils.equals("aStem:aGroup5", matcher.group(5)));

      matcher = pattern.matcher(outputLines[3]);

      assertTrue(outputLines[3], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("test.subject.1", matcher.group(3));
      assertEquals("0", matcher.group(4));
      assertTrue(matcher.group(5), GrouperClientUtils.equals("aStem:aGroup2",
          matcher.group(5))
          || GrouperClientUtils.equals("aStem:aGroup3", matcher.group(5)));

      matcher = pattern.matcher(outputLines[4]);

      assertTrue(outputLines[4], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("test.subject.1", matcher.group(3));
      assertEquals("1", matcher.group(4));
      assertTrue(matcher.group(5), GrouperClientUtils.equals("aStem:aGroup2",
          matcher.group(5))
          || GrouperClientUtils.equals("aStem:aGroup3", matcher.group(5)));

      // #####################################################
      // run with invalid args
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // test a command line template
      try {
        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=getGroupsWs --subjectIds=test.subject.0,test.subject.1 --ousdfsdfate=whatever",
                    " "));
      } catch (Exception e) {
        assertTrue(e.getMessage(), e.getMessage().contains("ousdfsdfate"));
      }
      System.out.flush();

      System.setOut(systemOut);

      // #####################################################
      // run with custom template
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // test a command line template
      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getGroupsWs --subjectIdentifiers=id.test.subject.0,id.test.subject.1 --outputTemplate=${subjectIndex}",
                  " "));

      System.out.flush();

      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      assertEquals("0011", output);

      // #####################################################
      // run again, with includeGroupDetail and includeSubjectDetail
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getGroupsWs --subjectIds=test.subject.0,test.subject.1 --includeGroupDetail=true --includeSubjectDetail=true",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("test.subject.0", matcher.group(3));
      assertEquals("0", matcher.group(4));
      assertTrue(matcher.group(5), GrouperClientUtils.equals("aStem:aGroup",
          matcher.group(5))
          || GrouperClientUtils.equals("aStem:aGroup2", matcher.group(5)));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("test.subject.0", matcher.group(3));
      assertEquals("1", matcher.group(4));
      assertTrue(matcher.group(5), GrouperClientUtils.equals("aStem:aGroup",
          matcher.group(5))
          || GrouperClientUtils.equals("aStem:aGroup2", matcher.group(5)));

      matcher = pattern.matcher(outputLines[2]);

      assertTrue(outputLines[2], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("test.subject.1", matcher.group(3));
      assertEquals("0", matcher.group(4));
      assertTrue(matcher.group(5), GrouperClientUtils.equals("aStem:aGroup2",
          matcher.group(5))
          || GrouperClientUtils.equals("aStem:aGroup3", matcher.group(5)));

      matcher = pattern.matcher(outputLines[3]);

      assertTrue(outputLines[3], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("test.subject.1", matcher.group(3));
      assertEquals("1", matcher.group(4));
      assertTrue(matcher.group(5), GrouperClientUtils.equals("aStem:aGroup2",
          matcher.group(5))
          || GrouperClientUtils.equals("aStem:aGroup3", matcher.group(5)));

      assertTrue(GrouperClientWs.mostRecentRequest
          .contains("includeGroupDetail")
          && GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));

      // #####################################################
      // run again, with subject attributes
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getGroupsWs --subjectIds=test.subject.0,test.subject.1 --subjectAttributeNames=name --outputTemplate=${subjectIndex}:$space$${wsGetGroupsResult.wsSubject.getAttributeValue(0)}$newline$",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertTrue(output, outputLines[0].contains("my name is test.subject.0"));

      assertTrue(output, outputLines[2].contains("my name is test.subject.1"));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("\"name\""));
      assertTrue(GrouperClientWs.mostRecentResponse
          .contains("my name is test.subject.0"));

      // #####################################################
      // run again, with default subject source
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getGroupsWs --subjectIds=test.subject.0,test.subject.1 --defaultSubjectSource=jdbc",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("test.subject.0", matcher.group(3));
      assertEquals("0", matcher.group(4));
      assertTrue(matcher.group(5), GrouperClientUtils.equals("aStem:aGroup",
          matcher.group(5))
          || GrouperClientUtils.equals("aStem:aGroup2", matcher.group(5)));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("test.subject.0", matcher.group(3));
      assertEquals("1", matcher.group(4));
      assertTrue(matcher.group(5), GrouperClientUtils.equals("aStem:aGroup",
          matcher.group(5))
          || GrouperClientUtils.equals("aStem:aGroup2", matcher.group(5)));

      matcher = pattern.matcher(outputLines[2]);

      assertTrue(outputLines[2], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("test.subject.1", matcher.group(3));
      assertEquals("0", matcher.group(4));
      assertTrue(matcher.group(5), GrouperClientUtils.equals("aStem:aGroup2",
          matcher.group(5))
          || GrouperClientUtils.equals("aStem:aGroup3", matcher.group(5)));

      matcher = pattern.matcher(outputLines[3]);

      assertTrue(outputLines[3], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("test.subject.1", matcher.group(3));
      assertEquals("1", matcher.group(4));
      assertTrue(matcher.group(5), GrouperClientUtils.equals("aStem:aGroup2",
          matcher.group(5))
          || GrouperClientUtils.equals("aStem:aGroup3", matcher.group(5)));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("jdbc"));

      // #####################################################
      // run again, subjects ids coming from file
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      String subjectIdsFileName = "subjectIdsFile_"
          + GrouperClientUtils.uniqueId() + ".txt";
      File subjectIdsFile = new File(subjectIdsFileName);

      GrouperClientUtils.saveStringIntoFile(subjectIdsFile,
          "test.subject.0\ntest.subject.1");

      try {
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getGroupsWs --subjectIdsFile=" + subjectIdsFileName,
            " "));
        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        matcher = pattern.matcher(outputLines[0]);

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLines[0], matcher.matches());

        assertEquals("0", matcher.group(1));
        assertEquals("SUCCESS", matcher.group(2));
        assertEquals("test.subject.0", matcher.group(3));
        assertEquals("0", matcher.group(4));
        assertTrue(matcher.group(5), GrouperClientUtils.equals("aStem:aGroup",
            matcher.group(5))
            || GrouperClientUtils.equals("aStem:aGroup2", matcher.group(5)));

        matcher = pattern.matcher(outputLines[1]);

        assertTrue(outputLines[1], matcher.matches());

        assertEquals("0", matcher.group(1));
        assertEquals("SUCCESS", matcher.group(2));
        assertEquals("test.subject.0", matcher.group(3));
        assertEquals("1", matcher.group(4));
        assertTrue(matcher.group(5), GrouperClientUtils.equals("aStem:aGroup",
            matcher.group(5))
            || GrouperClientUtils.equals("aStem:aGroup2", matcher.group(5)));

        matcher = pattern.matcher(outputLines[2]);

        assertTrue(outputLines[2], matcher.matches());

        assertEquals("1", matcher.group(1));
        assertEquals("SUCCESS", matcher.group(2));
        assertEquals("test.subject.1", matcher.group(3));
        assertEquals("0", matcher.group(4));
        assertTrue(matcher.group(5), GrouperClientUtils.equals("aStem:aGroup2",
            matcher.group(5))
            || GrouperClientUtils.equals("aStem:aGroup3", matcher.group(5)));

        matcher = pattern.matcher(outputLines[3]);

        assertTrue(outputLines[3], matcher.matches());

        assertEquals("1", matcher.group(1));
        assertEquals("SUCCESS", matcher.group(2));
        assertEquals("test.subject.1", matcher.group(3));
        assertEquals("1", matcher.group(4));
        assertTrue(matcher.group(5), GrouperClientUtils.equals("aStem:aGroup2",
            matcher.group(5))
            || GrouperClientUtils.equals("aStem:aGroup3", matcher.group(5)));

        // #####################################################
        // run again, with params
        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=getGroupsWs --subjectIds=test.subject.0,test.subject.1 --memberFilter=Immediate",
                    " "));
        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLines[0], matcher.matches());

        assertEquals("0", matcher.group(1));
        assertEquals("SUCCESS", matcher.group(2));
        assertEquals("test.subject.0", matcher.group(3));
        assertEquals("0", matcher.group(4));
        assertTrue(matcher.group(5), GrouperClientUtils.equals("aStem:aGroup",
            matcher.group(5))
            || GrouperClientUtils.equals("aStem:aGroup2", matcher.group(5)));

        matcher = pattern.matcher(outputLines[1]);

        assertTrue(outputLines[1], matcher.matches());

        assertEquals("0", matcher.group(1));
        assertEquals("SUCCESS", matcher.group(2));
        assertEquals("test.subject.0", matcher.group(3));
        assertEquals("1", matcher.group(4));
        assertTrue(matcher.group(5), GrouperClientUtils.equals("aStem:aGroup",
            matcher.group(5))
            || GrouperClientUtils.equals("aStem:aGroup2", matcher.group(5)));

        matcher = pattern.matcher(outputLines[2]);

        assertTrue(outputLines[2], matcher.matches());

        assertEquals("1", matcher.group(1));
        assertEquals("SUCCESS", matcher.group(2));
        assertEquals("test.subject.1", matcher.group(3));
        assertEquals("0", matcher.group(4));
        assertTrue(matcher.group(5), GrouperClientUtils.equals("aStem:aGroup2",
            matcher.group(5))
            || GrouperClientUtils.equals("aStem:aGroup3", matcher.group(5)));

        matcher = pattern.matcher(outputLines[3]);

        assertTrue(outputLines[3], matcher.matches());

        assertEquals("1", matcher.group(1));
        assertEquals("SUCCESS", matcher.group(2));
        assertEquals("test.subject.1", matcher.group(3));
        assertEquals("1", matcher.group(4));
        assertTrue(matcher.group(5), GrouperClientUtils.equals("aStem:aGroup2",
            matcher.group(5))
            || GrouperClientUtils.equals("aStem:aGroup3", matcher.group(5)));

        assertTrue(GrouperClientWs.mostRecentRequest.contains("memberFilter")
            && GrouperClientWs.mostRecentRequest.contains("Immediate"));

      } finally {
        if (subjectIdsFile.exists()) {
          subjectIdsFile.delete();
        }
      }
    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testHasMemberNotFound() throws Exception {

    // make sure group exists
    GrouperSession grouperSession = GrouperSession.startRootSession();
    Group group = Group.saveGroup(grouperSession, "aStem:aGroup", null,
        "aStem:aGroup", "aGroup", null, null, true);

    // give permissions
    String wsUserLabel = GrouperClientUtils.propertiesValue(
        "grouperClient.webService.user.label", true);
    String wsUserString = GrouperClientUtils.propertiesValue(
        "grouperClient.webService." + wsUserLabel, true);
    Subject wsUser = SubjectFinder.findByIdOrIdentifier(wsUserString, true);

    group.grantPriv(wsUser, AccessPrivilege.READ, false);
    group.grantPriv(wsUser, AccessPrivilege.VIEW, false);

    // add some subjects
    group.addMember(SubjectTestHelper.SUBJ0, false);
    group.addMember(SubjectTestHelper.SUBJ1, false);

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=hasMemberWs --groupName=aStem:aGroup --subjectIds=rwjdfskjlwirwklj",
                  " "));
      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, GrouperUtil.length(outputLines));

      Pattern pattern = Pattern
          .compile("^Index (\\d+): success: T: code: ([A-Z_]+): (.+): (false|true)$");
      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("IS_NOT_MEMBER", matcher.group(2));
      assertEquals("rwjdfskjlwirwklj", matcher.group(3));
      assertEquals("false", matcher.group(4));

    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testHasMember() throws Exception {

    // make sure group exists
    GrouperSession grouperSession = GrouperSession.startRootSession();
    Group group = Group.saveGroup(grouperSession, "aStem:aGroup", null,
        "aStem:aGroup", "aGroup", null, null, true);

    // give permissions
    String wsUserLabel = GrouperClientUtils.propertiesValue(
        "grouperClient.webService.user.label", true);
    String wsUserString = GrouperClientUtils.propertiesValue(
        "grouperClient.webService." + wsUserLabel, true);
    Subject wsUser = SubjectFinder.findByIdOrIdentifier(wsUserString, true);

    group.grantPriv(wsUser, AccessPrivilege.READ, false);
    group.grantPriv(wsUser, AccessPrivilege.VIEW, false);

    // add some subjects for PIT
    group.addMember(SubjectTestHelper.SUBJ2, false);
    group.deleteMember(SubjectTestHelper.SUBJ2, false);
    Thread.sleep(100);
    Timestamp pointInTimeFrom = new Timestamp(new Date().getTime());
    Thread.sleep(100);

    group.addMember(SubjectTestHelper.SUBJ3, false);
    group.deleteMember(SubjectTestHelper.SUBJ3, false);

    // add some subjects
    group.addMember(SubjectTestHelper.SUBJ0, false);
    group.addMember(SubjectTestHelper.SUBJ1, false);

    // add some subjects for PIT
    group.addMember(SubjectTestHelper.SUBJ4, false);
    group.deleteMember(SubjectTestHelper.SUBJ4, false);
    Thread.sleep(100);
    Timestamp pointInTimeTo = new Timestamp(new Date().getTime());
    Thread.sleep(100);

    group.addMember(SubjectTestHelper.SUBJ5, false);
    group.deleteMember(SubjectTestHelper.SUBJ5, false);
    ChangeLogTempToEntity.convertRecords();

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=hasMemberWs --groupName=aStem:aGroup --subjectIds=test.subject.0,test.subject.1",
                  " "));
      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      Pattern pattern = Pattern
          .compile("^Index (\\d+): success: T: code: ([A-Z_]+): (.+): (false|true)$");
      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("IS_MEMBER", matcher.group(2));
      assertEquals("test.subject.0", matcher.group(3));
      assertEquals("true", matcher.group(4));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("IS_MEMBER", matcher.group(2));
      assertEquals("test.subject.1", matcher.group(3));
      assertEquals("true", matcher.group(4));

      // #####################################################
      // run with invalid args
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // test a command line template
      try {
        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=hasMemberWs --groupName=aStem:aGroup --subjectIds=test.subject.0,test.subject.1 --ousdfsdfate=${index}",
                    " "));
      } catch (Exception e) {
        assertTrue(e.getMessage(), e.getMessage().contains("ousdfsdfate"));
      }
      System.out.flush();

      System.setOut(systemOut);

      // #####################################################
      // run with custom template
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // test a command line template
      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=hasMemberWs --groupName=aStem:aGroup --subjectIdentifiers=id.test.subject.0,id.test.subject.1 --outputTemplate=${index}",
                  " "));

      System.out.flush();

      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      assertEquals("01", output);

      // #####################################################
      // run again, with field
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=hasMemberWs --groupName=aStem:aGroup --pennKeys=id.test.subject.0,id.test.subject.1 --fieldName=members",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("IS_MEMBER", matcher.group(2));
      assertEquals("test.subject.0", matcher.group(3));
      assertEquals("true", matcher.group(4));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("IS_MEMBER", matcher.group(2));
      assertEquals("test.subject.1", matcher.group(3));
      assertEquals("true", matcher.group(4));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("fieldName")
              && GrouperClientWs.mostRecentRequest.contains("members")
              && !GrouperClientWs.mostRecentRequest.contains("txType"));

      // #####################################################
      // run again, with uuid
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=hasMemberWs --groupUuid=" + group.getUuid() + " --pennKeys=id.test.subject.0,id.test.subject.1",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("IS_MEMBER", matcher.group(2));
      assertEquals("test.subject.0", matcher.group(3));
      assertEquals("true", matcher.group(4));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("IS_MEMBER", matcher.group(2));
      assertEquals("test.subject.1", matcher.group(3));
      assertEquals("true", matcher.group(4));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));


      // #####################################################
      // run again, with id index
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=hasMemberWs --groupIdIndex=" + group.getIdIndex() + " --pennKeys=id.test.subject.0,id.test.subject.1",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("IS_MEMBER", matcher.group(2));
      assertEquals("test.subject.0", matcher.group(3));
      assertEquals("true", matcher.group(4));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("IS_MEMBER", matcher.group(2));
      assertEquals("test.subject.1", matcher.group(3));
      assertEquals("true", matcher.group(4));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("idIndex"));

      // #####################################################
      // run again, with includeGroupDetail and includeSubjectDetail
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=hasMemberWs --groupName=aStem:aGroup --subjectIds=test.subject.0,test.subject.1 --includeGroupDetail=true --includeSubjectDetail=true",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("IS_MEMBER", matcher.group(2));
      assertEquals("test.subject.0", matcher.group(3));
      assertEquals("true", matcher.group(4));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("IS_MEMBER", matcher.group(2));
      assertEquals("test.subject.1", matcher.group(3));
      assertEquals("true", matcher.group(4));

      assertTrue(!GrouperClientWs.mostRecentRequest.contains("txType")
          && !GrouperClientWs.mostRecentRequest.contains("NONE")
          && GrouperClientWs.mostRecentRequest.contains("includeGroupDetail")
          && GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));

      // #####################################################
      // run again, with subject attributes
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=hasMemberWs --groupName=aStem:aGroup --subjectIds=test.subject.0,test.subject.1 --subjectAttributeNames=name --outputTemplate=${index}:$space$${wsHasMemberResult.wsSubject.getAttributeValue(0)}$newline$",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertTrue(outputLines[0], outputLines[0]
          .contains("my name is test.subject.0"));

      assertTrue(outputLines[1], outputLines[1]
          .contains("my name is test.subject.1"));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("\"name\""));
      assertTrue(GrouperClientWs.mostRecentResponse
          .contains("my name is test.subject.0"));

      // #####################################################
      // run again, with default subject source
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=hasMemberWs --groupName=aStem:aGroup --subjectIds=test.subject.0,test.subject.1 --defaultSubjectSource=jdbc",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("IS_MEMBER", matcher.group(2));
      assertEquals("test.subject.0", matcher.group(3));
      assertEquals("true", matcher.group(4));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("IS_MEMBER", matcher.group(2));
      assertEquals("test.subject.1", matcher.group(3));
      assertEquals("true", matcher.group(4));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("jdbc"));

      // #####################################################
      // run again, subjects ids coming from file
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      String subjectIdsFileName = "subjectIdsFile_"
          + GrouperClientUtils.uniqueId() + ".txt";
      File subjectIdsFile = new File(subjectIdsFileName);

      GrouperClientUtils.saveStringIntoFile(subjectIdsFile,
          "test.subject.0\ntest.subject.1");

      try {
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=hasMemberWs --groupName=aStem:aGroup --subjectIdsFile="
                + subjectIdsFileName, " "));
        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLines[0], matcher.matches());

        assertEquals("0", matcher.group(1));
        assertEquals("IS_MEMBER", matcher.group(2));
        assertEquals("test.subject.0", matcher.group(3));
        assertEquals("true", matcher.group(4));

        matcher = pattern.matcher(outputLines[1]);

        assertTrue(outputLines[1], matcher.matches());

        assertEquals("1", matcher.group(1));
        assertEquals("IS_MEMBER", matcher.group(2));
        assertEquals("test.subject.1", matcher.group(3));
        assertEquals("true", matcher.group(4));

        // #####################################################
        // run again, with params
        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=hasMemberWs --groupName=aStem:aGroup --subjectIds=test.subject.0,test.subject.1 --paramName0=whatever --paramValue0=someValue",
                    " "));
        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLines[0], matcher.matches());

        assertEquals("0", matcher.group(1));
        assertEquals("IS_MEMBER", matcher.group(2));
        assertEquals("test.subject.0", matcher.group(3));

        matcher = pattern.matcher(outputLines[1]);

        assertTrue(outputLines[1], matcher.matches());

        assertEquals("1", matcher.group(1));
        assertEquals("IS_MEMBER", matcher.group(2));
        assertEquals("test.subject.1", matcher.group(3));
        assertEquals("true", matcher.group(4));

        assertTrue(GrouperClientWs.mostRecentRequest.contains("whatever")
            && GrouperClientWs.mostRecentRequest.contains("someValue"));

        // #####################################################
        // run again, with memberFilter
        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=hasMemberWs --groupName=aStem:aGroup --subjectIds=test.subject.0,test.subject.1 --memberFilter=Immediate",
                    " "));
        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLines[0], matcher.matches());

        assertEquals("0", matcher.group(1));
        assertEquals("IS_MEMBER", matcher.group(2));
        assertEquals("test.subject.0", matcher.group(3));
        assertEquals("true", matcher.group(4));

        matcher = pattern.matcher(outputLines[1]);

        assertTrue(outputLines[1], matcher.matches());

        assertEquals("1", matcher.group(1));
        assertEquals("IS_MEMBER", matcher.group(2));
        assertEquals("test.subject.1", matcher.group(3));
        assertEquals("true", matcher.group(4));

        assertTrue(GrouperClientWs.mostRecentRequest.contains("memberFilter")
            && GrouperClientWs.mostRecentRequest.contains("Immediate"));


        // #####################################################
        // run again, with point in time params
        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        ArrayList<String> args = new ArrayList<String>();
        args.add("--operation=hasMemberWs");
        args.add("--groupName=aStem:aGroup");
        args.add("--subjectIds=test.subject.0,test.subject.1,test.subject.2,test.subject.3,test.subject.4,test.subject.5");
        args.add("--pointInTimeFrom=" + GrouperClientUtils.timestampToString(pointInTimeFrom));
        args.add("--pointInTimeTo=" + GrouperClientUtils.timestampToString(pointInTimeTo));
        GrouperClient.main(args.toArray(new String[0]));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        matcher = pattern.matcher(outputLines[0]);
        assertTrue(outputLines[0], matcher.matches());
        assertEquals("0", matcher.group(1));
        assertEquals("IS_MEMBER", matcher.group(2));
        assertEquals("test.subject.0", matcher.group(3));
        assertEquals("true", matcher.group(4));

        matcher = pattern.matcher(outputLines[1]);
        assertTrue(outputLines[1], matcher.matches());
        assertEquals("1", matcher.group(1));
        assertEquals("IS_MEMBER", matcher.group(2));
        assertEquals("test.subject.1", matcher.group(3));
        assertEquals("true", matcher.group(4));

        matcher = pattern.matcher(outputLines[2]);
        assertTrue(outputLines[2], matcher.matches());
        assertEquals("2", matcher.group(1));
        assertEquals("IS_NOT_MEMBER", matcher.group(2));
        assertEquals("test.subject.2", matcher.group(3));
        assertEquals("false", matcher.group(4));

        matcher = pattern.matcher(outputLines[3]);
        assertTrue(outputLines[3], matcher.matches());
        assertEquals("3", matcher.group(1));
        assertEquals("IS_MEMBER", matcher.group(2));
        assertEquals("test.subject.3", matcher.group(3));
        assertEquals("true", matcher.group(4));

        matcher = pattern.matcher(outputLines[4]);
        assertTrue(outputLines[4], matcher.matches());
        assertEquals("4", matcher.group(1));
        assertEquals("IS_MEMBER", matcher.group(2));
        assertEquals("test.subject.4", matcher.group(3));
        assertEquals("true", matcher.group(4));

        matcher = pattern.matcher(outputLines[5]);
        assertTrue(outputLines[5], matcher.matches());
        assertEquals("5", matcher.group(1));
        assertEquals("IS_NOT_MEMBER", matcher.group(2));
        assertEquals("test.subject.5", matcher.group(3));
        assertEquals("false", matcher.group(4));

      } finally {
        if (subjectIdsFile.exists()) {
          subjectIdsFile.delete();
        }
      }
    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testDeleteMember() throws Exception {

    // make sure group exists
    GrouperSession grouperSession = GrouperSession.startRootSession();
    Group group = Group.saveGroup(grouperSession, "aStem:aGroup", null,
        "aStem:aGroup", "aGroup", null, null, true);

    // give permissions
    String wsUserLabel = GrouperClientUtils.propertiesValue(
        "grouperClient.webService.user.label", true);
    String wsUserString = GrouperClientUtils.propertiesValue(
        "grouperClient.webService." + wsUserLabel, true);
    Subject wsUser = SubjectFinder.findByIdOrIdentifier(wsUserString, true);

    group.grantPriv(wsUser, AccessPrivilege.READ, false);
    group.grantPriv(wsUser, AccessPrivilege.VIEW, false);
    group.grantPriv(wsUser, AccessPrivilege.ADMIN, false);

    // add some subjects
    group.addMember(SubjectTestHelper.SUBJ0, false);
    group.addMember(SubjectTestHelper.SUBJ1, false);

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient.main(GrouperClientUtils.splitTrim(
                  "--operation=deleteMemberWs --groupName=aStem:aGroup --subjectIds=test.subject.0,test.subject.1",
                  " "));
      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      Pattern pattern = Pattern
          .compile("^Index (\\d+): success: T: code: ([A-Z_]+): (.*+)$");
      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("test.subject.0", matcher.group(3));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("SUCCESS", matcher.group(2));
      assertEquals("test.subject.1", matcher.group(3));

      // #####################################################
      // run again, should be already deleted
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils
              .splitTrim(
                  "--operation=deleteMemberWs --groupName=aStem:aGroup --pennIds=test.subject.0,test.subject.1",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS_WASNT_IMMEDIATE", matcher.group(2));
      assertEquals(outputLines[0], "test.subject.0", matcher.group(3));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("SUCCESS_WASNT_IMMEDIATE", matcher.group(2));
      assertEquals("test.subject.1", matcher.group(3));


      // #####################################################
      // run again, should be already deleted
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils
              .splitTrim(
                  "--operation=deleteMemberWs --groupIdIndex=" + group.getIdIndex() + " --pennIds=test.subject.0,test.subject.1",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS_WASNT_IMMEDIATE", matcher.group(2));
      assertEquals(outputLines[0], "test.subject.0", matcher.group(3));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("SUCCESS_WASNT_IMMEDIATE", matcher.group(2));
      assertEquals("test.subject.1", matcher.group(3));

      // #####################################################
      // run again, with uuid
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils
              .splitTrim(
                  "--operation=deleteMemberWs --groupUuid=" + group.getUuid() + " --pennIds=test.subject.0,test.subject.1",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS_WASNT_IMMEDIATE", matcher.group(2));
      assertEquals(outputLines[0], "test.subject.0", matcher.group(3));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("SUCCESS_WASNT_IMMEDIATE", matcher.group(2));
      assertEquals("test.subject.1", matcher.group(3));

      // #####################################################
      // run with invalid args
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // test a command line template
      try {
        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=deleteMemberWs --groupName=aStem:aGroup --subjectIds=test.subject.0,test.subject.1 --ousdfsdfate=${index}",
                    " "));
      } catch (Exception e) {
        assertTrue(e.getMessage(), e.getMessage().contains("ousdfsdfate"));
      }
      System.out.flush();

      System.setOut(systemOut);

      // #####################################################
      // run with custom template
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // test a command line template
      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=deleteMemberWs --groupName=aStem:aGroup --subjectIdentifiers=id.test.subject.0,id.test.subject.1 --outputTemplate=${index}",
                  " "));

      System.out.flush();

      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      assertEquals("01", output);

      // #####################################################
      // run again, with field
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=deleteMemberWs --groupName=aStem:aGroup --pennKeys=id.test.subject.0,id.test.subject.1 --fieldName=members",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS_WASNT_IMMEDIATE", matcher.group(2));
      assertEquals("test.subject.0", matcher.group(3));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("SUCCESS_WASNT_IMMEDIATE", matcher.group(2));
      assertEquals("test.subject.1", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("fieldName")
              && GrouperClientWs.mostRecentRequest.contains("members")
              && !GrouperClientWs.mostRecentRequest.contains("txType"));

      // #####################################################
      // run again, with txType
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=deleteMemberWs --groupName=aStem:aGroup --subjectIds=test.subject.0,test.subject.1 --txType=NONE",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS_WASNT_IMMEDIATE", matcher.group(2));
      assertEquals("test.subject.0", matcher.group(3));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("SUCCESS_WASNT_IMMEDIATE", matcher.group(2));
      assertEquals("test.subject.1", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName")
              && !GrouperClientWs.mostRecentRequest.contains("members")
              && GrouperClientWs.mostRecentRequest.contains("txType")
              && GrouperClientWs.mostRecentRequest.contains("NONE")
              && !GrouperClientWs.mostRecentRequest
                  .contains("includeGroupDetail")
              && !GrouperClientWs.mostRecentRequest
                  .contains("includeSubjectDetail")
              && !GrouperClientWs.mostRecentRequest
                  .contains("includeGroupDetail")
              && !GrouperClientWs.mostRecentRequest
                  .contains("includeSubjectDetail"));

      // #####################################################
      // run again, with includeGroupDetail and includeSubjectDetail
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=deleteMemberWs --groupName=aStem:aGroup --subjectIds=test.subject.0,test.subject.1 --includeGroupDetail=true --includeSubjectDetail=true",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS_WASNT_IMMEDIATE", matcher.group(2));
      assertEquals("test.subject.0", matcher.group(3));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("SUCCESS_WASNT_IMMEDIATE", matcher.group(2));
      assertEquals("test.subject.1", matcher.group(3));

      assertTrue(!GrouperClientWs.mostRecentRequest.contains("txType")
          && !GrouperClientWs.mostRecentRequest.contains("NONE")
          && GrouperClientWs.mostRecentRequest.contains("includeGroupDetail")
          && GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));

      // #####################################################
      // run again, with subject attributes
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=deleteMemberWs --groupName=aStem:aGroup --subjectIds=test.subject.0,test.subject.1 --subjectAttributeNames=name --outputTemplate=${index}:$space$${wsDeleteMemberResult.wsSubject.getAttributeValue(0)}$newline$",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertTrue(outputLines[0], outputLines[0]
          .contains("my name is test.subject.0"));

      assertTrue(outputLines[1], outputLines[1]
          .contains("my name is test.subject.1"));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("\"name\""));
      assertTrue(GrouperClientWs.mostRecentResponse
          .contains("my name is test.subject.0"));

      // #####################################################
      // run again, with default subject source
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=deleteMemberWs --groupName=aStem:aGroup --subjectIds=test.subject.0,test.subject.1 --defaultSubjectSource=jdbc",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS_WASNT_IMMEDIATE", matcher.group(2));
      assertEquals("test.subject.0", matcher.group(3));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals("1", matcher.group(1));
      assertEquals("SUCCESS_WASNT_IMMEDIATE", matcher.group(2));
      assertEquals("test.subject.1", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("jdbc"));

      // #####################################################
      // run again, subjects ids coming from file
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      String subjectIdsFileName = "subjectIdsFile_"
          + GrouperClientUtils.uniqueId() + ".txt";
      File subjectIdsFile = new File(subjectIdsFileName);

      GrouperClientUtils.saveStringIntoFile(subjectIdsFile,
          "test.subject.0\ntest.subject.1");

      try {
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=deleteMemberWs --groupName=aStem:aGroup --subjectIdsFile="
                + subjectIdsFileName, " "));
        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLines[0], matcher.matches());

        assertEquals("0", matcher.group(1));
        assertEquals("SUCCESS_WASNT_IMMEDIATE", matcher.group(2));
        assertEquals("test.subject.0", matcher.group(3));

        matcher = pattern.matcher(outputLines[1]);

        assertTrue(outputLines[1], matcher.matches());

        assertEquals("1", matcher.group(1));
        assertEquals("SUCCESS_WASNT_IMMEDIATE", matcher.group(2));
        assertEquals("test.subject.1", matcher.group(3));

        // #####################################################
        // run again, with params
        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=deleteMemberWs --groupName=aStem:aGroup --subjectIds=test.subject.0,test.subject.1 --paramName0=whatever --paramValue0=someValue",
                    " "));
        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLines[0], matcher.matches());

        assertEquals("0", matcher.group(1));
        assertEquals("SUCCESS_WASNT_IMMEDIATE", matcher.group(2));
        assertEquals("test.subject.0", matcher.group(3));

        matcher = pattern.matcher(outputLines[1]);

        assertTrue(outputLines[1], matcher.matches());

        assertEquals("1", matcher.group(1));
        assertEquals("SUCCESS_WASNT_IMMEDIATE", matcher.group(2));
        assertEquals("test.subject.1", matcher.group(3));

        assertTrue(GrouperClientWs.mostRecentRequest.contains("whatever")
            && GrouperClientWs.mostRecentRequest.contains("someValue"));

      } finally {
        if (subjectIdsFile.exists()) {
          subjectIdsFile.delete();
        }
      }
    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testMemberChangeSubject() throws Exception {

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=memberChangeSubjectWs --oldSubjectId=test.subject.0 --newSubjectId=test.subject.1 --actAsSubjectId=GrouperSystem",
                  " "));
      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      Pattern pattern = Pattern
          .compile("^Success: T: code: ([A-Z_]+): oldSubject: (.+), newSubject: (.+)$");
      Matcher matcher = pattern.matcher(outputLines[0]);

      assertEquals(1, outputLines.length);
      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS", matcher.group(1));
      assertEquals("test.subject.0", matcher.group(2));
      assertEquals("test.subject.1", matcher.group(3));

      // #####################################################
      // run again, should be already moved
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // this should fail with member not found
      try {
        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=memberChangeSubjectWs --oldSubjectId=test.subject.0 --newSubjectId=test.subject.1 --actAsSubjectId=GrouperSystem",
                    " "));
        fail("Should not get here");
      } catch (GcWebServiceError gwse) {
        WsMemberChangeSubjectResults wsMemberChangeSubjectResults = (WsMemberChangeSubjectResults) gwse
            .getContainerResponseObject();
        assertEquals("PROBLEM_WITH_CHANGE", wsMemberChangeSubjectResults
            .getResultMetadata().getResultCode());
      }

      // #####################################################
      // run with invalid args
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // test a command line template
      try {
        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=memberChangeSubjectWs --oldSubjectId=test.subject.0 --newSubjectId=test.subject.1 --actAsSubjectId=GrouperSystem --ousdfsdfate=${index}",
                    " "));
      } catch (Exception e) {
        assertTrue(e.getMessage(), e.getMessage().contains("ousdfsdfate"));
      }
      System.out.flush();

      System.setOut(systemOut);

      // #####################################################
      // run with custom template and pennkeys
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // test a command line template
      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=memberChangeSubjectWs --oldPennKey=id.test.subject.1 --newPennKey=id.test.subject.0 --actAsPennId=GrouperSystem --outputTemplate=${index}",
                  " "));

      System.out.flush();

      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      assertEquals("0", output);

      // #####################################################
      // run again, with delete old member
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=memberChangeSubjectWs --oldSubjectIdentifier=id.test.subject.0 --newSubjectIdentifier=id.test.subject.1 --actAsSubjectId=GrouperSystem --deleteOldMember=false",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertEquals(1, outputLines.length);
      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS", matcher.group(1));
      assertEquals("test.subject.0", matcher.group(2));
      assertEquals("test.subject.1", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("deleteOldMember"));

      // #####################################################
      // run again, with includeSubjectDetail
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=memberChangeSubjectWs --oldSubjectId=test.subject.1 --newSubjectId=test.subject.0 --actAsSubjectId=GrouperSystem --includeSubjectDetail=true",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertEquals(1, outputLines.length);
      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS", matcher.group(1));
      assertEquals("test.subject.1", matcher.group(2));
      assertEquals("test.subject.0", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest
          .contains("includeSubjectDetail"));

      // #####################################################
      // run again, with subject attributes
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=memberChangeSubjectWs --oldSubjectId=test.subject.0 --newSubjectId=test.subject.1 --actAsSubjectId=GrouperSystem --subjectAttributeNames=name --outputTemplate=${index}:$space$${wsSubjectOld.getAttributeValue(0)}$newline$",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertTrue(outputLines[0], outputLines[0]
          .contains("my name is test.subject.0"));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("\"name\""));
      assertTrue(GrouperClientWs.mostRecentResponse
          .contains("my name is test.subject.0"));

      // #####################################################
      // run again, with params
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=memberChangeSubjectWs --oldSubjectId=test.subject.1 --newSubjectId=test.subject.0 --actAsSubjectId=GrouperSystem --paramName0=whatever --paramValue0=someValue",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertEquals(1, outputLines.length);
      assertTrue(outputLines[0], matcher.matches());

      assertEquals("SUCCESS", matcher.group(1));
      assertEquals("test.subject.1", matcher.group(2));
      assertEquals("test.subject.0", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("whatever")
          && GrouperClientWs.mostRecentRequest.contains("someValue"));

    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testSendFile() throws Exception {

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    File file = new File("testSendFile.txt");
    file.deleteOnExit();

    try {
      String contents = "{\"WsRestAddMemberRequest\":"
          + "\"wsGroupLookup\":{\"groupName\":\"aStem:aGroup\"},"
          + "\"subjectLookups\":{\"WsSubjectLookup\":"
          + "{\"subjectId\":\"test.subject.0\"}}}";
      GrouperClientUtils.saveStringIntoFile(file, contents);

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=sendFile --fileName=testSendFile.txt --urlSuffix=groups/aStem:aGroup/members",
                  " "));
      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      assertTrue(output.contains("resultCode\":\"SUCCESS")
          && output.contains("        "));

      // #####################################################
      // run again, with contents, and no formatting
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=sendFile --fileContents="
                      + contents
                      + " --urlSuffix=groups/aStem:aGroup/members --indentOutput=false",
                  " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      assertTrue(output.contains("resultCode\":\"SUCCESS")
          && !output.contains("        "));

    } finally {
      System.setOut(systemOut);
      file.delete();
    }

  }

  /**
   * @throws Exception
   */
  public void testFindGroups() throws Exception {

    // set some stuff to query
    GrouperSession grouperSession = GrouperSession.startRootSession();
    Group group = GroupFinder.findByName(grouperSession, "aStem:aGroup", true);

    GroupType groupType = GroupTypeFinder.find("aType", true);
    group.addType(groupType, false);
    group.setAttribute("attr_1", "something");
    group.store();

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=findGroupsWs --queryFilterType=FIND_BY_GROUP_NAME_APPROXIMATE --groupName=aStem:aGroup",
                  " "));
      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      Pattern pattern = Pattern
          .compile("^Index (\\d+): name: (.+), displayName: (.+)$");
      Matcher matcher = pattern.matcher(outputLines[0]);

      assertEquals(output, 1, outputLines.length);
      assertTrue(outputLines[0], matcher.matches());

      assertEquals(output, "0", matcher.group(1));
      assertEquals(output, "aStem:aGroup", matcher.group(2));
      assertEquals(output, "aStem:aGroup", matcher.group(3));

      // #####################################################
      // filter by stem which doesnt exist, should be success

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
        .main(GrouperClientUtils
            .splitTrim(
                "--operation=findGroupsWs --queryFilterType=FIND_BY_STEM_NAME --stemName=a:b:doesntExist",
                " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(output, 0, GrouperUtil.length(outputLines));

      System.out.flush();

      System.setOut(systemOut);


      // #####################################################
      // run with invalid args
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // test a command line template
      try {
        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=findGroupsWs --queryFilterType=FIND_BY_GROUP_NAME_APPROXIMATE --groupName=aStem:aGroup --ousdfsdfate=${index}",
                    " "));
      } catch (Exception e) {
        assertTrue(e.getMessage(), e.getMessage().contains("ousdfsdfate"));
      }
      System.out.flush();

      System.setOut(systemOut);

      // #####################################################
      // run with custom template
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // test a command line template
      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=findGroupsWs --queryFilterType=FIND_BY_GROUP_NAME_APPROXIMATE --groupName=aStem:aGroup --outputTemplate=${index}",
                  " "));

      System.out.flush();

      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      assertEquals("0", output);

      // #####################################################
      // run again, with includeGroupDetail
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=findGroupsWs  --queryFilterType=FIND_BY_GROUP_NAME_APPROXIMATE --groupName=aStem:aGroup --includeGroupDetail=true",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertEquals(output, 1, outputLines.length);
      assertTrue(outputLines[0], matcher.matches());

      assertEquals(output, "0", matcher.group(1));
      assertEquals(output, "aStem:aGroup", matcher.group(2));
      assertEquals(output, "aStem:aGroup", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest
          .contains("includeGroupDetail"));

      // #####################################################
      // run again, with params
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=findGroupsWs --queryFilterType=FIND_BY_GROUP_NAME_APPROXIMATE --groupName=aStem:aGroup --paramName0=whatever --paramValue0=someValue",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertEquals(output, 1, outputLines.length);
      assertTrue(outputLines[0], matcher.matches());

      assertEquals(output, "0", matcher.group(1));
      assertEquals(output, "aStem:aGroup", matcher.group(2));
      assertEquals(output, "aStem:aGroup", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("whatever")
          && GrouperClientWs.mostRecentRequest.contains("someValue"));

      // #####################################################
      // run again, with uuid
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=findGroupsWs --queryFilterType=FIND_BY_GROUP_UUID --groupUuid=abc",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertTrue(output, GrouperClientUtils.isBlank(output));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("groupUuid")
          && GrouperClientWs.mostRecentRequest.contains("abc"));

      // #####################################################
      // run again, with stem
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=findGroupsWs --queryFilterType=FIND_BY_GROUP_NAME_APPROXIMATE --groupName=aStem:aGroup --stemName=aStem",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertEquals(output, 1, outputLines.length);
      assertTrue(outputLines[0], matcher.matches());

      assertEquals(output, "0", matcher.group(1));
      assertEquals(output, "aStem:aGroup", matcher.group(2));
      assertEquals(output, "aStem:aGroup", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("stemName")
          && GrouperClientWs.mostRecentRequest.contains("\"aStem\""));

      // #####################################################
      // run again, with group type
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=findGroupsWs --queryFilterType=FIND_BY_TYPE --groupTypeName=aType",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertEquals(output, 1, outputLines.length);
      assertTrue(outputLines[0], matcher.matches());

      assertEquals(output, "0", matcher.group(1));
      assertEquals(output, "aStem:aGroup", matcher.group(2));
      assertEquals(output, "aStem:aGroup", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("FIND_BY_TYPE")
          && GrouperClientWs.mostRecentRequest.contains("groupTypeName")
          && GrouperClientWs.mostRecentRequest.contains("aType"));

      // #####################################################
      // run again, with group attribute
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=findGroupsWs --queryFilterType=FIND_BY_EXACT_ATTRIBUTE --groupAttributeName=attr_1 --groupAttributeValue=something",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertEquals(output, 1, outputLines.length);
      assertTrue(outputLines[0], matcher.matches());

      assertEquals(output, "0", matcher.group(1));
      assertEquals(output, "aStem:aGroup", matcher.group(2));
      assertEquals(output, "aStem:aGroup", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest
          .contains("FIND_BY_EXACT_ATTRIBUTE")
          && GrouperClientWs.mostRecentRequest.contains("groupAttributeName")
          && GrouperClientWs.mostRecentRequest.contains("attr_1"));

      // #####################################################
      // run again, with sub filters
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=findGroupsWs --queryFilterType=OR --queryFilterType0=OR --queryFilterType00=FIND_BY_GROUP_NAME_APPROXIMATE --groupName00=aStem:aGroup --queryFilterType01=FIND_BY_GROUP_NAME_APPROXIMATE --groupName01=aStem:aGroup --queryFilterType1=FIND_BY_GROUP_NAME_APPROXIMATE --groupName1=aStem:aGroup",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertEquals(output, 1, outputLines.length);
      assertTrue(outputLines[0], matcher.matches());

      assertEquals(output, "0", matcher.group(1));
      assertEquals(output, "aStem:aGroup", matcher.group(2));
      assertEquals(output, "aStem:aGroup", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("OR")
          && GrouperClientWs.mostRecentRequest
              .contains("FIND_BY_GROUP_NAME_APPROXIMATE"));

      // #####################################################
      // run again, search by names

      Group group1 = Group.saveGroup(grouperSession, "aStem:aGroup1", null, "aStem:aGroup1", null, null, null, true);

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=findGroupsWs --groupNames=aStem:aGroup,aStem:aGroup1",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(output, 2, outputLines.length);
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(output, "0", matcher.group(1));
      assertEquals(output, "aStem:aGroup", matcher.group(2));
      assertEquals(output, "aStem:aGroup", matcher.group(3));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals(output, "1", matcher.group(1));
      assertEquals(output, "aStem:aGroup1", matcher.group(2));
      assertEquals(output, "aStem:aGroup1", matcher.group(3));

      // #####################################################
      // run again, search by id indexes

      group1 = Group.saveGroup(grouperSession, "aStem:aGroup1", null, "aStem:aGroup1", null, null, null, true);

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=findGroupsWs --groupIdIndexes=" + group1.getIdIndex(),
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(output, 1, outputLines.length);
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(output, "0", matcher.group(1));
      assertEquals(output, "aStem:aGroup1", matcher.group(2));
      assertEquals(output, "aStem:aGroup1", matcher.group(3));


      // #####################################################
      // run again, search by uuids

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=findGroupsWs --groupUuids=" + group.getId() + "," + group1.getId(),
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(output, 2, outputLines.length);
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(output, "0", matcher.group(1));
      assertEquals(output, "aStem:aGroup", matcher.group(2));
      assertEquals(output, "aStem:aGroup", matcher.group(3));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals(output, "1", matcher.group(1));
      assertEquals(output, "aStem:aGroup1", matcher.group(2));
      assertEquals(output, "aStem:aGroup1", matcher.group(3));

      // #####################################################
      // run again, sort and page

      Group group2 = Group.saveGroup(grouperSession, "aStem:aGroup2", null, "aStem:aGroup2", null, null, null, true);

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=findGroupsWs --queryFilterType=FIND_BY_GROUP_NAME_APPROXIMATE --groupName=aStem:a% --stemName=aStem --ascending=T --sortString=name --pageNumber=1 --pageSize=2",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(output, 2, outputLines.length);
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(output, "0", matcher.group(1));
      assertEquals(output, "aStem:aGroup", matcher.group(2));
      assertEquals(output, "aStem:aGroup", matcher.group(3));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals(output, "1", matcher.group(1));
      assertEquals(output, "aStem:aGroup1", matcher.group(2));
      assertEquals(output, "aStem:aGroup1", matcher.group(3));

      // #####################################################
      // run again, sort and page

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=findGroupsWs --queryFilterType=FIND_BY_GROUP_NAME_APPROXIMATE --groupName=aStem:a% --stemName=aStem --ascending=T --sortString=name --pageNumber=1 --pageSize=2",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(output, 2, outputLines.length);
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(output, "0", matcher.group(1));
      assertEquals(output, "aStem:aGroup", matcher.group(2));
      assertEquals(output, "aStem:aGroup", matcher.group(3));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals(output, "1", matcher.group(1));
      assertEquals(output, "aStem:aGroup1", matcher.group(2));
      assertEquals(output, "aStem:aGroup1", matcher.group(3));


      // #####################################################
      // run again, sort and page

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=findGroupsWs --queryFilterType=FIND_BY_STEM_NAME --stemName=aStem --ascending=T --sortString=name --pageNumber=2 --pageSize=2",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(output, 1, outputLines.length);
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(output, "0", matcher.group(1));
      assertEquals(output, "aStem:aGroup2", matcher.group(2));
      assertEquals(output, "aStem:aGroup2", matcher.group(3));

      // #####################################################
      // run again, with typeOfGroup = group
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=findGroupsWs --queryFilterType=FIND_BY_GROUP_NAME_APPROXIMATE --groupName=aStem:aGroup --stemName=aStem --typeOfGroups=group",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertEquals(output, 3, outputLines.length);
      assertTrue(outputLines[0], matcher.matches());

      assertEquals(output, "0", matcher.group(1));
      assertEquals(output, "aStem:aGroup", matcher.group(2));
      assertEquals(output, "aStem:aGroup", matcher.group(3));

      matcher = pattern.matcher(outputLines[1]);
      assertTrue(outputLines[1], matcher.matches());

      assertEquals(output, "1", matcher.group(1));
      assertEquals(output, "aStem:aGroup1", matcher.group(2));
      assertEquals(output, "aStem:aGroup1", matcher.group(3));

      matcher = pattern.matcher(outputLines[2]);
      assertTrue(outputLines[2], matcher.matches());

      assertEquals(output, "2", matcher.group(1));
      assertEquals(output, "aStem:aGroup2", matcher.group(2));
      assertEquals(output, "aStem:aGroup2", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("typeOfGroups")
          && GrouperClientWs.mostRecentRequest.contains("\"group\""));

      // #####################################################
      // run again, with typeOfGroup = role
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=findGroupsWs --queryFilterType=FIND_BY_GROUP_NAME_APPROXIMATE --groupName=aStem:aGroup --stemName=aStem --typeOfGroups=role",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(output, 0, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("typeOfGroups")
          && GrouperClientWs.mostRecentRequest.contains("\"role\""));



    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testFindStems() throws Exception {

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=findStemsWs --stemQueryFilterType=FIND_BY_STEM_NAME --stemName=aStem",
                  " "));
      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      Pattern pattern = Pattern
          .compile("^Index (\\d+): name: (.+), displayName: (.+)$");
      Matcher matcher = pattern.matcher(outputLines[0]);

      assertEquals(output, 1, outputLines.length);
      assertTrue(outputLines[0], matcher.matches());

      assertEquals(output, "0", matcher.group(1));
      assertEquals(output, "aStem", matcher.group(2));
      assertEquals(output, "aStem", matcher.group(3));

      // #####################################################
      // run with invalid args
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // test a command line template
      try {
        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=findStemsWs --stemQueryFilterType=FIND_BY_STEM_NAME --groupName=aStem:aGroup --ousdfsdfate=${index}",
                    " "));
      } catch (Exception e) {
        assertTrue(e.getMessage(), e.getMessage().contains("ousdfsdfate"));
      }
      System.out.flush();

      System.setOut(systemOut);

      // #####################################################
      // run with custom template
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // test a command line template
      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=findStemsWs --stemQueryFilterType=FIND_BY_STEM_NAME --stemName=aStem --outputTemplate=${index}",
                  " "));

      System.out.flush();

      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      assertEquals("0", output);

      // #####################################################
      // run again, with parentStemScope
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=findStemsWs  --stemQueryFilterType=FIND_BY_PARENT_STEM_NAME --parentStemName=aStem --parentStemNameScope=ALL_IN_SUBTREE",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertEquals(output, 1, outputLines.length);
      assertTrue(outputLines[0], matcher.matches());

      assertEquals(output, "0", matcher.group(1));
      assertEquals(output, "aStem:aStem0", matcher.group(2));
      assertEquals(output, "aStem:aStem0", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("parentStemName")
              && GrouperClientWs.mostRecentRequest
                  .contains("parentStemNameScope"));

      // #####################################################
      // run again, with params
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=findStemsWs --stemQueryFilterType=FIND_BY_STEM_NAME --stemName=aStem --paramName0=whatever --paramValue0=someValue",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertEquals(output, 1, outputLines.length);
      assertTrue(outputLines[0], matcher.matches());

      assertEquals(output, "0", matcher.group(1));
      assertEquals(output, "aStem", matcher.group(2));
      assertEquals(output, "aStem", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("whatever")
          && GrouperClientWs.mostRecentRequest.contains("someValue"));

      // #####################################################
      // run again, with uuid
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=findStemsWs --stemQueryFilterType=FIND_BY_STEM_UUID --stemUuid=abc",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertTrue(output, GrouperClientUtils.isBlank(output));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("stemUuid")
          && GrouperClientWs.mostRecentRequest.contains("abc"));

      // #####################################################
      // run again, with stem attribute
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=findStemsWs --stemQueryFilterType=FIND_BY_APPROXIMATE_ATTRIBUTE --stemAttributeName=name --stemAttributeValue=aStem",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertEquals(output, 2, outputLines.length);
      assertTrue(outputLines[0], matcher.matches());

      assertEquals(output, "0", matcher.group(1));
      assertEquals(output, "aStem", matcher.group(2));
      assertEquals(output, "aStem", matcher.group(3));

      matcher = pattern.matcher(outputLines[1]);
      assertTrue(outputLines[1], matcher.matches());

      assertEquals(output, "1", matcher.group(1));
      assertEquals(output, "aStem:aStem0", matcher.group(2));
      assertEquals(output, "aStem:aStem0", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest
          .contains("FIND_BY_APPROXIMATE_ATTRIBUTE")
          && GrouperClientWs.mostRecentRequest.contains("stemAttributeName")
          && GrouperClientWs.mostRecentRequest.contains("aStem"));

      // #####################################################
      // run again, with sub filters
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=findStemsWs --stemQueryFilterType=OR --stemQueryFilterType0=OR --stemQueryFilterType00=FIND_BY_STEM_NAME --stemName00=aStem --stemQueryFilterType01=FIND_BY_STEM_NAME --stemName01=aStem --stemQueryFilterType1=FIND_BY_STEM_NAME --stemName1=aStem",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertEquals(output, 1, outputLines.length);
      assertTrue(outputLines[0], matcher.matches());

      assertEquals(output, "0", matcher.group(1));
      assertEquals(output, "aStem", matcher.group(2));
      assertEquals(output, "aStem", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("OR")
          && GrouperClientWs.mostRecentRequest.contains("FIND_BY_STEM_NAME"));

      // #####################################################
      // run again, search by names
      GrouperSession grouperSession = GrouperSession.startRootSession();
      Stem aStem = StemFinder.findByName(grouperSession, "aStem", true);
      Stem aStem0 = StemFinder.findByName(grouperSession, "aStem:aStem0", true);

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=findStemsWs --stemNames=aStem,aStem:aStem0",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(output, 2, outputLines.length);
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(output, "0", matcher.group(1));
      assertEquals(output, "aStem", matcher.group(2));
      assertEquals(output, "aStem", matcher.group(3));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals(output, "1", matcher.group(1));
      assertEquals(output, "aStem:aStem0", matcher.group(2));
      assertEquals(output, "aStem:aStem0", matcher.group(3));

      // #####################################################
      // run again, search by id indexes

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=findStemsWs --stemIdIndexes=" + aStem.getIdIndex(),
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(output, 1, outputLines.length);
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(output, "0", matcher.group(1));
      assertEquals(output, "aStem", matcher.group(2));
      assertEquals(output, "aStem", matcher.group(3));

      // #####################################################
      // run again, search by uuids

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=findStemsWs --stemUuids=" + aStem.getUuid() + "," + aStem0.getUuid(),
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(output, 2, outputLines.length);
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(output, "0", matcher.group(1));
      assertEquals(output, "aStem", matcher.group(2));
      assertEquals(output, "aStem", matcher.group(3));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals(output, "1", matcher.group(1));
      assertEquals(output, "aStem:aStem0", matcher.group(2));
      assertEquals(output, "aStem:aStem0", matcher.group(3));

      // #####################################################
      // run again, sort and page

      new StemSave(grouperSession).assignName("aStem:aStem1").save();
      new StemSave(grouperSession).assignName("aStem:aStem2").save();


      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=findStemsWs --stemQueryFilterType=FIND_BY_STEM_NAME_APPROXIMATE --stemName=aStem:a% --parentStemName=aStem  --ascending=T --sortString=name --pageNumber=1 --pageSize=2",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(output, 2, outputLines.length);
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(output, "0", matcher.group(1));
      assertEquals(output, "aStem:aStem0", matcher.group(2));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals(output, "1", matcher.group(1));
      assertEquals(output, "aStem:aStem1", matcher.group(2));


      // #####################################################
      // run again, sort and page

      new StemSave(grouperSession).assignName("aStem:aStem1").save();
      new StemSave(grouperSession).assignName("aStem:aStem2").save();


      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=findStemsWs --stemQueryFilterType=FIND_BY_PARENT_STEM_NAME --parentStemName=aStem  --ascending=T --sortString=name --pageNumber=2 --pageSize=2",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(output, 1, outputLines.length);
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(output, "0", matcher.group(1));
      assertEquals(output, "aStem:aStem2", matcher.group(2));



    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * try get members with a slash
   * Note: for this test to work, you need this in tomcat start:
   * -Dorg.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH=true
   * @throws Exception
   */
  public void testGetMembersSlash() throws Exception {
    // make sure group exists
    GrouperSession grouperSession = GrouperSession.startRootSession();
    Group group = Group.saveGroup(grouperSession, "aStem:aGroup/1", null,
        "aStem:aGroup/1", "aGroup", null, null, true);

    // give permissions
    String wsUserLabel = GrouperClientUtils.propertiesValue(
        "grouperClient.webService.user.label", true);
    String wsUserString = GrouperClientUtils.propertiesValue(
        "grouperClient.webService." + wsUserLabel, true);
    Subject wsUser = SubjectFinder.findByIdOrIdentifier(wsUserString, true);

    group.grantPriv(wsUser, AccessPrivilege.READ, false);
    group.grantPriv(wsUser, AccessPrivilege.VIEW, false);
    group.grantPriv(wsUser, AccessPrivilege.ADMIN, false);

    // add some subjects
    //group.addMember(SubjectTestHelper.SUBJ0, false);

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      //add member

      GrouperClient.main(GrouperClientUtils.splitTrim(
              "--operation=addMemberWs --groupName=aStem:aGroup/1 --subjectIds=test.subject.0 --outputTemplate=Index${index}:success:${resultMetadata.success}:code:${resultMetadata.resultCode}:${wsSubject.id}:${wsAddMemberResults.wsGroupAssigned.name}$newline$${index}",
              " "));
      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      //match this: Index0:success:T:code:SUCCESS:test.subject.0:aStem:aGroup/1
      Pattern pattern = Pattern
          .compile("^Index(\\d+):success:T:code:([A-Z_]+?):(.+?):(.*+)$");
      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS", matcher.group(2));
      assertEquals(outputLines[0], "test.subject.0", matcher.group(3));
      assertEquals(outputLines[0], "aStem:aGroup/1", matcher.group(4));


      //get members
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getMembersWs --groupNames=aStem:aGroup/1",
          " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: ^GroupIndex (\d+)\: success\: ([TF])\: code: ([A-Z_]+)\: group\:
      // (.*)\: subjectIndex\: (\d+)\: (.*)$
      pattern = Pattern
          .compile("^GroupIndex (\\d+)\\: success\\: ([TF])\\: code: ([A-Z_]+)\\: group\\: (.*)\\: subjectIndex\\: (\\d+)\\: (.*)$");
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "T", matcher.group(2));
      assertEquals(outputLines[0], "SUCCESS", matcher.group(3));
      assertEquals(outputLines[0], "aStem:aGroup/1", matcher.group(4));
      assertEquals(outputLines[0], "0", matcher.group(5));
      String subjectId = matcher.group(6);
      assertTrue(outputLines[0], GrouperClientUtils.equals("test.subject.0",
          subjectId));
    } finally {
      System.setOut(systemOut);
    }
  }

  /**
   * @throws Exception
   */
  public void testGetMembers() throws Exception {

    // make sure group exists
    GrouperSession grouperSession = GrouperSession.startRootSession();
    Group group = Group.saveGroup(grouperSession, "aStem:aGroup", null,
        "aStem:aGroup", "aGroup", null, null, true);
    Group group2 = Group.saveGroup(grouperSession, "aStem:aGroup2", null,
        "aStem:aGroup2", "aGroup2", null, null, true);

    // give permissions
    String wsUserLabel = GrouperClientUtils.propertiesValue(
        "grouperClient.webService.user.label", true);
    String wsUserString = GrouperClientUtils.propertiesValue(
        "grouperClient.webService." + wsUserLabel, true);
    Subject wsUser = SubjectFinder.findByIdOrIdentifier(wsUserString, true);

    group.grantPriv(wsUser, AccessPrivilege.READ, false);
    group.grantPriv(wsUser, AccessPrivilege.VIEW, false);
    group2.grantPriv(wsUser, AccessPrivilege.READ, false);
    group2.grantPriv(wsUser, AccessPrivilege.VIEW, false);

    // add some subjects for PIT
    group.addMember(SubjectTestHelper.SUBJ4, false);
    group.deleteMember(SubjectTestHelper.SUBJ4, false);
    Thread.sleep(100);
    Timestamp pointInTimeFrom = new Timestamp(new Date().getTime());
    Thread.sleep(100);

    group.addMember(SubjectTestHelper.SUBJ5, false);
    group.deleteMember(SubjectTestHelper.SUBJ5, false);

    // add some subjects
    group.addMember(SubjectTestHelper.SUBJ0, false);
    group.addMember(SubjectTestHelper.SUBJ1, false);
    group2.addMember(SubjectTestHelper.SUBJ2, false);
    group2.addMember(SubjectTestHelper.SUBJ3, false);

    // add some subjects for PIT
    group.addMember(SubjectTestHelper.SUBJ6, false);
    group.deleteMember(SubjectTestHelper.SUBJ6, false);
    Thread.sleep(100);
    Timestamp pointInTimeTo = new Timestamp(new Date().getTime());
    Thread.sleep(100);

    group.addMember(SubjectTestHelper.SUBJ7, false);
    group.deleteMember(SubjectTestHelper.SUBJ7, false);
    ChangeLogTempToEntity.convertRecords();

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getMembersWs --groupNames=aStem:aGroup,aStem:aGroup2",
          " "));
      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: ^GroupIndex (\d+)\: success\: ([TF])\: code: ([A-Z_]+)\: group\:
      // (.*)\: subjectIndex\: (\d+)\: (.*)$
      Pattern pattern = Pattern
          .compile("^GroupIndex (\\d+)\\: success\\: ([TF])\\: code: ([A-Z_]+)\\: group\\: (.*)\\: subjectIndex\\: (\\d+)\\: (.*)$");
      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "T", matcher.group(2));
      assertEquals(outputLines[0], "SUCCESS", matcher.group(3));
      assertEquals(outputLines[0], "aStem:aGroup", matcher.group(4));
      assertEquals(outputLines[0], "0", matcher.group(5));
      String subjectId = matcher.group(6);
      assertTrue(outputLines[0], GrouperClientUtils.equals("test.subject.0",
          subjectId)
          || GrouperClientUtils.equals("test.subject.1", subjectId));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals(outputLines[1], "0", matcher.group(1));
      assertEquals(outputLines[1], "T", matcher.group(2));
      assertEquals(outputLines[1], "SUCCESS", matcher.group(3));
      assertEquals(outputLines[1], "aStem:aGroup", matcher.group(4));
      assertEquals(outputLines[1], "1", matcher.group(5));
      subjectId = matcher.group(6);
      assertTrue(outputLines[1], GrouperClientUtils.equals("test.subject.0",
          subjectId)
          || GrouperClientUtils.equals("test.subject.1", subjectId));

      matcher = pattern.matcher(outputLines[2]);

      assertTrue(outputLines[2], matcher.matches());

      assertEquals(outputLines[2], "1", matcher.group(1));
      assertEquals(outputLines[2], "T", matcher.group(2));
      assertEquals(outputLines[2], "SUCCESS", matcher.group(3));
      assertEquals(outputLines[2], "aStem:aGroup2", matcher.group(4));
      assertEquals(outputLines[2], "0", matcher.group(5));
      subjectId = matcher.group(6);
      assertTrue(outputLines[2], GrouperClientUtils.equals("test.subject.2",
          subjectId)
          || GrouperClientUtils.equals("test.subject.3", subjectId));

      matcher = pattern.matcher(outputLines[3]);

      assertTrue(outputLines[3], matcher.matches());

      assertEquals(outputLines[3], "1", matcher.group(1));
      assertEquals(outputLines[3], "T", matcher.group(2));
      assertEquals(outputLines[3], "SUCCESS", matcher.group(3));
      assertEquals(outputLines[3], "aStem:aGroup2", matcher.group(4));
      assertEquals(outputLines[3], "1", matcher.group(5));
      subjectId = matcher.group(6);
      assertTrue(outputLines[3], GrouperClientUtils.equals("test.subject.2",
          subjectId)
          || GrouperClientUtils.equals("test.subject.3", subjectId));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("pageSize"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("pageNumber"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("sortString"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("ascending"));

      // ######################################################
      // Try sorting, paging

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      ArrayList<String> args = new ArrayList<String>();
      args.add("--operation=getMembersWs");
      args.add("--groupNames=aStem:aGroup");
      args.add("--pageSize=1");
      args.add("--pageNumber=2");
      args.add("--sortString=subjectId");
      args.add("--ascending=true");
      GrouperClient.main(args.toArray(new String[0]));

      System.out.flush();
      output = new String(baos.toByteArray());
      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "T", matcher.group(2));
      assertEquals(outputLines[0], "SUCCESS", matcher.group(3));
      assertEquals(outputLines[0], "aStem:aGroup", matcher.group(4));
      assertEquals(outputLines[0], "0", matcher.group(5));
      subjectId = matcher.group(6);
      assertTrue(outputLines[0], GrouperClientUtils.equals("test.subject.1",
          subjectId));


      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("pageSize"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("pageNumber"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("sortString"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("ascending"));


      // ######################################################
      // Try point in time

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      args = new ArrayList<String>();
      args.add("--operation=getMembersWs");
      args.add("--groupNames=aStem:aGroup,aStem:aGroup2");
      args.add("--pointInTimeFrom=" + GrouperClientUtils.timestampToString(pointInTimeFrom));
      args.add("--pointInTimeTo=" + GrouperClientUtils.timestampToString(pointInTimeTo));
      GrouperClient.main(args.toArray(new String[0]));

      System.out.flush();
      output = new String(baos.toByteArray());
      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "T", matcher.group(2));
      assertEquals(outputLines[0], "SUCCESS", matcher.group(3));
      assertEquals(outputLines[0], "aStem:aGroup", matcher.group(4));
      assertEquals(outputLines[0], "0", matcher.group(5));
      subjectId = matcher.group(6);
      assertTrue(outputLines[0], GrouperClientUtils.equals("test.subject.0", subjectId) ||
          GrouperClientUtils.equals("test.subject.1", subjectId) ||
          GrouperClientUtils.equals("test.subject.5", subjectId) ||
          GrouperClientUtils.equals("test.subject.6", subjectId));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals(outputLines[1], "0", matcher.group(1));
      assertEquals(outputLines[1], "T", matcher.group(2));
      assertEquals(outputLines[1], "SUCCESS", matcher.group(3));
      assertEquals(outputLines[1], "aStem:aGroup", matcher.group(4));
      assertEquals(outputLines[1], "1", matcher.group(5));
      subjectId = matcher.group(6);
      assertTrue(outputLines[1], GrouperClientUtils.equals("test.subject.0", subjectId) ||
          GrouperClientUtils.equals("test.subject.1", subjectId) ||
          GrouperClientUtils.equals("test.subject.5", subjectId) ||
          GrouperClientUtils.equals("test.subject.6", subjectId));

      matcher = pattern.matcher(outputLines[2]);

      assertTrue(outputLines[2], matcher.matches());

      assertEquals(outputLines[2], "0", matcher.group(1));
      assertEquals(outputLines[2], "T", matcher.group(2));
      assertEquals(outputLines[2], "SUCCESS", matcher.group(3));
      assertEquals(outputLines[2], "aStem:aGroup", matcher.group(4));
      assertEquals(outputLines[2], "2", matcher.group(5));
      subjectId = matcher.group(6);
      assertTrue(outputLines[2], GrouperClientUtils.equals("test.subject.0", subjectId) ||
          GrouperClientUtils.equals("test.subject.1", subjectId) ||
          GrouperClientUtils.equals("test.subject.5", subjectId) ||
          GrouperClientUtils.equals("test.subject.6", subjectId));

      matcher = pattern.matcher(outputLines[3]);

      assertTrue(outputLines[3], matcher.matches());

      assertEquals(outputLines[3], "0", matcher.group(1));
      assertEquals(outputLines[3], "T", matcher.group(2));
      assertEquals(outputLines[3], "SUCCESS", matcher.group(3));
      assertEquals(outputLines[3], "aStem:aGroup", matcher.group(4));
      assertEquals(outputLines[3], "3", matcher.group(5));
      subjectId = matcher.group(6);
      assertTrue(outputLines[3], GrouperClientUtils.equals("test.subject.0", subjectId) ||
          GrouperClientUtils.equals("test.subject.1", subjectId) ||
          GrouperClientUtils.equals("test.subject.5", subjectId) ||
          GrouperClientUtils.equals("test.subject.6", subjectId));

      matcher = pattern.matcher(outputLines[4]);

      assertTrue(outputLines[4], matcher.matches());

      assertEquals(outputLines[4], "1", matcher.group(1));
      assertEquals(outputLines[4], "T", matcher.group(2));
      assertEquals(outputLines[4], "SUCCESS", matcher.group(3));
      assertEquals(outputLines[4], "aStem:aGroup2", matcher.group(4));
      assertEquals(outputLines[4], "0", matcher.group(5));
      subjectId = matcher.group(6);
      assertTrue(outputLines[4], GrouperClientUtils.equals("test.subject.2",
          subjectId)
          || GrouperClientUtils.equals("test.subject.3", subjectId));

      matcher = pattern.matcher(outputLines[5]);

      assertTrue(outputLines[5], matcher.matches());

      assertEquals(outputLines[5], "1", matcher.group(1));
      assertEquals(outputLines[5], "T", matcher.group(2));
      assertEquals(outputLines[5], "SUCCESS", matcher.group(3));
      assertEquals(outputLines[5], "aStem:aGroup2", matcher.group(4));
      assertEquals(outputLines[5], "1", matcher.group(5));
      subjectId = matcher.group(6);
      assertTrue(outputLines[5], GrouperClientUtils.equals("test.subject.2",
          subjectId)
          || GrouperClientUtils.equals("test.subject.3", subjectId));


      // ######################################################
      // Try a sourceId

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getMembersWs --groupNames=aStem:aGroup,aStem:aGroup2 --sourceIds=jdbc,g:gsa",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(4, GrouperUtil.length(outputLines));

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getMembersWs --groupNames=aStem:aGroup,aStem:aGroup2 --sourceIds=g:gsa",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(0, GrouperUtil.length(outputLines));


      // ######################################################
      // Try uuid

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      Group aGroup = GroupFinder.findByName(grouperSession, "aStem:aGroup", true);
      Group aGroup2 = GroupFinder.findByName(grouperSession, "aStem:aGroup2", true);

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getMembersWs --groupUuids=" + aGroup.getUuid() + "," + aGroup2.getUuid(),
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(4, GrouperUtil.length(outputLines));


      // ######################################################
      // Try id index

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getMembersWs --groupIdIndexes=" + aGroup.getIdIndex() + "," + aGroup2.getIdIndex(),
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(4, GrouperUtil.length(outputLines));


      // ######################################################
      // Try a subject attribute name with custom template

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getMembersWs --groupNames=aStem:aGroup,aStem:aGroup2 --subjectAttributeNames=a,name --outputTemplate=${wsSubject.getAttributeValue(1)}$newline$",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      Arrays.sort(outputLines);

      assertEquals(outputLines[0], "my name is test.subject.0");
      assertEquals(outputLines[1], "my name is test.subject.1");
      assertEquals(outputLines[2], "my name is test.subject.2");
      assertEquals(outputLines[3], "my name is test.subject.3");

      // #######################################################
      // try member filter

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getMembersWs --groupNames=aStem:aGroup,aStem:aGroup2 --memberFilter=Effective",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));

      // #######################################################
      // try member filter nonimmediate

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getMembersWs --groupNames=aStem:aGroup,aStem:aGroup2 --memberFilter=NonImmediate",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));

      // #######################################################
      // try includeGroupDetail

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getMembersWs --groupNames=aStem:aGroup,aStem:aGroup2 --includeGroupDetail=true",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));

      // #######################################################
      // try includeSubjectDetail

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getMembersWs --groupNames=aStem:aGroup,aStem:aGroup2 --includeSubjectDetail=true",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));

      // #######################################################
      // try subjectAttributeNames

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getMembersWs --groupNames=aStem:aGroup,aStem:aGroup2 --subjectAttributeNames=name",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));

      // #######################################################
      // try params

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getMembersWs --groupNames=aStem:aGroup,aStem:aGroup2 --paramName0=someParam --paramValue0=someValue",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("someParam")
              && GrouperClientWs.mostRecentRequest.toLowerCase().contains(
                  "params")
              && GrouperClientWs.mostRecentRequest.contains("someValue"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));

      // #######################################################
      // try fieldName

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getMembersWs --groupNames=aStem:aGroup,aStem:aGroup2 --fieldName=members",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("fieldName")
              && GrouperClientWs.mostRecentRequest.contains("members"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));

      // #######################################################
      // try actAsSubject

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getMembersWs --groupNames=aStem:aGroup,aStem:aGroup2 --actAsSubjectId=GrouperSystem",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("actAsSubject")
              && GrouperClientWs.mostRecentRequest.contains("GrouperSystem"));

      // #######################################################
      // try actAsSubject but with alias

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getMembersWs --groupNames=aStem:aGroup,aStem:aGroup2 --actAsPennId=GrouperSystem",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("actAsSubject")
              && GrouperClientWs.mostRecentRequest.contains("GrouperSystem"));

    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testGetGroups2() throws Exception {

    // make sure group exists
    @SuppressWarnings("unused")
    GrouperSession grouperSession = GrouperSession.startRootSession();

    Subject         subj  = SubjectTestHelper.SUBJ0;
    Subject         subj1  = SubjectTestHelper.SUBJ1;
    GrouperSession  s     = SessionHelper.getRootSession();
    Stem            root  = StemFinder.findRootStem(s);
    Stem            edu   = root.addChildStem("edu", "edu");
    Stem            eduSub   = edu.addChildStem("eduSub", "eduSub");
    Stem            edu2   = root.addChildStem("edu2", "edu2");
    Group           i2    = edu.addChildGroup("i2", "i2");
    Group           i2sub    = eduSub.addChildGroup("i2sub", "i2sub");
    Group           edu2i2sub    = edu2.addChildGroup("edu2i2sub", "edu2i2sub");
    Group           comp1    = edu.addChildGroup("comp1", "comp1");
    Group           compLeft    = edu.addChildGroup("compLeft", "compLeft");
    Group           compRight    = edu.addChildGroup("compRight", "compRight");

    comp1.addCompositeMember(CompositeType.INTERSECTION, compLeft, compRight);

    compLeft.addMember(subj);
    compRight.addMember(subj);

    Group           uofc  = edu.addChildGroup("uofc", "uofc");
    GroupHelper.addMember(uofc, subj, "members");
    GroupHelper.addMember(i2, uofc.toSubject(), "members");

    i2sub.addMember(subj1);
    edu2i2sub.addMember(subj1);

    // give permissions
    String wsUserLabel = GrouperClientUtils.propertiesValue(
        "grouperClient.webService.user.label", true);
    String wsUserString = GrouperClientUtils.propertiesValue(
        "grouperClient.webService." + wsUserLabel, true);
    Subject wsUser = SubjectFinder.findByIdOrIdentifier(wsUserString, true);

    i2.grantPriv(wsUser, AccessPrivilege.READ, false);
    i2sub.grantPriv(wsUser, AccessPrivilege.READ, false);
    edu2i2sub.grantPriv(wsUser, AccessPrivilege.READ, false);
    comp1.grantPriv(wsUser, AccessPrivilege.READ, false);
    compLeft.grantPriv(wsUser, AccessPrivilege.READ, false);
    compRight.grantPriv(wsUser, AccessPrivilege.READ, false);
    uofc.grantPriv(wsUser, AccessPrivilege.READ, false);


    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    //Set<Group> groups = member.getImmediateGroups();
    //assertEquals(3, groups.size());
    //assertTrue(groups.contains(compLeft));
    //assertTrue(groups.contains(compRight));
    //assertTrue(groups.contains(uofc));

    GrouperClient.main(GrouperClientUtils.splitTrim(
        "--operation=getGroupsWs --subjectIds=test.subject.0 --memberFilter=Immediate --sortString=name",
        " "));
    System.out.flush();
    String output = new String(baos.toByteArray());

    System.setOut(systemOut);

    System.out.println(output);

    String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

    assertEquals(3, outputLines.length);

    Pattern pattern = Pattern
        .compile("^SubjectIndex (\\d+): success: T: code: ([A-Z_]+): subject: (.*): groupIndex: (\\d+): (.*+)$");
    Matcher matcher = pattern.matcher(outputLines[0]);

    assertTrue(outputLines[0], matcher.matches());

    assertEquals("0", matcher.group(1));
    assertEquals("SUCCESS", matcher.group(2));
    assertEquals("test.subject.0", matcher.group(3));
    assertEquals("0", matcher.group(4));
    assertEquals(matcher.group(5), compLeft.getName(), matcher.group(5));

    matcher = pattern.matcher(outputLines[1]);

    assertTrue(outputLines[1], matcher.matches());

    assertEquals("0", matcher.group(1));
    assertEquals("SUCCESS", matcher.group(2));
    assertEquals("test.subject.0", matcher.group(3));
    assertEquals("1", matcher.group(4));
    assertEquals(matcher.group(5), compRight.getName(), matcher.group(5));

    matcher = pattern.matcher(outputLines[2]);

    assertTrue(outputLines[2], matcher.matches());

    assertEquals("0", matcher.group(1));
    assertEquals("SUCCESS", matcher.group(2));
    assertEquals("test.subject.0", matcher.group(3));
    assertEquals("2", matcher.group(4));
    assertEquals(matcher.group(5), uofc.getName(), matcher.group(5));


    // #####################################################
    //groups = member.getNonImmediateGroups();
    //assertEquals(2, groups.size());
    //assertTrue(groups.contains(comp1));
    //assertTrue(groups.contains(i2));

    baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    // test a command line template
    GrouperClient
        .main(GrouperClientUtils
            .splitTrim(
                "--operation=getGroupsWs --subjectIdentifiers=id.test.subject.0 --memberFilter=NonImmediate --sortString=name",
                " "));

    System.out.flush();

    output = new String(baos.toByteArray());

    System.setOut(systemOut);

    System.out.println(output);

    outputLines = GrouperClientUtils.splitTrim(output, "\n");

    assertEquals(2, outputLines.length);

    pattern = Pattern
        .compile("^SubjectIndex (\\d+): success: T: code: ([A-Z_]+): subject: (.*): groupIndex: (\\d+): (.*+)$");
    matcher = pattern.matcher(outputLines[0]);

    assertTrue(outputLines[0], matcher.matches());

    assertEquals("0", matcher.group(1));
    assertEquals("SUCCESS", matcher.group(2));
    assertEquals("test.subject.0", matcher.group(3));
    assertEquals("0", matcher.group(4));
    assertEquals(matcher.group(5), comp1.getName(), matcher.group(5));

    matcher = pattern.matcher(outputLines[1]);

    assertTrue(outputLines[1], matcher.matches());

    assertEquals("0", matcher.group(1));
    assertEquals("SUCCESS", matcher.group(2));
    assertEquals("test.subject.0", matcher.group(3));
    assertEquals("1", matcher.group(4));
    assertEquals(matcher.group(5), i2.getName(), matcher.group(5));

    // #####################################################
    //groups = member1.getEffectiveGroups();
    //assertEquals(0, groups.size());

    baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    // test a command line template
    GrouperClient
        .main(GrouperClientUtils
            .splitTrim(
                "--operation=getGroupsWs --subjectIdentifiers=id.test.subject.1 --memberFilter=Effective",
                " "));

    System.out.flush();

    output = new String(baos.toByteArray());

    System.setOut(systemOut);

    System.out.println(output);

    outputLines = GrouperClientUtils.splitTrim(output, "\n");

    assertEquals(0, GrouperClientUtils.length(outputLines));

    // #####################################################
    //groups = member1.getImmediateGroups(Group.getDefaultList(), "whatever", null, null, null, true);
    //assertEquals(0, groups.size());

    baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    // test a command line template
    GrouperClient
        .main(GrouperClientUtils
            .splitTrim(
                "--operation=getGroupsWs --subjectIdentifiers=id.test.subject.1 --memberFilter=Immediate --fieldName=members --enabled=T --scope=whatever",
                " "));

    System.out.flush();

    output = new String(baos.toByteArray());

    System.setOut(systemOut);

    System.out.println(output);

    outputLines = GrouperClientUtils.splitTrim(output, "\n");

    assertEquals(0, GrouperClientUtils.length(outputLines));

    // #####################################################
    //groups = member1.getImmediateGroups(Group.getDefaultList(), "edu:eduSub", null, null, null, true);
    //assertEquals(1, groups.size());
    //assertEquals("edu:eduSub:i2sub", ((Group)GrouperUtil.get(groups, 0)).getName());

    baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    // test a command line template
    GrouperClient
        .main(GrouperClientUtils
            .splitTrim(
                "--operation=getGroupsWs --subjectIdentifiers=id.test.subject.1 --memberFilter=Immediate --scope=edu:eduSub",
                " "));

    System.out.flush();

    output = new String(baos.toByteArray());

    System.setOut(systemOut);

    System.out.println(output);

    outputLines = GrouperClientUtils.splitTrim(output, "\n");

    assertEquals(1, outputLines.length);

    pattern = Pattern
        .compile("^SubjectIndex (\\d+): success: T: code: ([A-Z_]+): subject: (.*): groupIndex: (\\d+): (.*+)$");
    matcher = pattern.matcher(outputLines[0]);

    assertTrue(outputLines[0], matcher.matches());

    assertEquals("0", matcher.group(1));
    assertEquals("SUCCESS", matcher.group(2));
    assertEquals("test.subject.1", matcher.group(3));
    assertEquals("0", matcher.group(4));
    assertEquals(matcher.group(5), i2sub.getName(), matcher.group(5));

    // #####################################################
    //groups = member1.getImmediateGroups(Group.getDefaultList(), "edu2", null, null, null, true);
    //assertEquals(1, groups.size());
    //assertEquals("edu2:edu2i2sub", ((Group)GrouperUtil.get(groups, 0)).getName());

    baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    // test a command line template
    GrouperClient
        .main(GrouperClientUtils
            .splitTrim(
                "--operation=getGroupsWs --subjectIdentifiers=id.test.subject.1 --memberFilter=Immediate --scope=edu2",
                " "));

    System.out.flush();

    output = new String(baos.toByteArray());

    System.setOut(systemOut);

    System.out.println(output);

    outputLines = GrouperClientUtils.splitTrim(output, "\n");

    assertEquals(1, outputLines.length);

    pattern = Pattern
        .compile("^SubjectIndex (\\d+): success: T: code: ([A-Z_]+): subject: (.*): groupIndex: (\\d+): (.*+)$");
    matcher = pattern.matcher(outputLines[0]);

    assertTrue(outputLines[0], matcher.matches());

    assertEquals("0", matcher.group(1));
    assertEquals("SUCCESS", matcher.group(2));
    assertEquals("test.subject.1", matcher.group(3));
    assertEquals("0", matcher.group(4));
    assertEquals(matcher.group(5), edu2i2sub.getName(), matcher.group(5));

    // #####################################################
    //groups = member1.getImmediateGroups(Group.getDefaultList(), "edu2", null, null, null, false);
    //assertEquals(0, groups.size());

    baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    // test a command line template
    GrouperClient
        .main(GrouperClientUtils
            .splitTrim(
                "--operation=getGroupsWs --subjectIdentifiers=id.test.subject.1 --memberFilter=Immediate --fieldName=members --enabled=F --scope=edu2",
                " "));

    System.out.flush();

    output = new String(baos.toByteArray());

    System.setOut(systemOut);

    System.out.println(output);

    outputLines = GrouperClientUtils.splitTrim(output, "\n");

    assertEquals(0, GrouperClientUtils.length(outputLines));


    // #####################################################
    //try {
    //  groups = member1.getImmediateGroups(Group.getDefaultList(), null, edu, null, null, true);
    //  fail("Need stemScope");
    //} catch (Exception e) {
    //  //good
    //}

    baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    // test a command line template
    try {
      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getGroupsWs --subjectIdentifiers=id.test.subject.1 --memberFilter=Immediate --stem=" + edu.getName(),
                  " "));
      fail("Need stemScope");
    } catch (Exception e) {
      //good
    } finally {
      System.out.flush();

      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      System.out.println(output);
    }

    // #####################################################
    //groups = member1.getImmediateGroups(Group.getDefaultList(), null, edu, Scope.ONE, null, true);
    //assertEquals(0, groups.size());

    baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    // test a command line template
    GrouperClient
        .main(GrouperClientUtils
            .splitTrim(
                "--operation=getGroupsWs --subjectIdentifiers=id.test.subject.1 --memberFilter=Immediate --stemName=" + edu.getName() + " --stemScope=ONE_LEVEL",
                " "));

    System.out.flush();

    output = new String(baos.toByteArray());

    System.setOut(systemOut);

    System.out.println(output);

    outputLines = GrouperClientUtils.splitTrim(output, "\n");

    assertEquals(0, GrouperClientUtils.length(outputLines));

    // #####################################################
    //groups = member1.getImmediateGroups(Group.getDefaultList(), null, edu2, Scope.ONE, null, true);
    //assertEquals(1, groups.size());
    //assertEquals("edu2:edu2i2sub", ((Group)GrouperUtil.get(groups, 0)).getName());

    baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    // test a command line template
    GrouperClient
        .main(GrouperClientUtils
            .splitTrim(
                "--operation=getGroupsWs --subjectIdentifiers=id.test.subject.1 --memberFilter=Immediate --stemName=" + edu2.getName() + " --stemScope=ONE_LEVEL",
                " "));

    System.out.flush();

    output = new String(baos.toByteArray());

    System.setOut(systemOut);

    System.out.println(output);

    outputLines = GrouperClientUtils.splitTrim(output, "\n");

    assertEquals(1, outputLines.length);

    pattern = Pattern
        .compile("^SubjectIndex (\\d+): success: T: code: ([A-Z_]+): subject: (.*): groupIndex: (\\d+): (.*+)$");
    matcher = pattern.matcher(outputLines[0]);

    assertTrue(outputLines[0], matcher.matches());

    assertEquals("0", matcher.group(1));
    assertEquals("SUCCESS", matcher.group(2));
    assertEquals("test.subject.1", matcher.group(3));
    assertEquals("0", matcher.group(4));
    assertEquals(matcher.group(5), edu2i2sub.getName(), matcher.group(5));

    // #####################################################
    //groups = member1.getImmediateGroups(Group.getDefaultList(), null, edu, Scope.SUB, null, true);
    //assertEquals(1, groups.size());
    //assertEquals("edu:eduSub:i2sub", ((Group)GrouperUtil.get(groups, 0)).getName());

    baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    // test a command line template
    GrouperClient
        .main(GrouperClientUtils
            .splitTrim(
                "--operation=getGroupsWs --subjectIdentifiers=id.test.subject.1 --memberFilter=Immediate --stemName=" + edu.getName() + " --stemScope=ALL_IN_SUBTREE",
                " "));

    System.out.flush();

    output = new String(baos.toByteArray());

    System.setOut(systemOut);

    System.out.println(output);

    outputLines = GrouperClientUtils.splitTrim(output, "\n");

    assertEquals(1, outputLines.length);

    pattern = Pattern
        .compile("^SubjectIndex (\\d+): success: T: code: ([A-Z_]+): subject: (.*): groupIndex: (\\d+): (.*+)$");
    matcher = pattern.matcher(outputLines[0]);

    assertTrue(outputLines[0], matcher.matches());

    assertEquals("0", matcher.group(1));
    assertEquals("SUCCESS", matcher.group(2));
    assertEquals("test.subject.1", matcher.group(3));
    assertEquals("0", matcher.group(4));
    assertEquals(matcher.group(5), i2sub.getName(), matcher.group(5));

    // #####################################################
    //groups = member1.getImmediateGroups(Group.getDefaultList(), null, edu2, Scope.SUB, null, true);
    //assertEquals(1, groups.size());
    //assertEquals("edu2:edu2i2sub", ((Group)GrouperUtil.get(groups, 0)).getName());

    baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    // test a command line template
    GrouperClient
        .main(GrouperClientUtils
            .splitTrim(
                "--operation=getGroupsWs --subjectIdentifiers=id.test.subject.1 --memberFilter=Immediate --stemName=" + edu2.getName() + " --stemScope=ALL_IN_SUBTREE",
                " "));

    System.out.flush();

    output = new String(baos.toByteArray());

    System.setOut(systemOut);

    System.out.println(output);

    outputLines = GrouperClientUtils.splitTrim(output, "\n");

    assertEquals(1, outputLines.length);

    pattern = Pattern
        .compile("^SubjectIndex (\\d+): success: T: code: ([A-Z_]+): subject: (.*): groupIndex: (\\d+): (.*+)$");
    matcher = pattern.matcher(outputLines[0]);

    assertTrue(outputLines[0], matcher.matches());

    assertEquals("0", matcher.group(1));
    assertEquals("SUCCESS", matcher.group(2));
    assertEquals("test.subject.1", matcher.group(3));
    assertEquals("0", matcher.group(4));
    assertEquals(matcher.group(5), edu2i2sub.getName(), matcher.group(5));

    // #####################################################
    //QueryOptions queryOptions = new QueryOptions().paging(1, 1, true).sortAsc("name");
    //groups = member.getImmediateGroups(Group.getDefaultList(), null, null, null, queryOptions, true);
    //assertEquals(1, groups.size());
    //assertEquals("edu:compLeft", ((Group)GrouperUtil.get(groups, 0)).getName());

    baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    // test a command line template
    GrouperClient
        .main(GrouperClientUtils
            .splitTrim(
                "--operation=getGroupsWs --subjectIdentifiers=id.test.subject.0 --memberFilter=Immediate --pageSize=1 --pageNumber=1 --sortString=name",
                " "));

    System.out.flush();

    output = new String(baos.toByteArray());

    System.setOut(systemOut);

    System.out.println(output);

    outputLines = GrouperClientUtils.splitTrim(output, "\n");

    assertEquals(1, outputLines.length);

    pattern = Pattern
        .compile("^SubjectIndex (\\d+): success: T: code: ([A-Z_]+): subject: (.*): groupIndex: (\\d+): (.*+)$");
    matcher = pattern.matcher(outputLines[0]);

    assertTrue(outputLines[0], matcher.matches());

    assertEquals("0", matcher.group(1));
    assertEquals("SUCCESS", matcher.group(2));
    assertEquals("test.subject.0", matcher.group(3));
    assertEquals("0", matcher.group(4));
    assertEquals(matcher.group(5), compLeft.getName(), matcher.group(5));


    // #####################################################
    //queryOptions = new QueryOptions().paging(1, 1, true).sortAsc("non existent column");
    //try {
    //  groups = member.getImmediateGroups(Group.getDefaultList(), null, null, null, queryOptions, true);
    //  fail("Column doesnt exist");
    //} catch (Exception e) {
    //  //good
    //}

    baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {
      // test a command line template
      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getGroupsWs --subjectIdentifiers=id.test.subject.0 --memberFilter=Immediate --pageSize=1 --pageNumber=1 --sortString=doesntExist",
                  " "));
      fail("Column doesnt exist");
    } catch (Exception e) {
      //good
    } finally {
      System.out.flush();

      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      System.out.println(output);
    }

  }

  /**
   *
   * @throws Exception
   */
  public void testGetMembershipsForService() throws Exception {

    GrouperSession grouperSession = GrouperSession.startRootSession();

    AttributeDefName jiraService = null;
    AttributeDefName confluenceService = null;
    AttributeDefName directoryService = null;

    //create three services, one directly in, one hierarchical, one the user is not in
    AttributeDef jiraServiceDef = new AttributeDefSave(grouperSession)
      .assignCreateParentStemsIfNotExist(true).assignAttributeDefType(AttributeDefType.service)
      .assignName("apps:jira:jiraServiceDefinition").assignToStem(true).save();

    jiraService = new AttributeDefNameSave(grouperSession, jiraServiceDef)
      .assignCreateParentStemsIfNotExist(true)
      .assignName("apps:jira:jiraService").assignDisplayExtension("Central IT production Jira issue tracker").save();

    //jira group
    Group jiraGroup = new GroupSave(grouperSession)
      .assignName("apps:jira:groups:admins").assignCreateParentStemsIfNotExist(true).save();

    jiraGroup.revokePriv(SubjectFinder.findAllSubject(), AccessPrivilege.READ, false);
    jiraGroup.revokePriv(grouperSession.getSubject(), AccessPrivilege.ADMIN, false);
    jiraGroup.grantPriv(SubjectTestHelper.SUBJ5, AccessPrivilege.READ, false);
    jiraGroup.grantPriv(SubjectTestHelper.SUBJ6, AccessPrivilege.ADMIN, false);

    jiraGroup.addMember(SubjectTestHelper.SUBJ0);
    jiraGroup.addMember(SubjectTestHelper.SUBJ1);

    //the jira group has the jira service tag
    Stem jiraStem = StemFinder.findByUuid(grouperSession, jiraGroup.getStemId(), true);
    jiraStem.getAttributeDelegate().assignAttribute(jiraService);

    AttributeDef confluenceServiceDef = new AttributeDefSave(grouperSession)
      .assignCreateParentStemsIfNotExist(true).assignAttributeDefType(AttributeDefType.service)
      .assignName("apps:confluence:confluenceServiceDefinition").assignToStem(true).save();

    confluenceService = new AttributeDefNameSave(grouperSession, confluenceServiceDef)
      .assignCreateParentStemsIfNotExist(true)
      .assignName("apps:confluence:confluenceService").assignDisplayExtension("Central IT production Confluence wiki").save();

    Group confluenceGroup = new GroupSave(grouperSession)
      .assignName("apps:confluence:editors").assignCreateParentStemsIfNotExist(true).save();

    confluenceGroup.revokePriv(SubjectFinder.findAllSubject(), AccessPrivilege.READ, false);
    confluenceGroup.revokePriv(grouperSession.getSubject(), AccessPrivilege.ADMIN, false);
    confluenceGroup.grantPriv(SubjectTestHelper.SUBJ6, AccessPrivilege.READ, false);
    confluenceGroup.grantPriv(SubjectTestHelper.SUBJ7, AccessPrivilege.ADMIN, false);
    confluenceGroup.grantPriv(SubjectTestHelper.SUBJ8, AccessPrivilege.UPDATE, false);

    confluenceGroup.addMember(SubjectTestHelper.SUBJ1, false);
    confluenceGroup.addMember(SubjectTestHelper.SUBJ2, false);

    //the confluence folder has the confluence service tag
    Stem confluenceFolder = StemFinder.findByName(grouperSession, "apps:confluence", true);
    confluenceFolder.getAttributeDelegate().assignAttribute(confluenceService);

    AttributeDef directoryServiceDef = new AttributeDefSave(grouperSession)
      .assignCreateParentStemsIfNotExist(true).assignAttributeDefType(AttributeDefType.service)
      .assignName("apps:directory:directoryServiceDefinition").assignToStem(true).save();

    directoryService = new AttributeDefNameSave(grouperSession, directoryServiceDef)
      .assignCreateParentStemsIfNotExist(true)
      .assignName("apps:directory:directoryService").assignDisplayExtension("MySchool directory").save();

    Group directoryGroup = new GroupSave(grouperSession)
      .assignName("apps:directory:users").assignCreateParentStemsIfNotExist(true).save();

    directoryGroup.revokePriv(SubjectFinder.findAllSubject(), AccessPrivilege.READ, false);
    directoryGroup.grantPriv(SubjectTestHelper.SUBJ7, AccessPrivilege.READ, false);
    directoryGroup.grantPriv(SubjectTestHelper.SUBJ8, AccessPrivilege.READ, false);
    directoryGroup.addMember(SubjectTestHelper.SUBJ2, false);
    directoryGroup.addMember(SubjectTestHelper.SUBJ3, false);

    //the confluence folder has the confluence service tag
    Stem directoryFolder = StemFinder.findByName(grouperSession, "apps:directory", true);
    directoryFolder.getAttributeDelegate().assignAttribute(directoryService);

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      // ##################### subject 0 and 1 are in the jira service...

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getMembershipsWs --serviceId=" + jiraService.getId() + " --serviceRole=user",
          " "));
      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(2, GrouperUtil.length(outputLines));

      // match: Index: 0: group: aStem:aGroup, subject: GrouperSystem, list: members, type: immediate, enabled: T
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      Pattern pattern = Pattern
          .compile("^Index: (\\d+)\\: group\\: (.+), subject\\: (.+), list: (.+), type\\: (.+), enabled\\: (T|F)$");
      String outputLine = outputLines[0];

      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "apps:jira:groups:admins", matcher.group(2));
      assertEquals(outputLine, "test.subject.0", matcher.group(3));
      assertEquals(outputLine, "members", matcher.group(4));
      assertEquals(outputLine, "immediate", matcher.group(5));
      assertEquals(outputLine, "T", matcher.group(6));

      outputLine = outputLines[1];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());

      assertEquals(outputLine, "1", matcher.group(1));
      assertEquals(outputLine, "apps:jira:groups:admins", matcher.group(2));
      assertEquals(outputLine, "test.subject.1", matcher.group(3));
      assertEquals(outputLine, "members", matcher.group(4));
      assertEquals(outputLine, "immediate", matcher.group(5));
      assertEquals(outputLine, "T", matcher.group(6));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("serviceRole"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("serviceLookup\":{\"uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("\"serviceLookup\":{\"name\""));

      // ##################### subject 7 and 8 is admin of the confluence service...

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getMembershipsWs --serviceName=" + confluenceService.getName() + " --serviceRole=admin",
          " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(2, GrouperUtil.length(outputLines));

      // match: Index: 0: group: aStem:aGroup, subject: GrouperSystem, list: members, type: immediate, enabled: T
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: group\\: (.+), subject\\: (.+), list: (.+), type\\: (.+), enabled\\: (T|F)$");
      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "apps:confluence:editors", matcher.group(2));
      assertEquals(outputLine, "test.subject.7", matcher.group(3));
      assertEquals(outputLine, "admins", matcher.group(4));
      assertEquals(outputLine, "immediate", matcher.group(5));
      assertEquals(outputLine, "T", matcher.group(6));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "1", matcher.group(1));
      assertEquals(outputLine, "apps:confluence:editors", matcher.group(2));
      assertEquals(outputLine, "test.subject.8", matcher.group(3));
      assertEquals(outputLine, "updaters", matcher.group(4));
      assertEquals(outputLine, "immediate", matcher.group(5));
      assertEquals(outputLine, "T", matcher.group(6));


      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("serviceRole"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"serviceLookup\":{\"name\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("serviceLookup\":{\"uuid"));

    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testGetMemberships() throws Exception {

    // make sure group exists
    GrouperSession grouperSession = GrouperSession.startRootSession();
    Group group = Group.saveGroup(grouperSession, "aStem:aGroup", null,
        "aStem:aGroup", "aGroup", null, null, true);
    Group group2 = Group.saveGroup(grouperSession, "aStem:aGroup2", null,
        "aStem:aGroup2", "aGroup2", null, null, true);

    Stem stem = new StemSave(grouperSession).assignName("aStem1").assignCreateParentStemsIfNotExist(true).save();
    Stem stem2 = new StemSave(grouperSession).assignName("aStem2").assignCreateParentStemsIfNotExist(true).save();

    AttributeDef attributeDef = new AttributeDefSave(grouperSession).assignName("aStem1:attributeDef1").assignCreateParentStemsIfNotExist(true).save();
    AttributeDef attributeDef2 = new AttributeDefSave(grouperSession).assignName("aStem2:attributeDef2").assignCreateParentStemsIfNotExist(true).save();

    // give permissions
    String wsUserLabel = GrouperClientUtils.propertiesValue(
        "grouperClient.webService.user.label", true);
    String wsUserString = GrouperClientUtils.propertiesValue(
        "grouperClient.webService." + wsUserLabel, true);
    Subject wsUser = SubjectFinder.findByIdOrIdentifier(wsUserString, true);

    group.grantPriv(wsUser, AccessPrivilege.ADMIN, false);
    group2.grantPriv(wsUser, AccessPrivilege.ADMIN, false);
    stem.grantPriv(wsUser, NamingPrivilege.STEM, false);
    stem2.grantPriv(wsUser, NamingPrivilege.STEM, false);
    attributeDef.getPrivilegeDelegate().grantPriv(wsUser, AttributeDefPrivilege.ATTR_ADMIN, false);
    attributeDef2.getPrivilegeDelegate().grantPriv(wsUser, AttributeDefPrivilege.ATTR_ADMIN, false);

    // add some subjects
    group.addMember(SubjectTestHelper.SUBJ0, false);
    group.addMember(SubjectTestHelper.SUBJ1, false);
    group2.addMember(SubjectTestHelper.SUBJ2, false);
    group2.addMember(SubjectTestHelper.SUBJ3, false);

    group.grantPriv(SubjectTestHelper.SUBJ7, AccessPrivilege.UPDATE, false);
    group.grantPriv(SubjectTestHelper.SUBJ8, AccessPrivilege.ADMIN, false);
    group2.grantPriv(SubjectTestHelper.SUBJ7, AccessPrivilege.UPDATE, false);
    group2.grantPriv(SubjectTestHelper.SUBJ8, AccessPrivilege.ADMIN, false);

    stem.grantPriv(SubjectTestHelper.SUBJ7, NamingPrivilege.CREATE, false);
    stem.grantPriv(SubjectTestHelper.SUBJ8, NamingPrivilege.STEM, false);
    stem2.grantPriv(SubjectTestHelper.SUBJ7, NamingPrivilege.CREATE, false);
    stem2.grantPriv(SubjectTestHelper.SUBJ8, NamingPrivilege.STEM, false);

    attributeDef.getPrivilegeDelegate().grantPriv(SubjectTestHelper.SUBJ7, AttributeDefPrivilege.ATTR_READ, false);
    attributeDef.getPrivilegeDelegate().grantPriv(SubjectTestHelper.SUBJ8, AttributeDefPrivilege.ATTR_UPDATE, false);
    attributeDef2.getPrivilegeDelegate().grantPriv(SubjectTestHelper.SUBJ7, AttributeDefPrivilege.ATTR_READ, false);
    attributeDef2.getPrivilegeDelegate().grantPriv(SubjectTestHelper.SUBJ8, AttributeDefPrivilege.ATTR_UPDATE, false);

    GrouperSession.stopQuietly(grouperSession);
    grouperSession = GrouperSession.start(wsUser);

    Set<Object[]> results = new MembershipFinder().addSubject(SubjectTestHelper.SUBJ7)
        .addSubject(SubjectTestHelper.SUBJ8).assignFieldType(FieldType.ACCESS).findMembershipsMembers();

    assertEquals(GrouperUtil.toStringForLog(results), 4, GrouperUtil.length(results));

    GrouperSession.stopQuietly(grouperSession);
    grouperSession = GrouperSession.startRootSession();


    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getMembershipsWs --groupNames=aStem:aGroup,aStem:aGroup2",
          " "));
      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // OLD match: Index: 0: type: group, ownerName: aStem:aGroup, subject: GrouperSystem, list: members, type: immediate, enabled: T
      // NEW match: Index: 0: group: aStem:aGroup, subject: test.subject.0, list: members, type: immediate, enabled: T
      // match: ^Index: (\d+)\: type: group, ownerName\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      Pattern pattern = Pattern
          .compile("^Index: (\\d+)\\: group\\: (.+), subject\\: (.+), list: (.+), type\\: (.+), enabled\\: (T|F)$");
      String outputLine = outputLines[0];

      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "aStem:aGroup", matcher.group(2));
      assertEquals(outputLine, "test.subject.0", matcher.group(3));
      assertEquals(outputLine, "members", matcher.group(4));
      assertEquals(outputLine, "immediate", matcher.group(5));
      assertEquals(outputLine, "T", matcher.group(6));

      outputLine = outputLines[1];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());

      assertEquals(outputLine, "1", matcher.group(1));
      assertEquals(outputLine, "aStem:aGroup", matcher.group(2));
      assertEquals(outputLine, "test.subject.1", matcher.group(3));
      assertEquals(outputLine, "members", matcher.group(4));
      assertEquals(outputLine, "immediate", matcher.group(5));
      assertEquals(outputLine, "T", matcher.group(6));

      outputLine = outputLines[2];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());

      assertEquals(outputLine, "2", matcher.group(1));
      assertEquals(outputLine, "aStem:aGroup2", matcher.group(2));
      assertEquals(outputLine, "test.subject.2", matcher.group(3));
      assertEquals(outputLine, "members", matcher.group(4));
      assertEquals(outputLine, "immediate", matcher.group(5));
      assertEquals(outputLine, "T", matcher.group(6));

      outputLine = outputLines[3];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());

      assertEquals(outputLine, "3", matcher.group(1));
      assertEquals(outputLine, "aStem:aGroup2", matcher.group(2));
      assertEquals(outputLine, "test.subject.3", matcher.group(3));
      assertEquals(outputLine, "members", matcher.group(4));
      assertEquals(outputLine, "immediate", matcher.group(5));
      assertEquals(outputLine, "T", matcher.group(6));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("serviceRole"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("serviceLookup\":{\"uuid"));

      // ######################################################
      // Try a sourceId

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getMembershipsWs --groupNames=aStem:aGroup,aStem:aGroup2 --sourceIds=jdbc,g:gsa",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(4, GrouperUtil.length(outputLines));

      // ######################################################
      // Try paging

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getMembershipsWs --groupNames=aStem:aGroup,aStem:aGroup2 --pageSize=1 --pageNumber=1 --sortString=displayName --ascending=true",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(2, GrouperUtil.length(outputLines));

      // ######################################################
      // Try paging

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getMembershipsWs --groupNames=aStem:aGroup,aStem:aGroup2 --pageSizeForMember=1 --pageNumberForMember=1 --sortStringForMember=name --ascendingForMember=true",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, GrouperUtil.length(outputLines));

      //##########################################################
      //Try a source id with no results

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getMembershipsWs --groupNames=aStem:aGroup,aStem:aGroup2 --sourceIds=g:gsa",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(0, GrouperUtil.length(outputLines));


      // ######################################################
      // Try uuid

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      Group aGroup = GroupFinder.findByName(grouperSession, "aStem:aGroup", true);
      Group aGroup2 = GroupFinder.findByName(grouperSession, "aStem:aGroup2", true);

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getMembershipsWs --groupUuids=" + aGroup.getUuid() + "," + aGroup2.getUuid(),
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(4, GrouperUtil.length(outputLines));

      // ######################################################
      // Try id index

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      aGroup = GroupFinder.findByName(grouperSession, "aStem:aGroup", true);
      aGroup2 = GroupFinder.findByName(grouperSession, "aStem:aGroup2", true);
      Stem aStem = StemFinder.findByName(grouperSession, "aStem", true);

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getMembershipsWs --groupIdIndexes=" + aGroup.getIdIndex() + "," + aGroup2.getIdIndex(),
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(4, GrouperUtil.length(outputLines));


      // ######################################################
      // Try a subject attribute name with custom template

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getMembershipsWs --groupNames=aStem:aGroup,aStem:aGroup2 --subjectAttributeNames=a,name --outputTemplate=${wsSubject.getAttributeValue(1)}$newline$",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      Arrays.sort(outputLines);

      assertEquals(outputLines[0], "my name is test.subject.0");
      assertEquals(outputLines[1], "my name is test.subject.1");
      assertEquals(outputLines[2], "my name is test.subject.2");
      assertEquals(outputLines[3], "my name is test.subject.3");

      // #######################################################
      // try member filter

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getMembershipsWs --groupNames=aStem:aGroup,aStem:aGroup2 --memberFilter=Effective",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(0, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));

      // #######################################################
      // try member filter nonimmediate

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getMembershipsWs --groupNames=aStem:aGroup,aStem:aGroup2 --memberFilter=NonImmediate",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(0, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));

      // #######################################################
      // try includeGroupDetail

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getMembershipsWs --groupNames=aStem:aGroup,aStem:aGroup2 --includeGroupDetail=true",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(4, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));

      // #######################################################
      // try includeSubjectDetail

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getMembershipsWs --groupNames=aStem:aGroup,aStem:aGroup2 --includeSubjectDetail=true",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(4, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));

      // #######################################################
      // try subjectAttributeNames

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getMembershipsWs --groupNames=aStem:aGroup,aStem:aGroup2 --subjectAttributeNames=name",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(4, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));

      // #######################################################
      // try params

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getMembershipsWs --groupNames=aStem:aGroup,aStem:aGroup2 --paramName0=someParam --paramValue0=someValue",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(4, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("someParam")
              && GrouperClientWs.mostRecentRequest.toLowerCase().contains(
                  "params")
              && GrouperClientWs.mostRecentRequest.contains("someValue"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));

      // #######################################################
      // try fieldName

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getMembershipsWs --groupNames=aStem:aGroup,aStem:aGroup2 --fieldName=members",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(4, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("fieldName")
              && GrouperClientWs.mostRecentRequest.contains("members"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));

      // #######################################################
      // try actAsSubject

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getMembershipsWs --groupNames=aStem:aGroup,aStem:aGroup2 --actAsSubjectId=GrouperSystem",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(4, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("actAsSubject")
              && GrouperClientWs.mostRecentRequest.contains("GrouperSystem"));

      // #######################################################
      // try actAsSubject but with alias

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getMembershipsWs --groupNames=aStem:aGroup,aStem:aGroup2 --actAsPennId=GrouperSystem",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(4, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("actAsSubject")
              && GrouperClientWs.mostRecentRequest.contains("GrouperSystem"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("membershipIds"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("scope"));
      //subjectSources
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("sourceIds"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("membershipIds"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsStemLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("stemScope"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookup"));


      // #######################################################
      // try enabled

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getMembershipsWs --groupNames=aStem:aGroup,aStem:aGroup2 --enabled=F",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(0, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("membershipIds"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("scope"));
      //subjectSources
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("sourceIds"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("membershipIds"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsStemLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("stemScope"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookup"));

      // #######################################################
      // try all in subtree

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getMembershipsWs --subjectIds=test.subject.0,test.subject.1",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(2, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("membershipIds"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("scope"));
      //subjectSources
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("sourceIds"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("membershipIds"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsStemLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("stemScope"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("ALL_IN_SUBTREE"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsSubjectLookup"));

      // #######################################################
      // try privs in a group

      //group.grantPriv(SubjectTestHelper.SUBJ7, AccessPrivilege.UPDATE, false);
      //group.grantPriv(SubjectTestHelper.SUBJ8, AccessPrivilege.ADMIN, false);
      //group2.grantPriv(SubjectTestHelper.SUBJ7, AccessPrivilege.UPDATE, false);
      //group2.grantPriv(SubjectTestHelper.SUBJ8, AccessPrivilege.ADMIN, false);
      //
      //stem.grantPriv(SubjectTestHelper.SUBJ7, NamingPrivilege.CREATE, false);
      //stem.grantPriv(SubjectTestHelper.SUBJ7, NamingPrivilege.STEM, false);
      //stem2.grantPriv(SubjectTestHelper.SUBJ8, NamingPrivilege.CREATE, false);
      //stem2.grantPriv(SubjectTestHelper.SUBJ8, NamingPrivilege.STEM, false);
      //
      //attributeDef.getPrivilegeDelegate().grantPriv(SubjectTestHelper.SUBJ7, AttributeDefPrivilege.ATTR_READ, false);
      //attributeDef.getPrivilegeDelegate().grantPriv(SubjectTestHelper.SUBJ8, AttributeDefPrivilege.ATTR_UPDATE, false);
      //attributeDef2.getPrivilegeDelegate().grantPriv(SubjectTestHelper.SUBJ7, AttributeDefPrivilege.ATTR_READ, false);
      //attributeDef2.getPrivilegeDelegate().grantPriv(SubjectTestHelper.SUBJ8, AttributeDefPrivilege.ATTR_UPDATE, false);

      // match: ^Index: (\d+)\: type: group, ownerName\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      // match:  Index: 0: group: aStem:aGroup, subject: test.subject.7, list: updaters, type: immediate, enabled: T
      pattern = Pattern
          .compile("^Index: (\\d+)\\: (group|folder)\\: (.+), subject\\: (.+), list: (.+), type\\: (.+), enabled\\: (T|F)$");

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getMembershipsWs --subjectIds=test.subject.7,test.subject.8 --fieldType=access",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(4, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "aStem:aGroup", matcher.group(3));
      assertEquals(outputLine, "test.subject.7", matcher.group(4));
      assertEquals(outputLine, "updaters", matcher.group(5));
      assertEquals(outputLine, "immediate", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));

      outputLine = outputLines[1];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());

      assertEquals(outputLine, "1", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "aStem:aGroup", matcher.group(3));
      assertEquals(outputLine, "test.subject.8", matcher.group(4));
      assertEquals(outputLine, "admins", matcher.group(5));
      assertEquals(outputLine, "immediate", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));

      outputLine = outputLines[2];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());

      assertEquals(outputLine, "2", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "aStem:aGroup2", matcher.group(3));
      assertEquals(outputLine, "test.subject.7", matcher.group(4));
      assertEquals(outputLine, "updaters", matcher.group(5));
      assertEquals(outputLine, "immediate", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));

      outputLine = outputLines[3];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());

      assertEquals(outputLine, "3", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "aStem:aGroup2", matcher.group(3));
      assertEquals(outputLine, "test.subject.8", matcher.group(4));
      assertEquals(outputLine, "admins", matcher.group(5));
      assertEquals(outputLine, "immediate", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("membershipIds"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("scope"));
      //subjectSources
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("sourceIds"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("membershipIds"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsStemLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("stemScope"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("ALL_IN_SUBTREE"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("fieldType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("access"));

      // #######################################################
      // try one level stem

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getMembershipsWs --subjectIds=test.subject.7,test.subject.8 --fieldType=naming --stemIdIndex=" + aStem.getParentStem().getIdIndex() + " --stemScope=ONE_LEVEL",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(output, 4, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "folder", matcher.group(2));
      assertEquals(outputLine, "aStem1", matcher.group(3));
      assertEquals(outputLine, "test.subject.7", matcher.group(4));
      assertEquals(outputLine, "creators", matcher.group(5));
      assertEquals(outputLine, "immediate", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));

      outputLine = outputLines[1];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());

      assertEquals(outputLine, "1", matcher.group(1));
      assertEquals(outputLine, "folder", matcher.group(2));
      assertEquals(outputLine, "aStem1", matcher.group(3));
      assertEquals(outputLine, "test.subject.8", matcher.group(4));
      assertEquals(outputLine, "stemAdmins", matcher.group(5));
      assertEquals(outputLine, "immediate", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));

      outputLine = outputLines[2];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());

      assertEquals(outputLine, "2", matcher.group(1));
      assertEquals(outputLine, "folder", matcher.group(2));
      assertEquals(outputLine, "aStem2", matcher.group(3));
      assertEquals(outputLine, "test.subject.7", matcher.group(4));
      assertEquals(outputLine, "creators", matcher.group(5));
      assertEquals(outputLine, "immediate", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));

      outputLine = outputLines[3];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());

      assertEquals(outputLine, "3", matcher.group(1));
      assertEquals(outputLine, "folder", matcher.group(2));
      assertEquals(outputLine, "aStem2", matcher.group(3));
      assertEquals(outputLine, "test.subject.8", matcher.group(4));
      assertEquals(outputLine, "stemAdmins", matcher.group(5));
      assertEquals(outputLine, "immediate", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("membershipIds"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("scope"));
      //subjectSources
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("sourceIds"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("membershipIds"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsStemLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("stemScope"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("ALL_IN_SUBTREE"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("idIndex"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("ONE_LEVEL"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("naming"));

      // #######################################################
      // try privs in a stem

      //stem.grantPriv(SubjectTestHelper.SUBJ7, NamingPrivilege.CREATE, false);
      //stem.grantPriv(SubjectTestHelper.SUBJ7, NamingPrivilege.STEM, false);
      //stem2.grantPriv(SubjectTestHelper.SUBJ8, NamingPrivilege.CREATE, false);
      //stem2.grantPriv(SubjectTestHelper.SUBJ8, NamingPrivilege.STEM, false);

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getMembershipsWs --subjectIds=test.subject.7,test.subject.8 --fieldType=naming",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(4, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "folder", matcher.group(2));
      assertEquals(outputLine, "aStem1", matcher.group(3));
      assertEquals(outputLine, "test.subject.7", matcher.group(4));
      assertEquals(outputLine, "creators", matcher.group(5));
      assertEquals(outputLine, "immediate", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));

      outputLine = outputLines[1];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());

      assertEquals(outputLine, "1", matcher.group(1));
      assertEquals(outputLine, "folder", matcher.group(2));
      assertEquals(outputLine, "aStem1", matcher.group(3));
      assertEquals(outputLine, "test.subject.8", matcher.group(4));
      assertEquals(outputLine, "stemAdmins", matcher.group(5));
      assertEquals(outputLine, "immediate", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));

      outputLine = outputLines[2];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());

      assertEquals(outputLine, "2", matcher.group(1));
      assertEquals(outputLine, "folder", matcher.group(2));
      assertEquals(outputLine, "aStem2", matcher.group(3));
      assertEquals(outputLine, "test.subject.7", matcher.group(4));
      assertEquals(outputLine, "creators", matcher.group(5));
      assertEquals(outputLine, "immediate", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));

      outputLine = outputLines[3];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());

      assertEquals(outputLine, "3", matcher.group(1));
      assertEquals(outputLine, "folder", matcher.group(2));
      assertEquals(outputLine, "aStem2", matcher.group(3));
      assertEquals(outputLine, "test.subject.8", matcher.group(4));
      assertEquals(outputLine, "stemAdmins", matcher.group(5));
      assertEquals(outputLine, "immediate", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("membershipIds"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("scope"));
      //subjectSources
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("sourceIds"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("membershipIds"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsStemLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("stemScope"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("ALL_IN_SUBTREE"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("fieldType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("naming"));

      // #######################################################
      // try privs in an attributeDef

      //attributeDef.getPrivilegeDelegate().grantPriv(SubjectTestHelper.SUBJ7, AttributeDefPrivilege.ATTR_READ, false);
      //attributeDef.getPrivilegeDelegate().grantPriv(SubjectTestHelper.SUBJ8, AttributeDefPrivilege.ATTR_UPDATE, false);
      //attributeDef2.getPrivilegeDelegate().grantPriv(SubjectTestHelper.SUBJ7, AttributeDefPrivilege.ATTR_READ, false);
      //attributeDef2.getPrivilegeDelegate().grantPriv(SubjectTestHelper.SUBJ8, AttributeDefPrivilege.ATTR_UPDATE, false);

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getMembershipsWs --groupNames=aStem:aGroup,aStem:aGroup2 --stemName=aStem --stemScope=ALL_IN_SUBTREE",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(4, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("membershipIds"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("scope"));
      //subjectSources
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("sourceIds"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("membershipIds"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsStemLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("stemScope"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("ALL_IN_SUBTREE"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeDef"));

      // #######################################################
      // try all in subtree

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getMembershipsWs --subjectIds=test.subject.0,test.subject.1",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(2, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("membershipIds"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("scope"));
      //subjectSources
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("sourceIds"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("membershipIds"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsStemLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("stemScope"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("ALL_IN_SUBTREE"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsSubjectLookup"));
      
      
      
      // ######################################################
      // Try pointInTimeRetrieve

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getMembershipsWs --groupNames=aStem:aGroup,aStem:aGroup2 --pointInTimeRetrieve=true",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("pointInTimeRetrieve"));


    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testGetSubjects() throws Exception {

    // make sure group exists
    GrouperSession grouperSession = GrouperSession.startRootSession();
    Group group = Group.saveGroup(grouperSession, "aStem:aGroup", null,
        "aStem:aGroup", "aGroup", null, null, true);
    Group group2 = Group.saveGroup(grouperSession, "aStem:aGroup2", null,
        "aStem:aGroup2", "aGroup2", null, null, true);

    // give permissions
    String wsUserLabel = GrouperClientUtils.propertiesValue(
        "grouperClient.webService.user.label", true);
    String wsUserString = GrouperClientUtils.propertiesValue(
        "grouperClient.webService." + wsUserLabel, true);
    Subject wsUser = SubjectFinder.findByIdOrIdentifier(wsUserString, true);

    group.grantPriv(wsUser, AccessPrivilege.READ, false);
    group.grantPriv(wsUser, AccessPrivilege.VIEW, false);
    group2.grantPriv(wsUser, AccessPrivilege.READ, false);
    group2.grantPriv(wsUser, AccessPrivilege.VIEW, false);

    // add some subjects
    group.addMember(SubjectTestHelper.SUBJ0, false);
    group.addMember(SubjectTestHelper.SUBJ1, false);
    group2.addMember(SubjectTestHelper.SUBJ2, false);
    group2.addMember(SubjectTestHelper.SUBJ3, false);

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getSubjectsWs --subjectIds=" + SubjectTestHelper.SUBJ0_ID + "," + SubjectTestHelper.SUBJ1_ID,
          " "));
      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(2, outputLines.length);

      // match: Index: 0: subject: GrouperSystem
      // match: ^Index: (\d+)\: subject\: (.+)$
      Pattern pattern = Pattern
          .compile("^Index: (\\d+)\\: success: (T|F), code: (.+), subject\\: (.+)$");

      String outputLine = outputLines[0];

      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "T", matcher.group(2));
      assertEquals(outputLine, "SUCCESS", matcher.group(3));
      assertEquals(outputLine, "test.subject.0", matcher.group(4));

      outputLine = outputLines[1];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());

      assertEquals(outputLine, "1", matcher.group(1));
      assertEquals(outputLine, "T", matcher.group(2));
      assertEquals(outputLine, "SUCCESS", matcher.group(3));
      assertEquals(outputLine, "test.subject.1", matcher.group(4));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));

      // ######################################################
      // Try sourceIds

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getSubjectsWs --subjectIds=" + SubjectTestHelper.SUBJ0_ID + "," + SubjectTestHelper.SUBJ1_ID + " --subjectSources=jdbc,g:gsa",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(output, 2, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      //since this is a different source, it is first (g:gsa)
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "F", matcher.group(2));
      assertEquals(outputLine, "SUBJECT_NOT_FOUND", matcher.group(3));
      assertEquals(outputLine, "test.subject.1", matcher.group(4));

      outputLine = outputLines[1];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());

      assertEquals(outputLine, "1", matcher.group(1));
      assertEquals(output, "T", matcher.group(2));
      assertEquals(outputLine, "SUCCESS", matcher.group(3));
      assertEquals(outputLine, "test.subject.0", matcher.group(4));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));

      // ######################################################
      // Try sourceId

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getSubjectsWs --subjectIds=" + SubjectTestHelper.SUBJ0_ID + "," + SubjectTestHelper.SUBJ1_ID + " --subjectSources=jdbc",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(output, 2, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "T", matcher.group(2));
      assertEquals(outputLine, "SUCCESS", matcher.group(3));
      assertEquals(outputLine, "test.subject.0", matcher.group(4));

      outputLine = outputLines[1];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());

      assertEquals(outputLine, "1", matcher.group(1));
      assertEquals(outputLine, "T", matcher.group(2));
      assertEquals(outputLine, "SUCCESS", matcher.group(3));
      assertEquals(outputLine, "test.subject.1", matcher.group(4));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));

      // ######################################################
      // Try sourceId not found

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getSubjectsWs --subjectIds=" + SubjectTestHelper.SUBJ0_ID + "," + SubjectTestHelper.SUBJ1_ID + " --subjectSources=g:gsa",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(output, 2, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "F", matcher.group(2));
      assertEquals(outputLine, "SUBJECT_NOT_FOUND", matcher.group(3));
      assertEquals(outputLine, "test.subject.0", matcher.group(4));

      outputLine = outputLines[1];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());

      assertEquals(outputLine, "1", matcher.group(1));
      assertEquals(outputLine, "F", matcher.group(2));
      assertEquals(outputLine, "SUBJECT_NOT_FOUND", matcher.group(3));
      assertEquals(outputLine, "test.subject.1", matcher.group(4));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));


      //##########################################################
      //Try a source id with no results

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getSubjectsWs --subjectIds=" + SubjectTestHelper.SUBJ0_ID + "," + SubjectTestHelper.SUBJ1_ID + " --subjectSources=g:gsa,g:gsa",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(output, 2, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "F", matcher.group(2));
      assertEquals(outputLine, "SUBJECT_NOT_FOUND", matcher.group(3));
      assertEquals(outputLine, "test.subject.0", matcher.group(4));

      outputLine = outputLines[1];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());

      assertEquals(outputLine, "1", matcher.group(1));
      assertEquals(outputLine, "F", matcher.group(2));
      assertEquals(outputLine, "SUBJECT_NOT_FOUND", matcher.group(3));
      assertEquals(outputLine, "test.subject.1", matcher.group(4));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));


      //##########################################################
      //Try a identifier

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getSubjectsWs --subjectIdentifiers=id.test.subject.0,id.test.subject.1",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(output, 2, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "T", matcher.group(2));
      assertEquals(outputLine, "SUCCESS", matcher.group(3));
      assertEquals(outputLine, "test.subject.0", matcher.group(4));

      outputLine = outputLines[1];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());

      assertEquals(outputLine, "1", matcher.group(1));
      assertEquals(outputLine, "T", matcher.group(2));
      assertEquals(outputLine, "SUCCESS", matcher.group(3));
      assertEquals(outputLine, "test.subject.1", matcher.group(4));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));


      // ######################################################
      // Try filter by group

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      Group aGroup = GroupFinder.findByName(grouperSession, "aStem:aGroup", true);

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getSubjectsWs --groupUuid=" + aGroup.getUuid() + " --subjectIds=" + SubjectTestHelper.SUBJ5_ID + "," + SubjectTestHelper.SUBJ6_ID,
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(output, 0, GrouperUtil.length(outputLines));

      // ######################################################
      // Try filter by group, success

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getSubjectsWs --groupUuid=" + aGroup.getUuid() + " --subjectIds=" + SubjectTestHelper.SUBJ0_ID + "," + SubjectTestHelper.SUBJ7_ID,
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "T", matcher.group(2));
      assertEquals(outputLine, "SUCCESS", matcher.group(3));
      assertEquals(outputLine, "test.subject.0", matcher.group(4));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsGroupLookup\":\"uuid"));

      // ######################################################
      // Try filter by group, success

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getSubjectsWs --groupIdIndex=" + aGroup.getIdIndex() + " --subjectIds=" + SubjectTestHelper.SUBJ0_ID + "," + SubjectTestHelper.SUBJ7_ID,
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "T", matcher.group(2));
      assertEquals(outputLine, "SUCCESS", matcher.group(3));
      assertEquals(outputLine, "test.subject.0", matcher.group(4));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsGroupLookup\":\"idIndex"));

      // ######################################################
      // Try filter by group, success

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getSubjectsWs --groupName=" + aGroup.getName() + " --subjectIds=" + SubjectTestHelper.SUBJ0_ID + "," + SubjectTestHelper.SUBJ7_ID,
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "T", matcher.group(2));
      assertEquals(outputLine, "SUCCESS", matcher.group(3));
      assertEquals(outputLine, "test.subject.0", matcher.group(4));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsGroupLookup\":{\"groupName"));

      // ######################################################
      // Try a subject attribute name with custom template

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getSubjectsWs --subjectIds=" + SubjectTestHelper.SUBJ0_ID + " --subjectAttributeNames=a,name --outputTemplate=${wsSubject.getAttributeValue(1)}$newline$",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);
      assertEquals(outputLines[0], "my name is test.subject.0");

      // #######################################################
      // try member filter

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getSubjectsWs --groupName=" + aGroup.getName() + " --subjectIds=" + SubjectTestHelper.SUBJ0_ID + " --memberFilter=Effective",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(0, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));

      // #######################################################
      // try member filter immediate

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getSubjectsWs --groupName=" + aGroup.getName() + " --subjectIds=" + SubjectTestHelper.SUBJ0_ID + " --memberFilter=Immediate",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "T", matcher.group(2));
      assertEquals(outputLine, "SUCCESS", matcher.group(3));
      assertEquals(outputLine, "test.subject.0", matcher.group(4));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));

      // #######################################################
      // try includeGroupDetail

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getSubjectsWs --groupName=" + aGroup.getName() + " --subjectIds=" + SubjectTestHelper.SUBJ0_ID + " --includeGroupDetail=true",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));

      // #######################################################
      // try includeSubjectDetail

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getSubjectsWs --subjectIds=" + SubjectTestHelper.SUBJ0_ID + "  --includeSubjectDetail=true",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));

      // #######################################################
      // try subjectAttributeNames

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getSubjectsWs --subjectIds=" + SubjectTestHelper.SUBJ0_ID + "  --subjectAttributeNames=name",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));

      // #######################################################
      // try params

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getSubjectsWs --subjectIds=" + SubjectTestHelper.SUBJ0_ID + "  --paramName0=someParam --paramValue0=someValue",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("someParam")
              && GrouperClientWs.mostRecentRequest.toLowerCase().contains(
                  "params")
              && GrouperClientWs.mostRecentRequest.contains("someValue"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));

      // #######################################################
      // try fieldName

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getSubjectsWs --groupName=aStem:aGroup --subjectIds=" + SubjectTestHelper.SUBJ0_ID + "  --fieldName=members",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("fieldName")
              && GrouperClientWs.mostRecentRequest.contains("members"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));

      // #######################################################
      // try actAsSubject

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getSubjectsWs --subjectIds=" + SubjectTestHelper.SUBJ0_ID + "  --actAsSubjectId=GrouperSystem",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("actAsSubject")
              && GrouperClientWs.mostRecentRequest.contains("GrouperSystem"));

      // #######################################################
      // try actAsSubject but with alias

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getSubjectsWs --subjectIds=" + SubjectTestHelper.SUBJ0_ID + "  --actAsPennId=GrouperSystem",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("actAsSubject")
              && GrouperClientWs.mostRecentRequest.contains("GrouperSystem"));
      //subjectSources
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("sourceIds"));

      // #######################################################
      // try searchString

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getSubjectsWs --searchString=test",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertTrue(output, 8 < GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));
      //subjectSources
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("sourceIds"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookup"));


      // #######################################################
      // try searchString

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getSubjectsWs --searchString=test --sourceIds=jdbc",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertTrue(output, 8 < GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));
      //subjectSources
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("sourceIds"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookup"));


      // #######################################################
      // try subjectSources

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getSubjectsWs --searchString=test --sourceIds=g:gsa",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(output, 0, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("memberFilter"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("fieldName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubject"));
      //subjectSources
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("sourceIds"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookup"));



    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testAssignGrouperPrivileges() throws Exception {

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=assignGrouperPrivilegesWs --groupName=aStem:aGroup --subjectIds=test.subject.0 --privilegeNames=optin --allowed=true",
                  " "));
      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      Pattern pattern = Pattern
          .compile("^Index: ([0-9]+), success: (T|F), code: (.+), (group|stem): (.*), subject: (.+), (.+): (.+)$");
      Matcher matcher = pattern.matcher(outputLines[0]);

      assertEquals(output, 1, GrouperClientUtils.length(outputLines));
      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("T", matcher.group(2));
      assertEquals("SUCCESS_ALLOWED", matcher.group(3));
      assertEquals("group", matcher.group(4));
      assertEquals("aStem:aGroup", matcher.group(5));
      assertEquals("test.subject.0", matcher.group(6));
      assertEquals("access", matcher.group(7));
      assertEquals("optin", matcher.group(8));

      // #####################################################
      // run again with subject identifier, and privilege type
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=assignGrouperPrivilegesWs --groupName=aStem:aGroup --subjectIdentifiers=id.test.subject.0 --privilegeType=access --privilegeNames=optin --allowed=true",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertEquals(GrouperClientUtils.length(outputLines), 1);
      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("T", matcher.group(2));
      assertEquals("SUCCESS_ALLOWED_ALREADY_EXISTED", matcher.group(3));
      assertEquals("group", matcher.group(4));
      assertEquals("aStem:aGroup", matcher.group(5));
      assertEquals("test.subject.0", matcher.group(6));
      assertEquals("access", matcher.group(7));
      assertEquals("optin", matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("access")
              && GrouperClientWs.mostRecentRequest.contains("privilegeType")
              && GrouperClientWs.mostRecentRequest
                  .contains("id.test.subject.0"));

      // #####################################################
      // run with invalid args
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // test a command line template
      try {
        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=assignGrouperPrivilegesWs --groupName=aStem:aGroup --subjectIds=test.subject.0 --privilegeNames=optin --allowed=true --ousdfsdfate=${index}",
                    " "));
      } catch (Exception e) {
        assertTrue(e.getMessage(), e.getMessage().contains("ousdfsdfate"));
      }
      System.out.flush();

      System.setOut(systemOut);

      // #####################################################
      // run with custom template
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      // test a command line template
      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=assignGrouperPrivilegesWs --groupName=aStem:aGroup --pennKeys=id.test.subject.0 --privilegeNames=optin --allowed=true --outputTemplate=${wsSubject.identifierLookup}",
                  " "));

      System.out.flush();

      output = new String(baos.toByteArray());

      assertEquals("id.test.subject.0", output);

      System.setOut(systemOut);

      // #####################################################
      // run again, with stem
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=assignGrouperPrivilegesWs --stemName=aStem --pennKeys=id.test.subject.0 --privilegeNames=stem --allowed=true",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertEquals(GrouperClientUtils.length(outputLines), 1);
      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("T", matcher.group(2));
      assertEquals("SUCCESS_ALLOWED_ALREADY_EXISTED", matcher.group(3));
      assertEquals("stem", matcher.group(4));
      assertEquals("aStem", matcher.group(5));
      assertEquals("test.subject.0", matcher.group(6));
      assertEquals("naming", matcher.group(7));
      assertEquals("stemAdmin", matcher.group(8));

      // #####################################################
      // run again, with includeGroupDetail and includeSubjectDetail
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=assignGrouperPrivilegesWs --groupName=aStem:aGroup --subjectIds=test.subject.0 --includeGroupDetail=true --includeSubjectDetail=true --privilegeNames=optin --allowed=false",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertEquals(GrouperClientUtils.length(outputLines), 1);
      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("T", matcher.group(2));
      assertEquals("SUCCESS_NOT_ALLOWED", matcher.group(3));
      assertEquals("group", matcher.group(4));
      assertEquals("aStem:aGroup", matcher.group(5));
      assertEquals("test.subject.0", matcher.group(6));
      assertEquals("access", matcher.group(7));
      assertEquals("optin", matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest
          .contains("includeGroupDetail")
          && GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));

      // #####################################################
      // run again, with subject attributes
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=assignGrouperPrivilegesWs --groupName=aStem:aGroup --subjectIds=test.subject.0 --subjectAttributeNames=name --privilegeNames=optin --allowed=false --outputTemplate=${index}:$space$${wsSubject.getAttributeValue(0)}$newline$",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertTrue(outputLines[0], outputLines[0]
          .contains("my name is test.subject.0"));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("\"name\""));
      assertTrue(GrouperClientWs.mostRecentResponse
          .contains("my name is test.subject.0"));

      // #####################################################
      // run again, with params
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=assignGrouperPrivilegesWs --groupName=aStem:aGroup --privilegeNames=optin --allowed=false --subjectIds=test.subject.0 --paramName0=whatever --paramValue0=someValue",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertEquals(GrouperClientUtils.length(outputLines), 1);
      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("T", matcher.group(2));
      assertEquals("SUCCESS_NOT_ALLOWED_DIDNT_EXIST", matcher.group(3));
      assertEquals("group", matcher.group(4));
      assertEquals("aStem:aGroup", matcher.group(5));
      assertEquals("test.subject.0", matcher.group(6));
      assertEquals("access", matcher.group(7));
      assertEquals("optin", matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest.contains("whatever")
          && GrouperClientWs.mostRecentRequest.contains("someValue"));

      // #####################################################
      // run again, replace existing
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperSession grouperSession = GrouperSession.startRootSession();

      Group replaceGroup = new GroupSave(grouperSession).assignGroupNameToEdit("aStem:replaceExisting")
        .assignName("aStem:replaceExisting").assignCreateParentStemsIfNotExist(true).save();

      Set<Subject> subjects = grouperSession.getAccessResolver().getSubjectsWithPrivilege(replaceGroup, AccessPrivilege.UPDATE);

      assertEquals(0, GrouperUtil.length(subjects));

      replaceGroup.grantPriv(SubjectTestHelper.SUBJ0, AccessPrivilege.UPDATE);

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=assignGrouperPrivilegesWs --groupName=aStem:replaceExisting --privilegeNames=update --allowed=true --subjectIds=test.subject.4 --replaceAllExisting=true",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      matcher = pattern.matcher(outputLines[0]);

      assertEquals(GrouperClientUtils.length(outputLines), 1);
      assertTrue(outputLines[0], matcher.matches());

      assertEquals("0", matcher.group(1));
      assertEquals("T", matcher.group(2));
      assertEquals("SUCCESS_ALLOWED", matcher.group(3));
      assertEquals("group", matcher.group(4));
      assertEquals("aStem:replaceExisting", matcher.group(5));
      assertEquals("test.subject.4", matcher.group(6));
      assertEquals("access", matcher.group(7));
      assertEquals("update", matcher.group(8));

      subjects = grouperSession.getAccessResolver().getSubjectsWithPrivilege(replaceGroup, AccessPrivilege.UPDATE);

      assertEquals(1, GrouperUtil.length(subjects));
      assertEquals(SubjectTestHelper.SUBJ4_ID, subjects.iterator().next().getId());
    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testGetAttributeAssignsGroup() throws Exception {

    AttributeDefName attributeDefName = AttributeDefNameTest.exampleAttributeDefNameDb("test", "testAttributeAssignDefName");
    AttributeDefName attributeDefName2 = AttributeDefNameTest.exampleAttributeDefNameDb("test", "testAttributeAssignAssignName");

    final AttributeDef attributeDef = attributeDefName.getAttributeDef();

    final AttributeDef attributeDef2 = attributeDefName2.getAttributeDef();

    attributeDef2.setAssignToGroup(false);
    attributeDef2.setAssignToGroupAssn(true);
    attributeDef2.store();

    Group group = new GroupSave(GrouperSession.staticGrouperSession()).assignSaveMode(SaveMode.INSERT_OR_UPDATE)
      .assignGroupNameToEdit("test:groupTestAttrAssign").assignName("test:groupTestAttrAssign").assignCreateParentStemsIfNotExist(true)
      .assignDescription("description").save();

    //test subject 0 can view and read
    group.grantPriv(SubjectTestHelper.SUBJ0, AccessPrivilege.VIEW);
    attributeDef.getPrivilegeDelegate().grantPriv(SubjectTestHelper.SUBJ0, AttributeDefPrivilege.ATTR_READ, false);

    //test subject 0 can read the assignment on assignment
    attributeDef2.getPrivilegeDelegate().grantPriv(SubjectTestHelper.SUBJ0, AttributeDefPrivilege.ATTR_READ, false);

    AttributeAssignResult attributeAssignResult = group.getAttributeDelegate().assignAttribute(attributeDefName);
    AttributeAssign attributeAssign = attributeAssignResult.getAttributeAssign();

    AttributeAssignResult attributeAssignResult2 = attributeAssign.getAttributeDelegate().assignAttribute(attributeDefName2);
    AttributeAssign attributeAssign2 = attributeAssignResult2.getAttributeAssign();

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group --attributeDefNames=test:testAttributeAssignDefNameDef",
          " "));
      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group, owner: test:groupTestAttrAssign, attributeDefNameName test:testAttributeAssignDefName, action: assign, values: 15,5,5, enable: T, id: a9c83eeb78c04ae5befcea36272d318c
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      Pattern pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");
      String outputLine = outputLines[0];

      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("\"name\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));

      // ######################################################
      // Try attributeDefId

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group --attributeDefUuids=" + attributeDef.getId(),
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));


      // ######################################################
      // Try attributeDefIdIndex

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group --attributeDefIdIndexes=" + attributeDef.getIdIndex(),
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("\"idIndex\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));


      // ######################################################
      // Try attributeDefNameName

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group --attributeDefNameNames=" + attributeDefName.getName(),
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups") && GrouperClientWs.mostRecentRequest.contains("\"name\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));



      // ######################################################
      // Try attributeDefNameUuid

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group --attributeDefNameUuids=" + attributeDefName.getId(),
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));

      // ######################################################
      // Try attributeDefNameIdIndex

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group --attributeDefNameIdIndexes=" + attributeDefName.getIdIndex(),
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups") && GrouperClientWs.mostRecentRequest.contains("\"idIndex\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));


      // ######################################################
      // Try ownerGroupNames

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group --ownerGroupNames=" + group.getName(),
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));




      // ######################################################
      // Try ownerGroupUuids

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group --ownerGroupUuids=" + group.getId(),
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));


      // ######################################################
      // Try ownerGroupUuids

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group --ownerGroupIdIndexes=" + group.getIdIndex(),
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));



      // ######################################################
      // Try enabled

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group --ownerGroupUuids=" + group.getId()
          + " --enabled=F",
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertTrue(outputLines == null || outputLines.length == 0 || StringUtils.isBlank(outputLines[0]));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));


      // ######################################################
      // Try actions

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group --ownerGroupUuids=" + group.getId()
          + " --actions=a",
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertTrue(outputLines == null || outputLines.length == 0 || StringUtils.isBlank(outputLines[0]));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));


      // ######################################################
      // Try includeAssignmentsOnAssignments

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group --ownerGroupUuids=" + group.getId()
          + " --includeAssignmentsOnAssignments=T",
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

//      assertTrue(outputLines == null || outputLines.length == 0 || StringUtils.isBlank(outputLines[0]));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      outputLine = outputLines[1];

      matcher = pattern.matcher(outputLine);

      //Index: 1: attributeAssignType: group_asgn, owner: e11b0b9174ec474184e878ac3e5e27e3, attributeDefNameName: test:testAttributeAssignAssignName,
      //action: assign, values: none, enabled: T, id: e11b0b9174ec474184e878ac3e5e27e3 expected:<test:groupTestAttrAssign> but was:<e11b0b9174ec474184e878ac3e5e27e3>

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "1", matcher.group(1));
      assertEquals(outputLine, "group_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));




      // ######################################################
      // Try includeGroupDetail

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group --ownerGroupUuids=" + group.getId()
          + " --includeGroupDetail=T",
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertTrue(GrouperClientWs.mostRecentResponse,
          GrouperClientWs.mostRecentResponse.contains("hasComposite"));




      // ######################################################
      // Try includeSubjectDetail

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group --ownerGroupUuids=" + group.getId()
          + " --includeSubjectDetail=T",
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));





      // ######################################################
      // Try subjectAttributeNames

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group --ownerGroupUuids=" + group.getId()
          + " --subjectAttributeNames=abc",
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames")
          && GrouperClientWs.mostRecentRequest.contains("abc"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));




      // ######################################################
      // Try params

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group --ownerGroupUuids=" + group.getId()
          + " --paramName0=a --paramValue0=b",
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));



      // ######################################################
      // Try attributeAssignLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group --attributeAssignUuids=" + attributeAssign.getId(),
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));



      // ######################################################
      // Try attributeAssignLookups custom template

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group --attributeAssignUuids=" + attributeAssign.getId()
          + " --outputTemplate=${wsAttributeAssign.attributeAssignType}$newline$",
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = GrouperClientUtils.trim(outputLines[0]);

      assertEquals(outputLine, "group", outputLine);

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));


      // ######################################################
      // Try actAs

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group --attributeAssignUuids=" + attributeAssign.getId()
          + " --actAsSubjectId=GrouperSystem",
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));





    } finally {
      System.setOut(systemOut);
    }

  }
  
  /**
   * @throws Exception
   */
  public void testGetAttributeAssignActions() throws Exception {

    AttributeDefName nameOfAttributeDef = AttributeDefNameTest.exampleAttributeDefNameDb("test", "testAttributeAssignDefName");

    final AttributeDef attributeDef = nameOfAttributeDef.getAttributeDef();
    attributeDef.getAttributeDefActionDelegate().addAction("read");
    attributeDef.store();

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignActionsWs --namesOfAttributeDefs=test:testAttributeAssignDefNameDef",
          " "));
      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      Pattern pattern = Pattern
          .compile("^Index: (\\d+)\\: nameOfAttributeDef\\: (.+), action: (.+)$");
      String outputLine = outputLines[0];

      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "test:testAttributeAssignDefNameDef", matcher.group(2));
      assertTrue(outputLine, matcher.group(3).equals("read") || matcher.group(3).equals("assign"));
      
      outputLine = outputLines[1];
      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "1", matcher.group(1));
      assertEquals(outputLine, "test:testAttributeAssignDefNameDef", matcher.group(2));
      assertTrue(outputLine, matcher.group(3).equals("read") || matcher.group(3).equals("assign"));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("\"name\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));

      // ######################################################
      // Try attributeDefId

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignActionsWs --uuidsOfAttributeDefs=" + attributeDef.getId(),
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "test:testAttributeAssignDefNameDef", matcher.group(2));
      assertTrue(outputLine, matcher.group(3).equals("read") || matcher.group(3).equals("assign"));

      outputLine = outputLines[1];
      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "1", matcher.group(1));
      assertEquals(outputLine, "test:testAttributeAssignDefNameDef", matcher.group(2));
      assertTrue(outputLine, matcher.group(3).equals("read") || matcher.group(3).equals("assign"));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));

      // ######################################################
      // Try attributeDefIdIndex

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignActionsWs --idIndexesOfAttributeDefs=" + attributeDef.getIdIndex(),
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "test:testAttributeAssignDefNameDef", matcher.group(2));
      assertTrue(outputLine, matcher.group(3).equals("read") || matcher.group(3).equals("assign"));
      
      outputLine = outputLines[1];
      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "1", matcher.group(1));
      assertEquals(outputLine, "test:testAttributeAssignDefNameDef", matcher.group(2));
      assertTrue(outputLine, matcher.group(3).equals("read") || matcher.group(3).equals("assign"));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("\"idIndex\""));

      // ######################################################
      // Try actions

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignActionsWs --idIndexesOfAttributeDefs=" + attributeDef.getIdIndex() +" --actions=read", " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertTrue(outputLines.length == 1);

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      
      // ######################################################
      // Try params

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignActionsWs --idIndexesOfAttributeDefs=" + attributeDef.getIdIndex() +" --paramName0=a --paramValue0=b",
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "test:testAttributeAssignDefNameDef", matcher.group(2));
      assertTrue(outputLine, matcher.group(3).equals("read") || matcher.group(3).equals("assign"));
      
      outputLine = outputLines[1];
      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "1", matcher.group(1));
      assertEquals(outputLine, "test:testAttributeAssignDefNameDef", matcher.group(2));
      assertTrue(outputLine, matcher.group(3).equals("read") || matcher.group(3).equals("assign"));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      
      // ######################################################
      // Try actAs

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignActionsWs --idIndexesOfAttributeDefs=" + attributeDef.getIdIndex() +" --actAsSubjectId=GrouperSystem", " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "test:testAttributeAssignDefNameDef", matcher.group(2));
      assertTrue(outputLine, matcher.group(3).equals("read") || matcher.group(3).equals("assign"));
      
      outputLine = outputLines[1];
      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "1", matcher.group(1));
      assertEquals(outputLine, "test:testAttributeAssignDefNameDef", matcher.group(2));
      assertTrue(outputLine, matcher.group(3).equals("read") || matcher.group(3).equals("assign"));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      
    } finally {
      System.setOut(systemOut);
    }

  }
  
  /**
   * @throws Exception
   */
  public void testAssignActionsToAttributeDef() throws Exception {

    AttributeDefName nameOfAttributeDef = AttributeDefNameTest.exampleAttributeDefNameDb(
        "test", "testAttributeAssignDefName");

    final AttributeDef attributeDef = nameOfAttributeDef.getAttributeDef();

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=assignAttributeDefActionsWs --nameOfAttributeDef=test:testAttributeAssignDefNameDef --actions=read,assign --assign=T",
                  " "));
      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      Pattern pattern = Pattern
          .compile("^Index (\\d+)\\: nameOfAttributeDef\\: (.+), action: (.+), status: (.+)$");
      String outputLine = outputLines[0];

      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "test:testAttributeAssignDefNameDef", matcher.group(2));
      assertEquals(outputLine, "read", matcher.group(3));
      assertEquals(outputLine, "ADDED", matcher.group(4));

      outputLine = outputLines[1];
      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "1", matcher.group(1));
      assertEquals(outputLine, "test:testAttributeAssignDefNameDef", matcher.group(2));
      assertEquals(outputLine, "assign", matcher.group(3));
      assertEquals(outputLine, "ASSIGNED_ALREADY", matcher.group(4));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookup")
              && GrouperClientWs.mostRecentRequest.contains("\"name\""));

      // ######################################################
      // Try attributeDefId

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributeDefActionsWs --uuidOfAttributeDef="
              + attributeDef.getId() + " --actions=read,assign --assign=T",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "test:testAttributeAssignDefNameDef", matcher.group(2));
      assertEquals(outputLine, "read", matcher.group(3));
      assertEquals(outputLine, "ASSIGNED_ALREADY", matcher.group(4));

      outputLine = outputLines[1];
      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "1", matcher.group(1));
      assertEquals(outputLine, "test:testAttributeAssignDefNameDef", matcher.group(2));
      assertEquals(outputLine, "assign", matcher.group(3));
      assertEquals(outputLine, "ASSIGNED_ALREADY", matcher.group(4));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookup")
              && GrouperClientWs.mostRecentRequest.contains("uuid"));

      // ######################################################
      // Try attributeDefIdIndex

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributeDefActionsWs --idIndexOfAttributeDef="
              + attributeDef.getIdIndex() + " --actions=delete,assign --assign=T",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "test:testAttributeAssignDefNameDef", matcher.group(2));
      assertEquals(outputLine, "delete", matcher.group(3));
      assertEquals(outputLine, "ADDED", matcher.group(4));

      outputLine = outputLines[1];
      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "1", matcher.group(1));
      assertEquals(outputLine, "test:testAttributeAssignDefNameDef", matcher.group(2));
      assertEquals(outputLine, "assign", matcher.group(3));
      assertEquals(outputLine, "ASSIGNED_ALREADY", matcher.group(4));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookup")
              && GrouperClientWs.mostRecentRequest.contains("\"idIndex\""));

      // ######################################################
      // Try replacing actions

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributeDefActionsWs --idIndexOfAttributeDef="
              + attributeDef.getIdIndex()
              + " --actions=view --assign=T --replaceAllExisting=T",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      List<String> existingActions = new ArrayList<String>();
      existingActions.add("read");
      existingActions.add("assign");
      existingActions.add("delete");

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "test:testAttributeAssignDefNameDef", matcher.group(2));
      assertTrue(outputLine, existingActions.contains(matcher.group(3)));
      assertEquals(outputLine, "DELETED", matcher.group(4));

      outputLine = outputLines[1];
      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "1", matcher.group(1));
      assertEquals(outputLine, "test:testAttributeAssignDefNameDef", matcher.group(2));
      assertTrue(outputLine, existingActions.contains(matcher.group(3)));
      assertEquals(outputLine, "DELETED", matcher.group(4));

      outputLine = outputLines[2];
      matcher = pattern.matcher(outputLines[2]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "2", matcher.group(1));
      assertEquals(outputLine, "test:testAttributeAssignDefNameDef", matcher.group(2));
      assertTrue(outputLine, existingActions.contains(matcher.group(3)));
      assertEquals(outputLine, "DELETED", matcher.group(4));

      outputLine = outputLines[3];
      matcher = pattern.matcher(outputLines[3]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "3", matcher.group(1));
      assertEquals(outputLine, "test:testAttributeAssignDefNameDef", matcher.group(2));
      assertEquals(outputLine, "view", matcher.group(3));
      assertEquals(outputLine, "ADDED", matcher.group(4));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookup")
              && GrouperClientWs.mostRecentRequest.contains("\"idIndex\""));

      // ######################################################
      // Try removing actions

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributeDefActionsWs --idIndexOfAttributeDef="
              + attributeDef.getIdIndex() + " --actions=view --assign=F",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "test:testAttributeAssignDefNameDef", matcher.group(2));
      assertEquals(outputLine, "view", matcher.group(3));
      assertEquals(outputLine, "DELETED", matcher.group(4));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookup")
              && GrouperClientWs.mostRecentRequest.contains("\"idIndex\""));

      // ######################################################
      // Try params

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributeDefActionsWs --idIndexOfAttributeDef="
              + attributeDef.getIdIndex()
              + " --actions=view --assign=T --paramName0=a --paramValue0=b",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "test:testAttributeAssignDefNameDef", matcher.group(2));
      assertEquals(outputLine, "view", matcher.group(3));
      assertEquals(outputLine, "ADDED", matcher.group(4));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookup")
              && GrouperClientWs.mostRecentRequest.contains("\"idIndex\""));

      // ######################################################
      // Try actAs

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributeDefActionsWs --idIndexOfAttributeDef="
              + attributeDef.getIdIndex()
              + " --actions=view --assign=T --actAsSubjectId=GrouperSystem",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "test:testAttributeAssignDefNameDef", matcher.group(2));
      assertEquals(outputLine, "view", matcher.group(3));
      assertEquals(outputLine, "ASSIGNED_ALREADY", matcher.group(4));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookup")
              && GrouperClientWs.mostRecentRequest.contains("\"idIndex\""));

    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testGetAttributeAssignsStem() throws Exception {

    AttributeDefName attributeDefName = AttributeDefNameTest.exampleAttributeDefNameDb("test", "testAttributeAssignDefName");

    final AttributeDef attributeDef = attributeDefName.getAttributeDef();

    attributeDef.setAssignToGroup(false);
    attributeDef.setAssignToStem(true);
    attributeDef.store();

    Stem stem = new StemSave(GrouperSession.staticGrouperSession()).assignSaveMode(SaveMode.INSERT_OR_UPDATE)
      .assignStemNameToEdit("test:stemTestAttrAssign").assignName("test:stemTestAttrAssign").assignCreateParentStemsIfNotExist(true)
      .assignDescription("description").save();

    AttributeAssignResult attributeAssignResult = stem.getAttributeDelegate().assignAttribute(attributeDefName);
    AttributeAssign attributeAssign = attributeAssignResult.getAttributeAssign();


    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=stem --attributeDefNames=test:testAttributeAssignDefNameDef",
          " "));
      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: stem, owner: test:stemTestAttrAssign, attributeDefNameName test:testAttributeAssignDefName, action: assign, values: none, enable: T, id: a9c83eeb78c04ae5befcea36272d318c
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      Pattern pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");
      String outputLine = outputLines[0];

      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "stem", matcher.group(2));
      assertEquals(outputLine, "test:stemTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("\"name\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));

      // ######################################################
      // Try wsOwnerStemUuids

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=stem --ownerStemUuids=" + stem.getUuid(),
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "stem", matcher.group(2));
      assertEquals(outputLine, "test:stemTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));


      // ######################################################
      // Try wsOwnerStemNames

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=stem --ownerStemNames=" + stem.getName(),
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "stem", matcher.group(2));
      assertEquals(outputLine, "test:stemTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));




    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testGetAttributeAssignsMember() throws Exception {

    AttributeDefName attributeDefName = AttributeDefNameTest.exampleAttributeDefNameDb("test", "testAttributeAssignDefName");

    final AttributeDef attributeDef = attributeDefName.getAttributeDef();

    attributeDef.setAssignToGroup(false);
    attributeDef.setAssignToMember(true);
    attributeDef.store();

    GrouperSession grouperSession = GrouperSession.startRootSession();

    Member member = MemberFinder.findBySubject(grouperSession, SubjectTestHelper.SUBJ0, true);

    AttributeAssignResult attributeAssignResult = member.getAttributeDelegate().assignAttribute(attributeDefName);
    AttributeAssign attributeAssign = attributeAssignResult.getAttributeAssign();


    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=member --attributeDefNames=test:testAttributeAssignDefNameDef",
          " "));
      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: member, owner: test:stemTestAttrAssign, attributeDefNameName test:testAttributeAssignDefName, action: assign, values: none, enable: T, id: a9c83eeb78c04ae5befcea36272d318c
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      Pattern pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");
      String outputLine = outputLines[0];

      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "member", matcher.group(2));
      assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("\"name\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));

      // ######################################################
      // Try wsOwnerMemberUuids

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=member --owner0SubjectId=" + member.getSubjectId(),
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "member", matcher.group(2));
      assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));


      // ######################################################
      // Try wsOwnerStemNames

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=member --owner0SubjectIdentifier=id.test.subject.0",
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "member", matcher.group(2));
      assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));




    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testGetAttributeAssignsMembership() throws Exception {

    AttributeDefName attributeDefName = AttributeDefNameTest.exampleAttributeDefNameDb("test", "testAttributeAssignDefName");

    final AttributeDef attributeDef = attributeDefName.getAttributeDef();

    attributeDef.setAssignToGroup(false);
    attributeDef.setAssignToImmMembership(true);
    attributeDef.store();

    Group group1 = new GroupSave(GrouperSession.staticGrouperSession()).assignSaveMode(SaveMode.INSERT_OR_UPDATE)
      .assignGroupNameToEdit("test:membershipTestAttrAssign").assignName("test:membershipTestAttrAssign").assignCreateParentStemsIfNotExist(true)
      .assignDescription("description").save();

    group1.addMember(SubjectTestHelper.SUBJ0);

    Membership membership = group1.getMemberships(FieldFinder.find("members", true)).iterator().next();


    AttributeAssignResult attributeAssignResult = membership.getAttributeDelegate().assignAttribute(attributeDefName);
    AttributeAssign attributeAssign = attributeAssignResult.getAttributeAssign();


    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=imm_mem --attributeDefNames=test:testAttributeAssignDefNameDef",
          " "));
      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: member, owner: test:stemTestAttrAssign, attributeDefNameName test:testAttributeAssignDefName, action: assign, values: none, enable: T, id: a9c83eeb78c04ae5befcea36272d318c
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      Pattern pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");
      String outputLine = outputLines[0];

      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "imm_mem", matcher.group(2));
      assertEquals(outputLine, membership.getImmediateMembershipId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("\"name\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));

      // ######################################################
      // Try wsOwnerMemberUuids

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=imm_mem --ownerMembershipUuids=" + membership.getUuid(),
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "imm_mem", matcher.group(2));
      assertEquals(outputLine, membership.getImmediateMembershipId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));



    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testGetAttributeAssignsAnyMembership() throws Exception {

    GrouperSession grouperSession = GrouperSession.startRootSession();

    AttributeDefName attributeDefName = AttributeDefNameTest.exampleAttributeDefNameDb("test", "testAttributeAssignDefName");

    final AttributeDef attributeDef = attributeDefName.getAttributeDef();

    attributeDef.setAssignToGroup(false);
    attributeDef.setAssignToEffMembership(true);
    attributeDef.store();

    Group group1 = new GroupSave(GrouperSession.staticGrouperSession()).assignSaveMode(SaveMode.INSERT_OR_UPDATE)
      .assignGroupNameToEdit("test:anyMembershipTestAttrAssign").assignName("test:anyMembershipTestAttrAssign").assignCreateParentStemsIfNotExist(true)
      .assignDescription("description").save();

    Group group2 = new GroupSave(GrouperSession.staticGrouperSession()).assignSaveMode(SaveMode.INSERT_OR_UPDATE)
      .assignGroupNameToEdit("test:anyMembershipTestAttrAssign2").assignName("test:anyMembershipTestAttrAssign2").assignCreateParentStemsIfNotExist(true)
      .assignDescription("description").save();

    //add one group to another to make effective membership and add attribute to that membership
    group1.addMember(group2.toSubject());
    group2.addMember(SubjectTestHelper.SUBJ0);

    Member member = MemberFinder.findBySubject(grouperSession, SubjectTestHelper.SUBJ0, false);

    Membership membership = (Membership)MembershipFinder.findMemberships(GrouperUtil.toSet(group1.getId()),
        GrouperUtil.toSet(member.getUuid()), null, null, FieldFinder.find("members", true), null, null, null, null, null).iterator().next()[0];

    AttributeAssignResult attributeAssignResult = membership.getAttributeDelegateEffMship().assignAttribute(attributeDefName);
    AttributeAssign attributeAssign = attributeAssignResult.getAttributeAssign();


    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=any_mem --attributeDefNames=test:testAttributeAssignDefNameDef",
          " "));
      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: any_mem, owner: test:stemTestAttrAssign, attributeDefNameName test:testAttributeAssignDefName, action: assign, values: none, enable: T, id: a9c83eeb78c04ae5befcea36272d318c
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      Pattern pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");
      String outputLine = outputLines[0];

      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "any_mem", matcher.group(2));
      assertEquals(outputLine, "test:anyMembershipTestAttrAssign - jdbc - test.subject.0", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));

      // ######################################################
      // Try wsOwnerMemberAnyLookup

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=any_mem --ownerMembershipAny0SubjectId=" + member.getSubjectId()
          + " --ownerMembershipAny0GroupName=" + group1.getName(),
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "any_mem", matcher.group(2));
      assertEquals(outputLine, "test:anyMembershipTestAttrAssign - jdbc - test.subject.0", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));


      // ######################################################
      // Try wsOwnerMemberAnyLookup

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=any_mem --ownerMembershipAny0SubjectId=" + member.getSubjectId()
          + " --ownerMembershipAny0GroupIdIndex=" + group1.getIdIndex(),
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "any_mem", matcher.group(2));
      assertEquals(outputLine, "test:anyMembershipTestAttrAssign - jdbc - test.subject.0", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));



    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testGetAttributeAssignsAttributeDef() throws Exception {

    AttributeDefName attributeDefName = AttributeDefNameTest.exampleAttributeDefNameDb(
        "test", "testAttributeAssignDefName");

    final AttributeDef attributeDef = attributeDefName.getAttributeDef();

    attributeDef.setAssignToGroup(false);
    attributeDef.setAssignToAttributeDef(true);
    attributeDef.store();

    AttributeDef attributeDefAssignTo = AttributeDefTest.exampleAttributeDefDb("test",
        "testAttributeDefAssignTo");

    AttributeAssignResult attributeAssignResult = attributeDefAssignTo
        .getAttributeDelegate().assignAttribute(attributeDefName);
    AttributeAssign attributeAssign = attributeAssignResult.getAttributeAssign();

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getAttributeAssignmentsWs --attributeAssignType=attr_def --attributeDefNames=test:testAttributeAssignDefNameDef",
                  " "));
      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: stem, owner: test:stemTestAttrAssign, attributeDefNameName test:testAttributeAssignDefName, action: assign, values: none, enable: T, id: a9c83eeb78c04ae5befcea36272d318c
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      Pattern pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");
      String outputLine = outputLines[0];

      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "attr_def", matcher.group(2));
      assertEquals(outputLine, "test:testAttributeDefAssignTo", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups")
              && GrouperClientWs.mostRecentRequest.contains("\"name\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));

      // ######################################################
      // Try wsAttrDefUuids

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=getAttributeAssignmentsWs --attributeAssignType=attr_def --ownerAttributeDefUuids="
                      + attributeDefAssignTo.getUuid(),
                  " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "attr_def", matcher.group(2));
      assertEquals(outputLine, "test:testAttributeDefAssignTo", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));

    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testAssignAttributesGroup() throws Exception {

    AttributeDefName attributeDefName = AttributeDefNameTest.exampleAttributeDefNameDb("test", "testAttributeAssignDefName");

    final AttributeDef attributeDef = attributeDefName.getAttributeDef();

    attributeDef.setValueType(AttributeDefValueType.integer);
    attributeDef.setMultiValued(true);
    attributeDef.store();

    Group group = new GroupSave(GrouperSession.staticGrouperSession()).assignSaveMode(SaveMode.INSERT_OR_UPDATE)
      .assignGroupNameToEdit("test:groupTestAttrAssign").assignName("test:groupTestAttrAssign").assignCreateParentStemsIfNotExist(true)
      .assignDescription("description").save();

    //test subject 0 can view and read
    group.grantPriv(SubjectTestHelper.SUBJ0, AccessPrivilege.VIEW);
    attributeDef.getPrivilegeDelegate().grantPriv(SubjectTestHelper.SUBJ0, AttributeDefPrivilege.ATTR_READ, false);

    AttributeAssign attributeAssign = null;
    //    AttributeAssignResult attributeAssignResult = group.getAttributeDelegate().assignAttribute(attributeDefName);
    //     = attributeAssignResult.getAttributeAssign();

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesWs --attributeAssignType=group --attributeAssignOperation=assign_attr " +
          "--attributeDefNameNames=test:testAttributeAssignDefName --ownerGroupNames=test:groupTestAttrAssign",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group, owner: test:groupTestAttrAssign, attributeDefNameNameName test:testAttributeAssignDefName, action: assign, values: 15,5,5, enable: T, id: a9c83eeb78c04ae5befcea36272d318c, changed: true, valuesChanged: false
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F), changed\: (T|F), valuesChanged\: (T|F)$
      Pattern pattern = Pattern
        .compile("^Index\\: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName\\: (.+), action\\: (.+), " +
            "values\\: (.+), enabled\\: (T|F), id\\: (.+), changed\\: (T|F), deleted\\: (T|F), valuesChanged\\: (T|F)$");
      String outputLine = outputLines[0];

      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "T", matcher.group(9));
      assertEquals(outputLine, "F", matcher.group(10));
      assertEquals(outputLine, "F", matcher.group(11));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));


      // ######################################################
      // Try attributeDefNameId

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesWs --attributeAssignType=group --attributeAssignOperation=assign_attr " +
          "--attributeDefNameUuids=" + attributeDefName.getId() +  " --ownerGroupNames=test:groupTestAttrAssign",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "F", matcher.group(9));
      assertEquals(outputLine, "F", matcher.group(10));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains(attributeDefName.getId()));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));

      // ######################################################
      // Try attributeDefNameIdIndex

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesWs --attributeAssignType=group --attributeAssignOperation=assign_attr " +
          "--attributeDefNameIdIndexes=" + attributeDefName.getIdIndex() +  " --ownerGroupNames=test:groupTestAttrAssign",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "F", matcher.group(9));
      assertEquals(outputLine, "F", matcher.group(10));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains(attributeDefName.getIdIndex().toString()));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));

      // ######################################################
      // Try ownerGroupUuid

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesWs --attributeAssignType=group --attributeAssignOperation=assign_attr " +
          "--attributeDefNameNames=test:testAttributeAssignDefName --ownerGroupUuids=" + group.getUuid(),
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "F", matcher.group(9));
      assertEquals(outputLine, "F", matcher.group(10));
      assertEquals(outputLine, "F", matcher.group(11));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups")
          && GrouperClientWs.mostRecentRequest.contains(group.getUuid()));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));

      // ######################################################
      // Try ownerGroupIdIndex

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesWs --attributeAssignType=group --attributeAssignOperation=assign_attr " +
          "--attributeDefNameNames=test:testAttributeAssignDefName --ownerGroupIdIndexes=" + group.getIdIndex(),
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "F", matcher.group(9));
      assertEquals(outputLine, "F", matcher.group(10));
      assertEquals(outputLine, "F", matcher.group(11));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups")
          && GrouperClientWs.mostRecentRequest.contains(group.getIdIndex().toString()));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));

      // ######################################################
      // Try enabledTime

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesWs --attributeAssignType=group --attributeAssignOperation=assign_attr " +
          "--attributeDefNameNames=test:testAttributeAssignDefName --ownerGroupNames=test:groupTestAttrAssign "
          + " --assignmentEnabledTime=2010/03/05_17:05:13.123",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "T", matcher.group(9));
      assertEquals(outputLine, "F", matcher.group(10));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime")
          && GrouperClientWs.mostRecentRequest.contains("2010/03/05 17:05:13.123"));
      assertTrue(GrouperClientWs.mostRecentResponse,
          GrouperClientWs.mostRecentResponse.contains("2010/03/05 17:05:13.123"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));

      // ######################################################
      // Try disabledTime

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesWs --attributeAssignType=group --attributeAssignOperation=assign_attr " +
          "--attributeDefNameNames=test:testAttributeAssignDefName --ownerGroupNames=test:groupTestAttrAssign "
          + " --assignmentDisabledTime=2010/03/05_17:05:13.123",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "F", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "T", matcher.group(9));
      assertEquals(outputLine, "F", matcher.group(10));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime")
          && GrouperClientWs.mostRecentRequest.contains("2010/03/05 17:05:13.123"));
      assertTrue(GrouperClientWs.mostRecentResponse,
          GrouperClientWs.mostRecentResponse.contains("2010/03/05 17:05:13.123"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));

      // ######################################################
      // Try assignmentNotes

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesWs --attributeAssignType=group --attributeAssignOperation=assign_attr " +
          "--attributeDefNameNames=test:testAttributeAssignDefName --ownerGroupNames=test:groupTestAttrAssign "
          + " --assignmentNotes=theNotes",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "T", matcher.group(9));
      assertEquals(outputLine, "F", matcher.group(10));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentResponse,
          GrouperClientWs.mostRecentResponse.contains("theNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("assignmentNotes")
          && GrouperClientWs.mostRecentRequest.contains("theNotes") );
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));


      // ######################################################
      // Try delegatable

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesWs --attributeAssignType=group --attributeAssignOperation=assign_attr " +
          "--attributeDefNameNames=test:testAttributeAssignDefName --ownerGroupNames=test:groupTestAttrAssign "
          + " --delegatable=FALSE",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "T", matcher.group(9));
      assertEquals(outputLine, "F", matcher.group(10));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      //assertTrue(GrouperClientWs.mostRecentResponse,
      //    GrouperClientWs.mostRecentResponse.contains("theNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("delegatable")
          && GrouperClientWs.mostRecentRequest.contains("FALSE"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));

      // ######################################################
      // Try actions

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesWs --attributeAssignType=group --attributeAssignOperation=assign_attr " +
          "--attributeDefNameNames=test:testAttributeAssignDefName --ownerGroupNames=test:groupTestAttrAssign "
          + " --actions=assign",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "F", matcher.group(9));
      assertEquals(outputLine, "F", matcher.group(10));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      //assertTrue(GrouperClientWs.mostRecentResponse,
      //    GrouperClientWs.mostRecentResponse.contains("theNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));

      // ######################################################
      // Try values

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesWs --attributeAssignType=group --attributeAssignOperation=assign_attr " +
          "--attributeDefNameNames=test:testAttributeAssignDefName --ownerGroupNames=test:groupTestAttrAssign "
          + " --values0System=3 --values1System=4 --values2System=5 --attributeAssignValueOperation=replace_values",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "3,4,5", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "F", matcher.group(9));
      assertEquals(outputLine, "F", matcher.group(10));
      assertEquals(outputLine, "T", matcher.group(11));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      //assertTrue(GrouperClientWs.mostRecentResponse,
      //    GrouperClientWs.mostRecentResponse.contains("theNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("values")
          && GrouperClientWs.mostRecentRequest.contains("\"3\"")
          && GrouperClientWs.mostRecentRequest.contains("\"4\"")
          && GrouperClientWs.mostRecentRequest.contains("\"5\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));

      // ######################################################
      // includeGroupDetail

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesWs --attributeAssignType=group --attributeAssignOperation=assign_attr " +
          "--attributeDefNameNames=test:testAttributeAssignDefName --ownerGroupNames=test:groupTestAttrAssign "
          + " --includeGroupDetail=T",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "3,4,5", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "F", matcher.group(9));
      assertEquals(outputLine, "F", matcher.group(10));
      assertEquals(outputLine, "F", matcher.group(11));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));


      // ######################################################
      // includeSubjectDetail

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesWs --attributeAssignType=group --attributeAssignOperation=assign_attr " +
          "--attributeDefNameNames=test:testAttributeAssignDefName --ownerGroupNames=test:groupTestAttrAssign "
          + " --includeSubjectDetail=T",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "3,4,5", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "F", matcher.group(9));
      assertEquals(outputLine, "F", matcher.group(10));
      assertEquals(outputLine, "F", matcher.group(11));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));


      // ######################################################
      // subjectAttributeNames

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesWs --attributeAssignType=group --attributeAssignOperation=assign_attr " +
          "--attributeDefNameNames=test:testAttributeAssignDefName --ownerGroupNames=test:groupTestAttrAssign "
          + " --subjectAttributeNames=abc",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "3,4,5", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "F", matcher.group(9));
      assertEquals(outputLine, "F", matcher.group(10));
      assertEquals(outputLine, "F", matcher.group(11));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));


      // ######################################################
      // params

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesWs --attributeAssignType=group --attributeAssignOperation=assign_attr " +
          "--attributeDefNameNames=test:testAttributeAssignDefName --ownerGroupNames=test:groupTestAttrAssign "
          + " --paramName0=a --paramValue0=b",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "3,4,5", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "F", matcher.group(9));
      assertEquals(outputLine, "F", matcher.group(10));
      assertEquals(outputLine, "F", matcher.group(11));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));


      // ######################################################
      // attribute assign lookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      String attributeAssignId = attributeAssign.getId();

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesWs --attributeAssignType=group --attributeAssignOperation=remove_attr "
          + " --attributeAssignUuids=" + attributeAssign.getId(),
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, false);

      assertNull("Should be deleted", attributeAssign);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssignId, matcher.group(8));
      assertEquals(outputLine, "T", matcher.group(9));
      assertEquals(outputLine, "T", matcher.group(10));
      assertEquals(outputLine, "F", matcher.group(11));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups")
          && !GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups")
          && !GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));

      // ######################################################
      // attribute assign lookups custom tempflate

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      attributeAssign = group.getAttributeDelegate().assignAttribute(attributeDefName).getAttributeAssign();

      attributeAssignId = attributeAssign.getId();

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesWs --attributeAssignType=group --attributeAssignOperation=remove_attr "
          + " --attributeAssignUuids=" + attributeAssign.getId() + " --outputTemplate=${wsAttributeAssign.attributeAssignType}$newline$",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, false);

      assertNull("Should be deleted", attributeAssign);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = GrouperClientUtils.trim(outputLines[0]);

      assertEquals(outputLine, "group", outputLine);

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups")
          && !GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups")
          && !GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));


      // ######################################################
      // attribute assign lookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      attributeAssign = group.getAttributeDelegate().assignAttribute(attributeDefName).getAttributeAssign();

      attributeAssignId = attributeAssign.getId();

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesWs --attributeAssignType=group --attributeAssignOperation=remove_attr "
          + " --attributeAssignUuids=" + attributeAssign.getId() + " --actAsSubjectId=GrouperSystem",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, false);

      assertNull("Should be deleted", attributeAssign);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssignId, matcher.group(8));
      assertEquals(outputLine, "T", matcher.group(9));
      assertEquals(outputLine, "T", matcher.group(10));
      assertEquals(outputLine, "F", matcher.group(11));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups")
          && !GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups")
          && !GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));



    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testAssignAttributesStem() throws Exception {

    AttributeDefName attributeDefName = AttributeDefNameTest.exampleAttributeDefNameDb("test", "testAttributeAssignDefName");

    final AttributeDef attributeDef = attributeDefName.getAttributeDef();

    attributeDef.setAssignToGroup(false);
    attributeDef.setAssignToStem(true);
    attributeDef.store();

    Stem stem = new StemSave(GrouperSession.staticGrouperSession()).assignSaveMode(SaveMode.INSERT_OR_UPDATE)
      .assignStemNameToEdit("test:stemTestAttrAssign").assignName("test:stemTestAttrAssign").assignCreateParentStemsIfNotExist(true)
      .assignDescription("description").save();


    AttributeAssign attributeAssign = null;
    //    AttributeAssignResult attributeAssignResult = group.getAttributeDelegate().assignAttribute(attributeDefName);
    //     = attributeAssignResult.getAttributeAssign();

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesWs --attributeAssignType=stem --attributeAssignOperation=assign_attr " +
          "--attributeDefNameNames=test:testAttributeAssignDefName --ownerStemNames=test:stemTestAttrAssign",
          " "));

      attributeAssign = stem.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group, owner: test:groupTestAttrAssign, attributeDefNameNameName test:testAttributeAssignDefName, action: assign, values: 15,5,5, enable: T, id: a9c83eeb78c04ae5befcea36272d318c, changed: true, valuesChanged: false
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F), changed\: (T|F), valuesChanged\: (T|F)$
      Pattern pattern = Pattern
        .compile("^Index\\: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName\\: (.+), action\\: (.+), values\\: (.+), enabled\\: (T|F), id\\: (.+), changed\\: (T|F), deleted\\: (T|F), valuesChanged\\: (T|F)$");
      String outputLine = outputLines[0];

      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "stem", matcher.group(2));
      assertEquals(outputLine, "test:stemTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "T", matcher.group(9));
      assertEquals(outputLine, "F", matcher.group(10));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:stemTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));

      // stem uuids
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesWs --attributeAssignType=stem --attributeAssignOperation=assign_attr " +
          "--attributeDefNameUuids=" + attributeDefName.getId() +  " --ownerStemUuids=" + stem.getUuid(),
          " "));

      attributeAssign = stem.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "stem", matcher.group(2));
      assertEquals(outputLine, "test:stemTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "F", matcher.group(9));
      assertEquals(outputLine, "F", matcher.group(10));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains(stem.getUuid()));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups")
          && GrouperClientWs.mostRecentRequest.contains(stem.getUuid()));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));


    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testAssignAttributesMember() throws Exception {

    AttributeDefName attributeDefName = AttributeDefNameTest.exampleAttributeDefNameDb("test", "testAttributeAssignDefName");

    final AttributeDef attributeDef = attributeDefName.getAttributeDef();

    attributeDef.setAssignToGroup(false);
    attributeDef.setAssignToMember(true);
    attributeDef.store();

    GrouperSession grouperSession = GrouperSession.startRootSession();

    Member member = MemberFinder.findBySubject(grouperSession, SubjectTestHelper.SUBJ0, true);


    AttributeAssign attributeAssign = null;
    //    AttributeAssignResult attributeAssignResult = group.getAttributeDelegate().assignAttribute(attributeDefName);
    //     = attributeAssignResult.getAttributeAssign();

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesWs --attributeAssignType=member --attributeAssignOperation=assign_attr " +
          "--attributeDefNameNames=test:testAttributeAssignDefName --owner0SubjectId=" + SubjectTestHelper.SUBJ0_ID,
          " "));

      attributeAssign = member.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group, owner: test:groupTestAttrAssign, attributeDefNameNameName test:testAttributeAssignDefName, action: assign, values: 15,5,5, enable: T, id: a9c83eeb78c04ae5befcea36272d318c, changed: true, valuesChanged: false
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F), changed\: (T|F), valuesChanged\: (T|F)$
      Pattern pattern = Pattern
        .compile("^Index\\: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName\\: (.+), action\\: (.+), values\\: (.+), enabled\\: (T|F), id\\: (.+), changed\\: (T|F), deleted\\: (T|F), valuesChanged\\: (T|F)$");
      String outputLine = outputLines[0];

      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "member", matcher.group(2));
      assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "T", matcher.group(9));
      assertEquals(outputLine, "F", matcher.group(10));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups")
          && GrouperClientWs.mostRecentRequest.contains(SubjectTestHelper.SUBJ0_ID));

      // subject identifier
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesWs --attributeAssignType=member --attributeAssignOperation=assign_attr " +
          "--attributeDefNameUuids=" + attributeDefName.getId() +  " --owner0SubjectIdentifier=id.test.subject.0",
          " "));

      attributeAssign = member.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "member", matcher.group(2));
      assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "F", matcher.group(9));
      assertEquals(outputLine, "F", matcher.group(10));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains(attributeDefName.getId()));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups")
          && GrouperClientWs.mostRecentRequest.contains("id.test.subject.0"));


    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testAssignAttributesAttributeDef() throws Exception {

    AttributeDefName attributeDefName = AttributeDefNameTest.exampleAttributeDefNameDb("test", "testAttributeAssignDefName");

    final AttributeDef attributeDef = attributeDefName.getAttributeDef();

    attributeDef.setAssignToGroup(false);
    attributeDef.setAssignToAttributeDef(true);
    attributeDef.store();

    AttributeDef attributeDefAssignTo = AttributeDefTest.exampleAttributeDefDb("test", "testAttributeDefAssignTo");


    AttributeAssign attributeAssign = null;

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesWs --attributeAssignType=attr_def --attributeAssignOperation=assign_attr " +
          "--attributeDefNameNames=test:testAttributeAssignDefName --ownerAttributeDefNames=test:testAttributeDefAssignTo",
          " "));

      attributeAssign = attributeDefAssignTo.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group, owner: test:groupTestAttrAssign, attributeDefNameNameName test:testAttributeAssignDefName, action: assign, values: 15,5,5, enable: T, id: a9c83eeb78c04ae5befcea36272d318c, changed: true, valuesChanged: false
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F), changed\: (T|F), valuesChanged\: (T|F)$
      Pattern pattern = Pattern
          .compile("^Index\\: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName\\: (.+), action\\: (.+), values\\: (.+), enabled\\: (T|F), id\\: (.+), changed\\: (T|F), deleted\\: (T|F), valuesChanged\\: (T|F)$");
      String outputLine = outputLines[0];

      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "attr_def", matcher.group(2));
      assertEquals(outputLine, attributeDefAssignTo.getName(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "T", matcher.group(9));
      assertEquals(outputLine, "F", matcher.group(10));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups")
          && GrouperClientWs.mostRecentRequest.contains(attributeDefAssignTo.getName()));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));

      // attribute def uuid
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesWs --attributeAssignType=attr_def --attributeAssignOperation=assign_attr " +
          "--attributeDefNameNames=test:testAttributeAssignDefName --ownerAttributeDefUuids=" + attributeDefAssignTo.getUuid(),
          " "));

      attributeAssign = attributeDefAssignTo.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "attr_def", matcher.group(2));
      assertEquals(outputLine, attributeDefAssignTo.getName(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "F", matcher.group(9));
      assertEquals(outputLine, "F", matcher.group(10));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains(attributeDefAssignTo.getId()));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups")
          && GrouperClientWs.mostRecentRequest.contains(attributeDefAssignTo.getUuid()));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));

      // attribute def uuid
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesWs --attributeAssignType=attr_def --attributeAssignOperation=assign_attr " +
          "--attributeDefNameIdIndexes=" + attributeDefName.getIdIndex() + " --ownerAttributeDefIdIndexes=" + attributeDefAssignTo.getIdIndex(),
          " "));

      attributeAssign = attributeDefAssignTo.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "attr_def", matcher.group(2));
      assertEquals(outputLine, attributeDefAssignTo.getName(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "F", matcher.group(9));
      assertEquals(outputLine, "F", matcher.group(10));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains(attributeDefAssignTo.getIdIndex().toString()));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups")
          && GrouperClientWs.mostRecentRequest.contains(attributeDefAssignTo.getIdIndex().toString()));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));


    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testAssignAttributesMembership() throws Exception {

    AttributeDefName attributeDefName = AttributeDefNameTest.exampleAttributeDefNameDb("test", "testAttributeAssignDefName");

    final AttributeDef attributeDef = attributeDefName.getAttributeDef();

    attributeDef.setAssignToGroup(false);
    attributeDef.setAssignToImmMembership(true);
    attributeDef.store();

    Group group1 = new GroupSave(GrouperSession.staticGrouperSession()).assignSaveMode(SaveMode.INSERT_OR_UPDATE)
      .assignGroupNameToEdit("test:membershipTestAttrAssign").assignName("test:membershipTestAttrAssign").assignCreateParentStemsIfNotExist(true)
      .assignDescription("description").save();

    group1.addMember(SubjectTestHelper.SUBJ0);

    Membership membership = group1.getMemberships(FieldFinder.find("members", true)).iterator().next();



    AttributeAssign attributeAssign = null;

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesWs --attributeAssignType=imm_mem --attributeAssignOperation=assign_attr " +
          "--attributeDefNameNames=test:testAttributeAssignDefName --ownerMembershipUuids=" + membership.getUuid(),
          " "));

      attributeAssign = membership.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group, owner: test:groupTestAttrAssign, attributeDefNameNameName test:testAttributeAssignDefName, action: assign, values: 15,5,5, enable: T, id: a9c83eeb78c04ae5befcea36272d318c, changed: true, valuesChanged: false
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F), changed\: (T|F), valuesChanged\: (T|F)$
      Pattern pattern = Pattern
        .compile("^Index\\: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName\\: (.+), action\\: (.+), values\\: (.+), enabled\\: (T|F), id\\: (.+), changed\\: (T|F), deleted\\: (T|F), valuesChanged\\: (T|F)$");
      String outputLine = outputLines[0];

      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "imm_mem", matcher.group(2));
      assertEquals(outputLine, membership.getImmediateMembershipId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "T", matcher.group(9));
      assertEquals(outputLine, "F", matcher.group(10));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups")
          && GrouperClientWs.mostRecentRequest.contains(membership.getUuid()));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));


    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testAssignAttributesAnyMembership() throws Exception {

    GrouperSession grouperSession = GrouperSession.startRootSession();

    AttributeDefName attributeDefName = AttributeDefNameTest.exampleAttributeDefNameDb("test", "testAttributeAssignDefName");

    final AttributeDef attributeDef = attributeDefName.getAttributeDef();

    attributeDef.setAssignToGroup(false);
    attributeDef.setAssignToEffMembership(true);
    attributeDef.store();

    Group group1 = new GroupSave(GrouperSession.staticGrouperSession()).assignSaveMode(SaveMode.INSERT_OR_UPDATE)
      .assignGroupNameToEdit("test:anyMembershipTestAttrAssign").assignName("test:anyMembershipTestAttrAssign").assignCreateParentStemsIfNotExist(true)
      .assignDescription("description").save();

    Group group2 = new GroupSave(GrouperSession.staticGrouperSession()).assignSaveMode(SaveMode.INSERT_OR_UPDATE)
      .assignGroupNameToEdit("test:anyMembershipTestAttrAssign2").assignName("test:anyMembershipTestAttrAssign2").assignCreateParentStemsIfNotExist(true)
      .assignDescription("description").save();

    //add one group to another to make effective membership and add attribute to that membership
    group1.addMember(group2.toSubject());
    group2.addMember(SubjectTestHelper.SUBJ0);

    Member member = MemberFinder.findBySubject(grouperSession, SubjectTestHelper.SUBJ0, false);

    Membership membership = (Membership)MembershipFinder.findMemberships(GrouperUtil.toSet(group1.getId()),
        GrouperUtil.toSet(member.getUuid()), null, null, FieldFinder.find("members", true), null, null, null, null, null).iterator().next()[0];


    AttributeAssign attributeAssign = null;

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesWs --attributeAssignType=any_mem --attributeAssignOperation=assign_attr " +
          "--attributeDefNameNames=test:testAttributeAssignDefName --ownerMembershipAny0SubjectId=" + member.getSubjectId()
          + " --ownerMembershipAny0GroupName=" + group1.getName(),
          " "));

      attributeAssign = membership.getAttributeDelegateEffMship().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group, owner: test:groupTestAttrAssign, attributeDefNameNameName test:testAttributeAssignDefName, action: assign, values: 15,5,5, enable: T, id: a9c83eeb78c04ae5befcea36272d318c, changed: true, valuesChanged: false
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F), changed\: (T|F), valuesChanged\: (T|F)$
      Pattern pattern = Pattern
        .compile("^Index\\: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName\\: (.+), action\\: (.+), values\\: (.+), enabled\\: (T|F), id\\: (.+), changed\\: (T|F), deleted\\: (T|F), valuesChanged\\: (T|F)$");
      String outputLine = outputLines[0];

      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "any_mem", matcher.group(2));
      assertEquals(outputLine, "test:anyMembershipTestAttrAssign - jdbc - test.subject.0", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "T", matcher.group(9));
      assertEquals(outputLine, "F", matcher.group(10));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups")
          && GrouperClientWs.mostRecentRequest.contains(group1.getName())
          && GrouperClientWs.mostRecentRequest.contains(member.getSubjectId()));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));


    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testAssignAttributesMembershipAssn() throws Exception {

    AttributeDefName attributeDefName = AttributeDefNameTest.exampleAttributeDefNameDb("test", "testAttributeAssignDefName");

    final AttributeDef attributeDef = attributeDefName.getAttributeDef();

    attributeDef.setAssignToGroup(false);
    attributeDef.setAssignToImmMembership(true);
    attributeDef.store();

    AttributeDefName attributeDefName2 = AttributeDefNameTest.exampleAttributeDefNameDb("test", "testAttributeAssignDefName2");

    final AttributeDef attributeDef2 = attributeDefName2.getAttributeDef();

    attributeDef2.setAssignToGroup(false);
    attributeDef2.setAssignToImmMembershipAssn(true);
    attributeDef2.store();

    Group group1 = new GroupSave(GrouperSession.staticGrouperSession()).assignSaveMode(SaveMode.INSERT_OR_UPDATE)
      .assignGroupNameToEdit("test:membershipTestAttrAssign").assignName("test:membershipTestAttrAssign").assignCreateParentStemsIfNotExist(true)
      .assignDescription("description").save();

    group1.addMember(SubjectTestHelper.SUBJ0);

    Membership membership = group1.getMemberships(FieldFinder.find("members", true)).iterator().next();

    AttributeAssign attributeAssign = membership.getAttributeDelegate().assignAttribute(attributeDefName).getAttributeAssign();

    //we need to wait some seconds for the cache to clear
    GrouperUtil.sleep(20000);

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesWs --attributeAssignType=imm_mem_asgn --attributeAssignOperation=assign_attr " +
          "--attributeDefNameNames=test:testAttributeAssignDefName2 --ownerAttributeAssignUuids=" + attributeAssign.getId(),
          " "));

      AttributeAssign attributeAssign2 = attributeAssign.getAttributeDelegate().retrieveAssignment("assign", attributeDefName2, false, true);

      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group, owner: test:groupTestAttrAssign, attributeDefNameNameName test:testAttributeAssignDefName, action: assign, values: 15,5,5, enable: T, id: a9c83eeb78c04ae5befcea36272d318c, changed: true, valuesChanged: false
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F), changed\: (T|F), valuesChanged\: (T|F)$
      Pattern pattern = Pattern
        .compile("^Index\\: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName\\: (.+), action\\: (.+), values\\: (.+), enabled\\: (T|F), id\\: (.+), changed\\: (T|F), deleted\\: (T|F), valuesChanged\\: (T|F)$");
      String outputLine = outputLines[0];

      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "imm_mem_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName2", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "none", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));
      assertEquals(outputLine, "T", matcher.group(9));
      assertEquals(outputLine, "F", matcher.group(10));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookups")
          && GrouperClientWs.mostRecentRequest.contains(attributeAssign.getId()));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));


    } finally {
      System.setOut(systemOut);
    }

  }

  /**
     * @throws Exception
     */
    public void testGetPermissionAssigns() throws Exception {

      GrouperSession grouperSession = GrouperSession.startRootSession();

      Stem aStem = Stem.saveStem(grouperSession, "aStem", null,"aStem", "a stem",  "a stem description", null, false);

      //parent implies child
      Role role = aStem.addChildRole("role", "role");
      Role role2 = aStem.addChildRole("role2", "role2");

      ((Group)role).addMember(SubjectTestHelper.SUBJ0);
      ((Group)role2).addMember(SubjectTestHelper.SUBJ1);

      AttributeDef permissionDef = aStem.addChildAttributeDef("permissionDef", AttributeDefType.perm);
      permissionDef.setAssignToEffMembership(true);
      permissionDef.setAssignToGroup(true);
      permissionDef.store();
      AttributeDefName permissionDefName = aStem.addChildAttributeDefName(permissionDef, "permissionDefName", "permissionDefName");
      AttributeDefName permissionDefName2 = aStem.addChildAttributeDefName(permissionDef, "permissionDefName2", "permissionDefName2");

      permissionDef.getAttributeDefActionDelegate().addAction("action");
      permissionDef.getAttributeDefActionDelegate().addAction("action2");

      //subject 0 has a "role" permission of permissionDefName with "action" in
      //subject 1 has a "role_subject" permission of permissionDefName2 with action2

      role.getPermissionRoleDelegate().assignRolePermission("action", permissionDefName);
      role2.getPermissionRoleDelegate()
        .assignSubjectRolePermission("action2", permissionDefName2, SubjectTestHelper.SUBJ1);

      PrintStream systemOut = System.out;

      ByteArrayOutputStream baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getPermissionAssignmentsWs --attributeDefNames=aStem:permissionDef",
            " "));
        System.out.flush();
        String output = new String(baos.toByteArray());

        System.setOut(systemOut);

        String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: permissionType: role, role: aStem:role, subject: jdbc - test.subject.0, attributeDefNameName: aStem:permissionDefName, action: action, allowedOverall: T, enabled: T
        // match: ^Index: (\d+)\: permissionType\: (.+), role\: (.+), subject\: (.+), attributeDefNameName\: (.+), action\: (.+), allowedOverall: (T|F), enabled\: (T|F)
        Pattern pattern = Pattern
            .compile("^Index: (\\d+)\\: permissionType\\: (.+), role\\: (.+), subject\\: (.+), attributeDefNameName: (.+), action\\: (.+), allowedOverall\\: (.+), enabled\\: (T|F)$");

        assertEquals(2, outputLines.length);
        String outputLine = outputLines[0];

        Matcher matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "role", matcher.group(2));
        assertEquals(outputLine, "aStem:role", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName", matcher.group(5));
        assertEquals(outputLine, "action", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, "T", matcher.group(8));

        outputLine = outputLines[1];

        matcher = pattern.matcher(outputLines[1]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "1", matcher.group(1));
        assertEquals(outputLine, "role_subject", matcher.group(2));
        assertEquals(outputLine, "aStem:role2", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.1", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName2", matcher.group(5));
        assertEquals(outputLine, "action2", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, "T", matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("\"name\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("roleLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));




        // ######################################################
        // Try attributeDefId

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getPermissionAssignmentsWs --attributeDefUuids=" + permissionDef.getId(),
            " "));


        System.out.flush();
        output = new String(baos.toByteArray());

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        System.setOut(systemOut);


        assertEquals(2, outputLines.length);
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "role", matcher.group(2));
        assertEquals(outputLine, "aStem:role", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName", matcher.group(5));
        assertEquals(outputLine, "action", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, "T", matcher.group(8));

        outputLine = outputLines[1];

        matcher = pattern.matcher(outputLines[1]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "1", matcher.group(1));
        assertEquals(outputLine, "role_subject", matcher.group(2));
        assertEquals(outputLine, "aStem:role2", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.1", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName2", matcher.group(5));
        assertEquals(outputLine, "action2", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, "T", matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("roleLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));

        // ######################################################
        // Try attributeDefIdIndex

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getPermissionAssignmentsWs --attributeDefIdIndexes=" + permissionDef.getIdIndex(),
            " "));


        System.out.flush();
        output = new String(baos.toByteArray());

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        System.setOut(systemOut);


        assertEquals(2, outputLines.length);
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "role", matcher.group(2));
        assertEquals(outputLine, "aStem:role", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName", matcher.group(5));
        assertEquals(outputLine, "action", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, "T", matcher.group(8));

        outputLine = outputLines[1];

        matcher = pattern.matcher(outputLines[1]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "1", matcher.group(1));
        assertEquals(outputLine, "role_subject", matcher.group(2));
        assertEquals(outputLine, "aStem:role2", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.1", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName2", matcher.group(5));
        assertEquals(outputLine, "action2", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, "T", matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("\"idIndex\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("roleLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));



        // ######################################################
        // Try attributeDefNameName

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getPermissionAssignmentsWs --attributeDefNameNames=" + permissionDefName.getName(),
            " "));


        System.out.flush();
        output = new String(baos.toByteArray());

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        System.setOut(systemOut);


        assertEquals(1, outputLines.length);
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "role", matcher.group(2));
        assertEquals(outputLine, "aStem:role", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName", matcher.group(5));
        assertEquals(outputLine, "action", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, "T", matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups") && GrouperClientWs.mostRecentRequest.contains("\"name\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("roleLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));


        // ######################################################
        // Try attributeDefNameUuid

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getPermissionAssignmentsWs --attributeDefNameUuids=" + permissionDefName.getId(),
            " "));


        System.out.flush();
        output = new String(baos.toByteArray());

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        System.setOut(systemOut);


        assertEquals(1, outputLines.length);
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "role", matcher.group(2));
        assertEquals(outputLine, "aStem:role", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName", matcher.group(5));
        assertEquals(outputLine, "action", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, "T", matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("roleLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));

        // ######################################################
        // Try attributeDefNameUuid

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getPermissionAssignmentsWs --attributeDefNameIdIndexes=" + permissionDefName.getIdIndex(),
            " "));


        System.out.flush();
        output = new String(baos.toByteArray());

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        System.setOut(systemOut);


        assertEquals(1, outputLines.length);
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "role", matcher.group(2));
        assertEquals(outputLine, "aStem:role", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName", matcher.group(5));
        assertEquals(outputLine, "action", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, "T", matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups") && GrouperClientWs.mostRecentRequest.contains("\"idIndex\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("roleLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));


        // ######################################################
        // Try roleName

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getPermissionAssignmentsWs --roleNames=" + role.getName(),
            " "));


        System.out.flush();
        output = new String(baos.toByteArray());

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        System.setOut(systemOut);


        assertEquals(1, outputLines.length);
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "role", matcher.group(2));
        assertEquals(outputLine, "aStem:role", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName", matcher.group(5));
        assertEquals(outputLine, "action", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, "T", matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("roleLookups") && GrouperClientWs.mostRecentRequest.contains("\"groupName\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));


        // ######################################################
        // Try roleUuid

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getPermissionAssignmentsWs --roleUuids=" + role.getId(),
            " "));


        System.out.flush();
        output = new String(baos.toByteArray());

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        System.setOut(systemOut);


        assertEquals(1, outputLines.length);
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "role", matcher.group(2));
        assertEquals(outputLine, "aStem:role", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName", matcher.group(5));
        assertEquals(outputLine, "action", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, "T", matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("roleLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));



        // ######################################################
        // Try roleIdIndex

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getPermissionAssignmentsWs --roleIdIndexes=" + role.getIdIndex(),
            " "));


        System.out.flush();
        output = new String(baos.toByteArray());

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        System.setOut(systemOut);


        assertEquals(1, outputLines.length);
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "role", matcher.group(2));
        assertEquals(outputLine, "aStem:role", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName", matcher.group(5));
        assertEquals(outputLine, "action", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, "T", matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("roleLookups") && GrouperClientWs.mostRecentRequest.contains("\"idIndex\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));

        // ######################################################
        // Try roleName and enabled

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getPermissionAssignmentsWs --roleNames=" + role.getName() + " --enabled=F",
            " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        assertTrue(outputLines == null || outputLines.length == 0 || StringUtils.isBlank(outputLines[0]));


        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("roleLookups") && GrouperClientWs.mostRecentRequest.contains("\"groupName\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));

        // ######################################################
        // Try roleName and actions

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getPermissionAssignmentsWs --roleNames=" + role.getName() + " --actions=a",
            " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        assertTrue(outputLines == null || outputLines.length == 0 || StringUtils.isBlank(outputLines[0]));


        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("roleLookups") && GrouperClientWs.mostRecentRequest.contains("\"groupName\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));

        // ######################################################
        // Try roleName and includeAttributeAssignments

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getPermissionAssignmentsWs --roleNames=" + role.getName() + " --includeAttributeAssignments=T",
            " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        System.setOut(systemOut);


        assertEquals(1, outputLines.length);
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "role", matcher.group(2));
        assertEquals(outputLine, "aStem:role", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName", matcher.group(5));
        assertEquals(outputLine, "action", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, "T", matcher.group(8));


        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentResponse,
            GrouperClientWs.mostRecentResponse.contains("WsAttributeAssign"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("roleLookups") && GrouperClientWs.mostRecentRequest.contains("\"groupName\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));

        // ######################################################
        // Try roleName and includeAttributeAssignments and includeAssignmentsOnAssignments

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getPermissionAssignmentsWs --roleNames=" + role.getName() + " --includeAttributeAssignments=T --includeAssignmentsOnAssignments=T",
            " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        System.setOut(systemOut);


        assertEquals(1, outputLines.length);
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "role", matcher.group(2));
        assertEquals(outputLine, "aStem:role", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName", matcher.group(5));
        assertEquals(outputLine, "action", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, "T", matcher.group(8));


        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentResponse,
            GrouperClientWs.mostRecentResponse.contains("WsAttributeAssign"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("roleLookups") && GrouperClientWs.mostRecentRequest.contains("\"groupName\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));
        assertTrue(GrouperClientWs.mostRecentResponse,
            !GrouperClientWs.mostRecentResponse.contains("attributeDefNameSetDepth"));

        // ######################################################
        // Try roleName and includePermissionAssignDetail

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getPermissionAssignmentsWs --roleNames=" + role.getName() + " --includePermissionAssignDetail=T",
            " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        System.setOut(systemOut);


        assertEquals(1, outputLines.length);
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "role", matcher.group(2));
        assertEquals(outputLine, "aStem:role", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName", matcher.group(5));
        assertEquals(outputLine, "action", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, "T", matcher.group(8));


        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentResponse,
            GrouperClientWs.mostRecentResponse.contains("attributeDefNameSetDepth"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("roleLookups") && GrouperClientWs.mostRecentRequest.contains("\"groupName\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));
        assertTrue(GrouperClientWs.mostRecentResponse,
            !GrouperClientWs.mostRecentResponse.contains("WsAttributeDefName"));

        // ######################################################
        // Try roleName and includeAttributeDefNames

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getPermissionAssignmentsWs --roleNames=" + role.getName() + " --includeAttributeDefNames=T",
            " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        System.setOut(systemOut);


        assertEquals(1, outputLines.length);
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "role", matcher.group(2));
        assertEquals(outputLine, "aStem:role", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName", matcher.group(5));
        assertEquals(outputLine, "action", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, "T", matcher.group(8));


        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentResponse,
            GrouperClientWs.mostRecentResponse.contains("WsAttributeDefName"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("roleLookups") && GrouperClientWs.mostRecentRequest.contains("\"groupName\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));

        // ######################################################
        // Try roleName and includeGroupDetail

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getPermissionAssignmentsWs --roleNames=" + role.getName() + " --includeGroupDetail=T",
            " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        System.setOut(systemOut);


        assertEquals(1, outputLines.length);
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "role", matcher.group(2));
        assertEquals(outputLine, "aStem:role", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName", matcher.group(5));
        assertEquals(outputLine, "action", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, "T", matcher.group(8));


        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentResponse,
            GrouperClientWs.mostRecentResponse.contains("hasComposite"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("roleLookups") && GrouperClientWs.mostRecentRequest.contains("\"groupName\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));

        // ######################################################
        // Try roleName and includeSubjectDetail

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getPermissionAssignmentsWs --roleNames=" + role.getName() + " --includeSubjectDetail=T",
            " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        System.setOut(systemOut);


        assertEquals(1, outputLines.length);
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "role", matcher.group(2));
        assertEquals(outputLine, "aStem:role", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName", matcher.group(5));
        assertEquals(outputLine, "action", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, "T", matcher.group(8));


        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentResponse,
            !GrouperClientWs.mostRecentResponse.contains("hasComposite"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("roleLookups") && GrouperClientWs.mostRecentRequest.contains("\"groupName\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));

        // ######################################################
        // Try roleName and includeSubjectDetail

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getPermissionAssignmentsWs --roleNames=" + role.getName() + " --subjectAttributeNames=abc",
            " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        System.setOut(systemOut);


        assertEquals(1, outputLines.length);
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "role", matcher.group(2));
        assertEquals(outputLine, "aStem:role", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName", matcher.group(5));
        assertEquals(outputLine, "action", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, "T", matcher.group(8));


        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentResponse,
            !GrouperClientWs.mostRecentResponse.contains("hasComposite"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames") && GrouperClientWs.mostRecentRequest.contains("abc"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("roleLookups") && GrouperClientWs.mostRecentRequest.contains("\"groupName\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));

        // ######################################################
        // Try roleName and params

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getPermissionAssignmentsWs --roleNames=" + role.getName() + " --paramName0=a --paramValue0=b",
            " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        System.setOut(systemOut);


        assertEquals(1, outputLines.length);
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "role", matcher.group(2));
        assertEquals(outputLine, "aStem:role", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName", matcher.group(5));
        assertEquals(outputLine, "action", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, "T", matcher.group(8));


        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentResponse,
            !GrouperClientWs.mostRecentResponse.contains("hasComposite"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("roleLookups") && GrouperClientWs.mostRecentRequest.contains("\"groupName\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));

        // ######################################################
        // Try roleName and custom template

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getPermissionAssignmentsWs --roleNames=" + role.getName() + " --outputTemplate=${wsPermissionAssign.permissionType}$newline$",
            " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        System.setOut(systemOut);


        assertEquals(1, outputLines.length);
        outputLine = outputLines[0].trim();

        assertEquals(outputLine, "role", outputLine);


        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentResponse,
            !GrouperClientWs.mostRecentResponse.contains("hasComposite"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("roleLookups") && GrouperClientWs.mostRecentRequest.contains("\"groupName\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));

        // ######################################################
        // Try roleName and act as subject
        // Should this be an error or a blank result set????

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        try {
          GrouperClient.main(GrouperClientUtils.splitTrim(
              "--operation=getPermissionAssignmentsWs --roleNames=" + role.getName() + " --actAsSubjectId=" + SubjectTestHelper.SUBJ0_ID,
              " "));
        } catch (Exception e) {
          assertTrue(ExceptionUtils.getFullStackTrace(e).contains("GROUP_NOT_FOUND"));
        }
        System.out.flush();

        System.setOut(systemOut);



        // ######################################################
        // Try roleName and immediateOnly

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getPermissionAssignmentsWs --roleNames=" + role.getName() + " --immediateOnly=T",
            " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        System.setOut(systemOut);


        assertEquals(0, GrouperUtil.length(outputLines));


        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentResponse,
            !GrouperClientWs.mostRecentResponse.contains("hasComposite"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("roleLookups") && GrouperClientWs.mostRecentRequest.contains("\"groupName\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("immediateOnly\":\"T"));

        // ######################################################
        // Try roleName and permissionType

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getPermissionAssignmentsWs --roleNames=" + role.getName() + " --permissionType=role_subject",
            " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        System.setOut(systemOut);


        assertEquals(1, GrouperUtil.length(outputLines));


        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentResponse,
            !GrouperClientWs.mostRecentResponse.contains("hasComposite"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("roleLookups") && GrouperClientWs.mostRecentRequest.contains("\"groupName\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("immediateOnly\":\"T"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("permissionType\":\"role_subject"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("<permissionProcessor>role_subject</permissionProcessor>"));

        // ######################################################
        // Try roleName and permissionProcessor

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getPermissionAssignmentsWs --roleNames=" + role.getName() + " --permissionProcessor=FILTER_REDUNDANT_PERMISSIONS",
            " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        System.setOut(systemOut);


        assertEquals(1, GrouperUtil.length(outputLines));


        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentResponse,
            !GrouperClientWs.mostRecentResponse.contains("hasComposite"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("roleLookups") && GrouperClientWs.mostRecentRequest.contains("\"groupName\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("immediateOnly\":\"T"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("permissionType\":\"role_subject"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("permissionProcessor\":\"FILTER_REDUNDANT_PERMISSIONS"));

      } finally {
        System.setOut(systemOut);
      }

    }

    /**
     * @throws Exception
     */
    public void testGetPermissionAssignsPIT() throws Exception {

      GrouperSession grouperSession = GrouperSession.startRootSession();

      Stem aStem = Stem.saveStem(grouperSession, "aStem", null,"aStem", "a stem",  "a stem description", null, false);

      //parent implies child
      Role role = aStem.addChildRole("role", "role");
      Role role2 = aStem.addChildRole("role2", "role2");

      ((Group)role).addMember(SubjectTestHelper.SUBJ0);
      ((Group)role2).addMember(SubjectTestHelper.SUBJ1);

      AttributeDef permissionDef = aStem.addChildAttributeDef("permissionDef", AttributeDefType.perm);
      permissionDef.setAssignToEffMembership(true);
      permissionDef.setAssignToGroup(true);
      permissionDef.store();
      AttributeDefName permissionDefName = aStem.addChildAttributeDefName(permissionDef, "permissionDefName", "permissionDefName");
      AttributeDefName permissionDefName2 = aStem.addChildAttributeDefName(permissionDef, "permissionDefName2", "permissionDefName2");

      permissionDef.getAttributeDefActionDelegate().addAction("action");
      permissionDef.getAttributeDefActionDelegate().addAction("action2");

      Thread.sleep(100);
      Timestamp before = new Timestamp(new Date().getTime());
      Thread.sleep(100);

      //subject 0 has a "role" permission of permissionDefName with "action" in
      //subject 1 has a "role_subject" permission of permissionDefName2 with action2

      AttributeAssignResult result1 = role.getPermissionRoleDelegate().assignRolePermission("action", permissionDefName);
      AttributeAssignResult result2 = role2.getPermissionRoleDelegate()
        .assignSubjectRolePermission("action2", permissionDefName2, SubjectTestHelper.SUBJ1);
      ChangeLogTempToEntity.convertRecords();

      Thread.sleep(100);
      Timestamp pointInTime = new Timestamp(new Date().getTime());
      Thread.sleep(100);

      // delete the permissions...
      result1.getAttributeAssign().delete();
      result2.getAttributeAssign().delete();
      ChangeLogTempToEntity.convertRecords();

      Thread.sleep(100);
      Timestamp after = new Timestamp(new Date().getTime());
      Thread.sleep(100);

      PrintStream systemOut = System.out;

      ByteArrayOutputStream baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {

        ArrayList<String> args = new ArrayList<String>();
        args.add("--operation=getPermissionAssignmentsWs");
        args.add("--attributeDefNames=aStem:permissionDef");
        args.add("--pointInTimeFrom=" + GrouperClientUtils.timestampToString(pointInTime));
        args.add("--pointInTimeTo=" + GrouperClientUtils.timestampToString(pointInTime));
        GrouperClient.main(args.toArray(new String[0]));

        System.out.flush();
        String output = new String(baos.toByteArray());

        System.setOut(systemOut);

        String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: permissionType: role, role: aStem:role, subject: jdbc - test.subject.0, attributeDefNameName: aStem:permissionDefName, action: action, enabled: null
        // match: Index: 0: permissionType: role, role: aStem:role, subject: jdbc - test.subject.0, attributeDefNameName: aStem:permissionDefName, action: action, allowedOverall: T, enabled:
        // match: ^Index: (\d+)\: permissionType\: (.+), role\: (.+), subject\: (.+), attributeDefNameName\: (.+), action\: (.+), enabled\: null
        Pattern pattern = Pattern
            .compile("^Index: (\\d+)\\: permissionType\\: (.+), role\\: (.+), subject\\: (.+), attributeDefNameName: (.+), action\\: (.+), allowedOverall\\: (T|F), enabled\\:.*$");

        assertEquals(2, outputLines.length);
        String outputLine = outputLines[0];

        Matcher matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "role", matcher.group(2));
        assertEquals(outputLine, "aStem:role", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName", matcher.group(5));
        assertEquals(outputLine, "action", matcher.group(6));

        outputLine = outputLines[1];

        matcher = pattern.matcher(outputLines[1]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "1", matcher.group(1));
        assertEquals(outputLine, "role_subject", matcher.group(2));
        assertEquals(outputLine, "aStem:role2", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.1", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName2", matcher.group(5));
        assertEquals(outputLine, "action2", matcher.group(6));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("\"name\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("roleLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));




        // ######################################################
        // Try attributeDefId

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        args = new ArrayList<String>();
        args.add("--operation=getPermissionAssignmentsWs");
        args.add("--attributeDefUuids=" + permissionDef.getId());
        args.add("--pointInTimeFrom=" + GrouperClientUtils.timestampToString(pointInTime));
        args.add("--pointInTimeTo=" + GrouperClientUtils.timestampToString(pointInTime));
        GrouperClient.main(args.toArray(new String[0]));

        System.out.flush();
        output = new String(baos.toByteArray());

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        System.setOut(systemOut);


        assertEquals(2, outputLines.length);
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "role", matcher.group(2));
        assertEquals(outputLine, "aStem:role", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName", matcher.group(5));
        assertEquals(outputLine, "action", matcher.group(6));

        outputLine = outputLines[1];

        matcher = pattern.matcher(outputLines[1]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "1", matcher.group(1));
        assertEquals(outputLine, "role_subject", matcher.group(2));
        assertEquals(outputLine, "aStem:role2", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.1", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName2", matcher.group(5));
        assertEquals(outputLine, "action2", matcher.group(6));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("roleLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));



        // ######################################################
        // Try attributeDefNameName

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        args = new ArrayList<String>();
        args.add("--operation=getPermissionAssignmentsWs");
        args.add("--attributeDefNameNames=" + permissionDefName.getName());
        args.add("--pointInTimeFrom=" + GrouperClientUtils.timestampToString(pointInTime));
        args.add("--pointInTimeTo=" + GrouperClientUtils.timestampToString(pointInTime));
        GrouperClient.main(args.toArray(new String[0]));

        System.out.flush();
        output = new String(baos.toByteArray());

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        System.setOut(systemOut);


        assertEquals(1, outputLines.length);
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "role", matcher.group(2));
        assertEquals(outputLine, "aStem:role", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName", matcher.group(5));
        assertEquals(outputLine, "action", matcher.group(6));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups") && GrouperClientWs.mostRecentRequest.contains("\"name\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("roleLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));


        // ######################################################
        // Try attributeDefNameUuid

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        args = new ArrayList<String>();
        args.add("--operation=getPermissionAssignmentsWs");
        args.add("--attributeDefNameUuids=" + permissionDefName.getId());
        args.add("--pointInTimeFrom=" + GrouperClientUtils.timestampToString(pointInTime));
        args.add("--pointInTimeTo=" + GrouperClientUtils.timestampToString(pointInTime));
        GrouperClient.main(args.toArray(new String[0]));

        System.out.flush();
        output = new String(baos.toByteArray());

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        System.setOut(systemOut);


        assertEquals(1, outputLines.length);
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "role", matcher.group(2));
        assertEquals(outputLine, "aStem:role", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName", matcher.group(5));
        assertEquals(outputLine, "action", matcher.group(6));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("roleLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));


        // ######################################################
        // Try roleName

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        args = new ArrayList<String>();
        args.add("--operation=getPermissionAssignmentsWs");
        args.add("--roleNames=" + role.getName());
        args.add("--pointInTimeFrom=" + GrouperClientUtils.timestampToString(pointInTime));
        args.add("--pointInTimeTo=" + GrouperClientUtils.timestampToString(pointInTime));
        GrouperClient.main(args.toArray(new String[0]));

        System.out.flush();
        output = new String(baos.toByteArray());

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        System.setOut(systemOut);


        assertEquals(1, outputLines.length);
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "role", matcher.group(2));
        assertEquals(outputLine, "aStem:role", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName", matcher.group(5));
        assertEquals(outputLine, "action", matcher.group(6));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("roleLookups") && GrouperClientWs.mostRecentRequest.contains("\"groupName\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));


        // ######################################################
        // Try roleUuid

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        args = new ArrayList<String>();
        args.add("--operation=getPermissionAssignmentsWs");
        args.add("--roleUuids=" + role.getId());
        args.add("--pointInTimeFrom=" + GrouperClientUtils.timestampToString(pointInTime));
        args.add("--pointInTimeTo=" + GrouperClientUtils.timestampToString(pointInTime));
        GrouperClient.main(args.toArray(new String[0]));

        System.out.flush();
        output = new String(baos.toByteArray());

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        System.setOut(systemOut);


        assertEquals(1, outputLines.length);
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "role", matcher.group(2));
        assertEquals(outputLine, "aStem:role", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName", matcher.group(5));
        assertEquals(outputLine, "action", matcher.group(6));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("roleLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));

        // ######################################################
        // Try roleName and actions

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        args = new ArrayList<String>();
        args.add("--operation=getPermissionAssignmentsWs");
        args.add("--roleNames=" + role.getName());
        args.add("--actions=a");
        args.add("--pointInTimeFrom=" + GrouperClientUtils.timestampToString(pointInTime));
        args.add("--pointInTimeTo=" + GrouperClientUtils.timestampToString(pointInTime));
        GrouperClient.main(args.toArray(new String[0]));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        assertTrue(outputLines == null || outputLines.length == 0 || StringUtils.isBlank(outputLines[0]));


        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("roleLookups") && GrouperClientWs.mostRecentRequest.contains("\"groupName\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));

        // ######################################################
        // Try roleName and includeAttributeAssignments

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        args = new ArrayList<String>();
        args.add("--operation=getPermissionAssignmentsWs");
        args.add("--roleNames=" + role.getName());
        args.add("--includeAttributeAssignments=T");
        args.add("--pointInTimeFrom=" + GrouperClientUtils.timestampToString(pointInTime));
        args.add("--pointInTimeTo=" + GrouperClientUtils.timestampToString(pointInTime));
        GrouperClient.main(args.toArray(new String[0]));

        System.out.flush();
        output = new String(baos.toByteArray());

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        System.setOut(systemOut);


        assertEquals(1, outputLines.length);
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "role", matcher.group(2));
        assertEquals(outputLine, "aStem:role", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName", matcher.group(5));
        assertEquals(outputLine, "action", matcher.group(6));


        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentResponse,
            GrouperClientWs.mostRecentResponse.contains("WsAttributeAssign"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("roleLookups") && GrouperClientWs.mostRecentRequest.contains("\"groupName\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));

        // ######################################################
        // Try roleName and includeAttributeAssignments and includeAssignmentsOnAssignments

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        args = new ArrayList<String>();
        args.add("--operation=getPermissionAssignmentsWs");
        args.add("--roleNames=" + role.getName());
        args.add("--includeAttributeAssignments=T");
        args.add("--includeAssignmentsOnAssignments=T");
        args.add("--pointInTimeFrom=" + GrouperClientUtils.timestampToString(pointInTime));
        args.add("--pointInTimeTo=" + GrouperClientUtils.timestampToString(pointInTime));
        GrouperClient.main(args.toArray(new String[0]));

        System.out.flush();
        output = new String(baos.toByteArray());

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        System.setOut(systemOut);


        assertEquals(1, outputLines.length);
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "role", matcher.group(2));
        assertEquals(outputLine, "aStem:role", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName", matcher.group(5));
        assertEquals(outputLine, "action", matcher.group(6));


        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentResponse,
            GrouperClientWs.mostRecentResponse.contains("WsAttributeAssign"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("roleLookups") && GrouperClientWs.mostRecentRequest.contains("\"groupName\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));
        assertTrue(GrouperClientWs.mostRecentResponse,
            !GrouperClientWs.mostRecentResponse.contains("attributeDefNameSetDepth"));

        // ######################################################
        // Try roleName and includePermissionAssignDetail

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        args = new ArrayList<String>();
        args.add("--operation=getPermissionAssignmentsWs");
        args.add("--roleNames=" + role.getName());
        args.add("--includePermissionAssignDetail=T");
        args.add("--pointInTimeFrom=" + GrouperClientUtils.timestampToString(pointInTime));
        args.add("--pointInTimeTo=" + GrouperClientUtils.timestampToString(pointInTime));
        GrouperClient.main(args.toArray(new String[0]));

        System.out.flush();
        output = new String(baos.toByteArray());

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        System.setOut(systemOut);


        assertEquals(1, outputLines.length);
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "role", matcher.group(2));
        assertEquals(outputLine, "aStem:role", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName", matcher.group(5));
        assertEquals(outputLine, "action", matcher.group(6));


        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentResponse,
            GrouperClientWs.mostRecentResponse.contains("attributeDefNameSetDepth"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("roleLookups") && GrouperClientWs.mostRecentRequest.contains("\"groupName\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));
        assertTrue(GrouperClientWs.mostRecentResponse,
            !GrouperClientWs.mostRecentResponse.contains("WsAttributeDefName"));

        // ######################################################
        // Try roleName and includeAttributeDefNames

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        args = new ArrayList<String>();
        args.add("--operation=getPermissionAssignmentsWs");
        args.add("--roleNames=" + role.getName());
        args.add("--includeAttributeDefNames=T");
        args.add("--pointInTimeFrom=" + GrouperClientUtils.timestampToString(pointInTime));
        args.add("--pointInTimeTo=" + GrouperClientUtils.timestampToString(pointInTime));
        GrouperClient.main(args.toArray(new String[0]));

        System.out.flush();
        output = new String(baos.toByteArray());

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        System.setOut(systemOut);


        assertEquals(1, outputLines.length);
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "role", matcher.group(2));
        assertEquals(outputLine, "aStem:role", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName", matcher.group(5));
        assertEquals(outputLine, "action", matcher.group(6));


        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentResponse,
            GrouperClientWs.mostRecentResponse.contains("WsAttributeDefName"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("roleLookups") && GrouperClientWs.mostRecentRequest.contains("\"groupName\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));

        // ######################################################
        // Try roleName and includeSubjectDetail

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        args = new ArrayList<String>();
        args.add("--operation=getPermissionAssignmentsWs");
        args.add("--roleNames=" + role.getName());
        args.add("--includeSubjectDetail=T");
        args.add("--pointInTimeFrom=" + GrouperClientUtils.timestampToString(pointInTime));
        args.add("--pointInTimeTo=" + GrouperClientUtils.timestampToString(pointInTime));
        GrouperClient.main(args.toArray(new String[0]));

        System.out.flush();
        output = new String(baos.toByteArray());

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        System.setOut(systemOut);


        assertEquals(1, outputLines.length);
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "role", matcher.group(2));
        assertEquals(outputLine, "aStem:role", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName", matcher.group(5));
        assertEquals(outputLine, "action", matcher.group(6));


        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentResponse,
            !GrouperClientWs.mostRecentResponse.contains("hasComposite"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("roleLookups") && GrouperClientWs.mostRecentRequest.contains("\"groupName\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));

        // ######################################################
        // Try roleName and subjectAttributeNames

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        args = new ArrayList<String>();
        args.add("--operation=getPermissionAssignmentsWs");
        args.add("--roleNames=" + role.getName());
        args.add("--subjectAttributeNames=abc");
        args.add("--pointInTimeFrom=" + GrouperClientUtils.timestampToString(pointInTime));
        args.add("--pointInTimeTo=" + GrouperClientUtils.timestampToString(pointInTime));
        GrouperClient.main(args.toArray(new String[0]));

        System.out.flush();
        output = new String(baos.toByteArray());

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        System.setOut(systemOut);


        assertEquals(1, outputLines.length);
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "role", matcher.group(2));
        assertEquals(outputLine, "aStem:role", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName", matcher.group(5));
        assertEquals(outputLine, "action", matcher.group(6));


        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentResponse,
            !GrouperClientWs.mostRecentResponse.contains("hasComposite"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames") && GrouperClientWs.mostRecentRequest.contains("abc"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("roleLookups") && GrouperClientWs.mostRecentRequest.contains("\"groupName\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));

        // ######################################################
        // Try roleName and params

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        args = new ArrayList<String>();
        args.add("--operation=getPermissionAssignmentsWs");
        args.add("--roleNames=" + role.getName());
        args.add("--paramName0=a");
        args.add("--paramValue0=b");
        args.add("--pointInTimeFrom=" + GrouperClientUtils.timestampToString(pointInTime));
        args.add("--pointInTimeTo=" + GrouperClientUtils.timestampToString(pointInTime));
        GrouperClient.main(args.toArray(new String[0]));

        System.out.flush();
        output = new String(baos.toByteArray());

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        System.setOut(systemOut);


        assertEquals(1, outputLines.length);
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "role", matcher.group(2));
        assertEquals(outputLine, "aStem:role", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName", matcher.group(5));
        assertEquals(outputLine, "action", matcher.group(6));


        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAttributeAssignments"));
        assertTrue(GrouperClientWs.mostRecentResponse,
            !GrouperClientWs.mostRecentResponse.contains("hasComposite"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includePermissionAssignDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("roleLookups") && GrouperClientWs.mostRecentRequest.contains("\"groupName\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsSubjectLookups"));

        // ######################################################
        // Try roleName and actAsSubjectId

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        args = new ArrayList<String>();
        args.add("--operation=getPermissionAssignmentsWs");
        args.add("--roleNames=" + role.getName());
        args.add("--actAsSubjectId=" + SubjectTestHelper.SUBJ0_ID);
        args.add("--pointInTimeFrom=" + GrouperClientUtils.timestampToString(pointInTime));
        args.add("--pointInTimeTo=" + GrouperClientUtils.timestampToString(pointInTime));

        try {
          GrouperClient.main(args.toArray(new String[0]));
        } catch (Exception e) {
          assertTrue(ExceptionUtils.getFullStackTrace(e).contains("GROUP_NOT_FOUND"));
        }
        System.out.flush();

        System.setOut(systemOut);



        // ######################################################
        // Try roleName and pointInTimeFrom only

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        args = new ArrayList<String>();
        args.add("--operation=getPermissionAssignmentsWs");
        args.add("--roleNames=" + role.getName());
        args.add("--pointInTimeFrom=" + GrouperClientUtils.timestampToString(after));
        GrouperClient.main(args.toArray(new String[0]));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        assertTrue(outputLines == null || outputLines.length == 0 || StringUtils.isBlank(outputLines[0]));

        // ######################################################
        // Try roleName and pointInTimeFrom only

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        args = new ArrayList<String>();
        args.add("--operation=getPermissionAssignmentsWs");
        args.add("--roleNames=" + role.getName());
        args.add("--pointInTimeFrom=" + GrouperClientUtils.timestampToString(before));
        GrouperClient.main(args.toArray(new String[0]));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        assertEquals(1, outputLines.length);
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "role", matcher.group(2));
        assertEquals(outputLine, "aStem:role", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName", matcher.group(5));
        assertEquals(outputLine, "action", matcher.group(6));


        // ######################################################
        // Try roleName and pointInTimeTo only

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        args = new ArrayList<String>();
        args.add("--operation=getPermissionAssignmentsWs");
        args.add("--roleNames=" + role.getName());
        args.add("--pointInTimeTo=" + GrouperClientUtils.timestampToString(before));
        GrouperClient.main(args.toArray(new String[0]));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        assertTrue(outputLines == null || outputLines.length == 0 || StringUtils.isBlank(outputLines[0]));

        // ######################################################
        // Try roleName and pointInTimeTo only

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        args = new ArrayList<String>();
        args.add("--operation=getPermissionAssignmentsWs");
        args.add("--roleNames=" + role.getName());
        args.add("--pointInTimeTo=" + GrouperClientUtils.timestampToString(after));
        GrouperClient.main(args.toArray(new String[0]));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        assertEquals(1, outputLines.length);
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "role", matcher.group(2));
        assertEquals(outputLine, "aStem:role", matcher.group(3));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(4));
        assertEquals(outputLine, "aStem:permissionDefName", matcher.group(5));
        assertEquals(outputLine, "action", matcher.group(6));


      } finally {
        System.setOut(systemOut);
      }

    }

  /**
   * @throws Exception
   */
  public void testAssignPermissions() throws Exception {

    AttributeDefName attributeDefName = AttributeDefNameTest.exampleAttributeDefNameDb(
        AttributeDefType.perm, "test", "testAttributeAssignDefName");

    final AttributeDef attributeDef = attributeDefName.getAttributeDef();

    attributeDef.setAssignToEffMembership(true);
    attributeDef.setAssignToGroup(true);
    attributeDef.store();

    Group group = new GroupSave(GrouperSession.staticGrouperSession()).assignSaveMode(SaveMode.INSERT_OR_UPDATE)
      .assignGroupNameToEdit("test:groupTestAttrAssign").assignName("test:groupTestAttrAssign").assignCreateParentStemsIfNotExist(true)
      .assignDescription("description").assignTypeOfGroup(TypeOfGroup.role).save();

    //test subject 0 can view and read
    group.grantPriv(SubjectTestHelper.SUBJ0, AccessPrivilege.VIEW);
    attributeDef.getPrivilegeDelegate().grantPriv(SubjectTestHelper.SUBJ0, AttributeDefPrivilege.ATTR_READ, false);

    AttributeAssign attributeAssign = null;
    //    AttributeAssignResult attributeAssignResult = group.getAttributeDelegate().assignAttribute(attributeDefName);
    //     = attributeAssignResult.getAttributeAssign();

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignPermissionsWs --permissionType=role --permissionAssignOperation=assign_permission " +
          "--permissionDefNameNames=test:testAttributeAssignDefName --roleNames=test:groupTestAttrAssign",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group, owner: test:groupTestAttrAssign, attributeDefNameNameName test:testAttributeAssignDefName, action: assign, values: 15,5,5, enable: T, id: a9c83eeb78c04ae5befcea36272d318c, changed: true, valuesChanged: false
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F), changed\: (T|F), valuesChanged\: (T|F)$
      Pattern pattern = Pattern
          .compile("^Index\\: (\\d+)\\: permissionType\\: (.+), owner\\: (.+), permissionDefNameName\\: (.+), action\\: (.+), disallowed\\: (.+), enabled\\: (T|F), attributeAssignId\\: (.+), changed\\: (T|F), deleted\\: (T|F)$");
      String outputLine = outputLines[0];

      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "role", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));

      assertEquals(outputLine, "F", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "T", matcher.group(9));


      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("roleLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectRoleLookups"));
      assertTrue(GrouperClientWs.mostRecentResponse,
          GrouperClientWs.mostRecentResponse.contains("disallowed"));

      // ######################################################
      // Try permissionId

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignPermissionsWs --permissionType=role --permissionAssignOperation=assign_permission " +
          "--permissionDefNameUuids=" + attributeDefName.getId() +  " --roleNames=test:groupTestAttrAssign",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "role", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));

      assertEquals(outputLine, "F", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "F", matcher.group(9));


      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains(attributeDefName.getId()));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("roleLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectRoleLookups"));


      // ######################################################
      // Try permissionIdIOndex

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignPermissionsWs --permissionType=role --permissionAssignOperation=assign_permission " +
          "--permissionDefNameIdIndexes=" + attributeDefName.getIdIndex() +  " --roleNames=test:groupTestAttrAssign",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "role", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));

      assertEquals(outputLine, "F", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "F", matcher.group(9));


      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains(attributeDefName.getIdIndex().toString()));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("roleLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectRoleLookups"));

      // ######################################################
      // Try ownerGroupUuid

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignPermissionsWs --permissionType=role --permissionAssignOperation=assign_permission " +
          "--permissionDefNameNames=test:testAttributeAssignDefName --roleUuids=" + group.getUuid(),
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "role", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));

      assertEquals(outputLine, "F", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "F", matcher.group(9));


      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("roleLookups")
          && GrouperClientWs.mostRecentRequest.contains(group.getUuid()));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectRoleLookups"));

      // ######################################################
      // Try ownerGroupUuid

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignPermissionsWs --permissionType=role --permissionAssignOperation=assign_permission " +
          "--permissionDefNameNames=test:testAttributeAssignDefName --roleIdIndexes=" + group.getIdIndex(),
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "role", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));

      assertEquals(outputLine, "F", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "F", matcher.group(9));


      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("roleLookups")
          && GrouperClientWs.mostRecentRequest.contains(group.getIdIndex().toString()));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectRoleLookups"));

      // ######################################################
      // Try enabledTime

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignPermissionsWs --permissionType=role --permissionAssignOperation=assign_permission " +
          "--permissionDefNameNames=test:testAttributeAssignDefName --roleNames=test:groupTestAttrAssign "
          + " --assignmentEnabledTime=2010/03/05_17:05:13.123",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "role", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));

      assertEquals(outputLine, "F", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "T", matcher.group(9));


      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime")
          && GrouperClientWs.mostRecentRequest.contains("2010/03/05 17:05:13.123"));
      assertTrue(GrouperClientWs.mostRecentResponse,
          GrouperClientWs.mostRecentResponse.contains("2010/03/05 17:05:13.123"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("roleLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectRoleLookups"));

      // ######################################################
      // Try disabledTime

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignPermissionsWs --permissionType=role --permissionAssignOperation=assign_permission " +
          "--permissionDefNameNames=test:testAttributeAssignDefName --roleNames=test:groupTestAttrAssign "
          + " --assignmentDisabledTime=2010/03/05_17:05:13.123",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "role", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));

      assertEquals(outputLine, "F", matcher.group(6));
      assertEquals(outputLine, "F", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "T", matcher.group(9));


      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime")
          && GrouperClientWs.mostRecentRequest.contains("2010/03/05 17:05:13.123"));
      assertTrue(GrouperClientWs.mostRecentResponse,
          GrouperClientWs.mostRecentResponse.contains("2010/03/05 17:05:13.123"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("roleLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectRoleLookups"));

      // ######################################################
      // Try assignmentNotes

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignPermissionsWs --permissionType=role --permissionAssignOperation=assign_permission " +
          "--permissionDefNameNames=test:testAttributeAssignDefName --roleNames=test:groupTestAttrAssign "
          + " --assignmentNotes=theNotes",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "role", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));

      assertEquals(outputLine, "F", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "T", matcher.group(9));


      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentResponse,
          GrouperClientWs.mostRecentResponse.contains("theNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("assignmentNotes")
          && GrouperClientWs.mostRecentRequest.contains("theNotes") );
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("roleLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectRoleLookups"));


      // ######################################################
      // Try delegatable

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignPermissionsWs --permissionType=role --permissionAssignOperation=assign_permission " +
          "--permissionDefNameNames=test:testAttributeAssignDefName --roleNames=test:groupTestAttrAssign "
          + " --delegatable=FALSE",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "role", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));

      assertEquals(outputLine, "F", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "T", matcher.group(9));


      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      //assertTrue(GrouperClientWs.mostRecentResponse,
      //    GrouperClientWs.mostRecentResponse.contains("theNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("delegatable")
          && GrouperClientWs.mostRecentRequest.contains("FALSE"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("roleLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectRoleLookups"));

      // ######################################################
      // Try actions

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignPermissionsWs --permissionType=role --permissionAssignOperation=assign_permission " +
          "--permissionDefNameNames=test:testAttributeAssignDefName --roleNames=test:groupTestAttrAssign "
          + " --actions=assign",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "role", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));

      assertEquals(outputLine, "F", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "F", matcher.group(9));


      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      //assertTrue(GrouperClientWs.mostRecentResponse,
      //    GrouperClientWs.mostRecentResponse.contains("theNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("roleLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectRoleLookups"));

      // ######################################################
      // includeGroupDetail

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignPermissionsWs --permissionType=role --permissionAssignOperation=assign_permission " +
          "--permissionDefNameNames=test:testAttributeAssignDefName --roleNames=test:groupTestAttrAssign "
          + " --includeGroupDetail=T",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "role", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "F", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "F", matcher.group(9));


      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("roleLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectRoleLookups"));


      // ######################################################
      // includeSubjectDetail

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignPermissionsWs --permissionType=role --permissionAssignOperation=assign_permission " +
          "--permissionDefNameNames=test:testAttributeAssignDefName --roleNames=test:groupTestAttrAssign "
          + " --includeSubjectDetail=T",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "role", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "F", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "F", matcher.group(9));


      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("roleLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectRoleLookups"));


      // ######################################################
      // subjectAttributeNames

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignPermissionsWs --permissionType=role --permissionAssignOperation=assign_permission " +
          "--permissionDefNameNames=test:testAttributeAssignDefName --roleNames=test:groupTestAttrAssign "
          + " --subjectAttributeNames=abc",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "role", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "F", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "F", matcher.group(9));


      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("roleLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectRoleLookups"));


      // ######################################################
      // params

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignPermissionsWs --permissionType=role --permissionAssignOperation=assign_permission " +
          "--permissionDefNameNames=test:testAttributeAssignDefName --roleNames=test:groupTestAttrAssign "
          + " --paramName0=a --paramValue0=b",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "role", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "F", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "F", matcher.group(9));


      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("roleLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectRoleLookups"));


      // ######################################################
      // attribute assign lookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      String attributeAssignId = attributeAssign.getId();

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignPermissionsWs --permissionType=role --permissionAssignOperation=remove_permission "
          + " --attributeAssignUuids=" + attributeAssign.getId(),
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, false);

      assertNull("Should be deleted", attributeAssign);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "role", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));

      assertEquals(outputLine, "F", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssignId, matcher.group(8));
      assertEquals(outputLine, "T", matcher.group(9));


      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("permissionDefNameLookups")
          && !GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("roleLookups")
          && !GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectRoleLookups"));

      // ######################################################
      // attribute assign lookups custom tempflate

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      attributeAssign = group.getAttributeDelegate().assignAttribute(attributeDefName).getAttributeAssign();

      attributeAssignId = attributeAssign.getId();

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignPermissionsWs --permissionType=role --permissionAssignOperation=remove_permission "
          + " --attributeAssignUuids=" + attributeAssign.getId() + " --outputTemplate=${wsAttributeAssign.attributeAssignType}$newline$",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, false);

      assertNull("Should be deleted", attributeAssign);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = GrouperClientUtils.trim(outputLines[0]);

      assertEquals(outputLine, "group", outputLine);

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("permissionDefNameLookups")
          && !GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("roleLookups")
          && !GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectRoleLookups"));


      // ######################################################
      // attribute assign lookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      attributeAssign = group.getAttributeDelegate().assignAttribute(attributeDefName).getAttributeAssign();

      attributeAssignId = attributeAssign.getId();

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignPermissionsWs --permissionType=role --permissionAssignOperation=remove_permission "
          + " --attributeAssignUuids=" + attributeAssign.getId() + " --actAsSubjectId=GrouperSystem",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, false);

      assertNull("Should be deleted", attributeAssign);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "role", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));

      assertEquals(outputLine, "F", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssignId, matcher.group(8));
      assertEquals(outputLine, "T", matcher.group(9));


      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("permissionDefNameLookups")
          && !GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("roleLookups")
          && !GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectRoleLookups"));

      // ######################################################
      // disallow

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      group.getAttributeDelegate().removeAttribute(attributeDefName);

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignPermissionsWs --permissionType=role --permissionAssignOperation=assign_permission " +
          "--permissionDefNameNames=test:testAttributeAssignDefName --roleNames=test:groupTestAttrAssign --disallowed=true",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, false);
      attributeAssignId = attributeAssign.getId();

      assertTrue("Should be disallowed", attributeAssign.isDisallowed());

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "role", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));

      assertEquals(outputLine, "T", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssignId, matcher.group(8));
      assertEquals(outputLine, "T", matcher.group(9));


      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("roleLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectRoleLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("disallowed"));



    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testAssignPermissionsAnyMembership() throws Exception {

    GrouperSession grouperSession = GrouperSession.startRootSession();

    AttributeDefName attributeDefName = AttributeDefNameTest.exampleAttributeDefNameDb(AttributeDefType.perm, "test", "testAttributeAssignDefName");

    final AttributeDef attributeDef = attributeDefName.getAttributeDef();

    attributeDef.setAssignToGroup(false);
    attributeDef.setAssignToEffMembership(true);
    attributeDef.store();

    Group group1 = new GroupSave(GrouperSession.staticGrouperSession()).assignSaveMode(SaveMode.INSERT_OR_UPDATE)
      .assignGroupNameToEdit("test:anyMembershipTestAttrAssign").assignName("test:anyMembershipTestAttrAssign").assignCreateParentStemsIfNotExist(true)
      .assignTypeOfGroup(TypeOfGroup.role).assignDescription("description").save();

    Group group2 = new GroupSave(GrouperSession.staticGrouperSession()).assignSaveMode(SaveMode.INSERT_OR_UPDATE)
      .assignGroupNameToEdit("test:anyMembershipTestAttrAssign2").assignName("test:anyMembershipTestAttrAssign2").assignCreateParentStemsIfNotExist(true)
      .assignDescription("description").save();

    //add one group to another to make effective membership and add attribute to that membership
    group1.addMember(group2.toSubject());
    group2.addMember(SubjectTestHelper.SUBJ0);

    Member member = MemberFinder.findBySubject(grouperSession, SubjectTestHelper.SUBJ0, false);

    Membership membership = (Membership)MembershipFinder.findMemberships(GrouperUtil.toSet(group1.getId()),
        GrouperUtil.toSet(member.getUuid()), null, null, FieldFinder.find("members", true), null, null, null, null, null).iterator().next()[0];


    AttributeAssign attributeAssign = null;

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignPermissionsWs --permissionType=role_subject --permissionAssignOperation=assign_permission " +
          "--permissionDefNameNames=test:testAttributeAssignDefName --subjectRole0SubjectId=" + member.getSubjectId()
          + " --subjectRole0RoleName=" + group1.getName(),
          " "));

      attributeAssign = membership.getAttributeDelegateEffMship().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group, owner: test:groupTestAttrAssign, attributeDefNameNameName test:testAttributeAssignDefName, action: assign, values: 15,5,5, enable: T, id: a9c83eeb78c04ae5befcea36272d318c, changed: true, valuesChanged: false
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F), changed\: (T|F), valuesChanged\: (T|F)$
      Pattern pattern = Pattern
        .compile("^Index\\: (\\d+)\\: permissionType\\: (.+), owner\\: (.+), permissionDefNameName\\: (.+), action\\: (.+), disallowed\\: (T|F), enabled\\: (T|F), attributeAssignId\\: (.+), changed\\: (T|F), deleted\\: (T|F)$");
      String outputLine = outputLines[0];

      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "role_subject", matcher.group(2));
      assertEquals(outputLine, "test:anyMembershipTestAttrAssign - jdbc - test.subject.0", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));

      assertEquals(outputLine, "F", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));
      assertEquals(outputLine, "T", matcher.group(9));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("permissionDefNameLookups")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("roleLookups")
          && !GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("subjectRoleLookups")
          && GrouperClientWs.mostRecentRequest.contains(group1.getName())
          && GrouperClientWs.mostRecentRequest.contains(member.getSubjectId()));


    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   *
   * @throws Exception
   */
  public void atestGetGroupsCache() throws Exception {

    // make sure group exists
    GrouperSession grouperSession = GrouperSession.startRootSession();
    Group group = Group.saveGroup(grouperSession, "aStem:aGroup", null,
        "aStem:aGroup", "aGroup", "description1", null, true);

    String wsUserLabel = GrouperClientUtils.propertiesValue(
        "grouperClient.webService.user.label", true);
    String wsUserString = GrouperClientUtils.propertiesValue(
        "grouperClient.webService." + wsUserLabel, true);
    Subject wsUser = SubjectFinder.findByIdOrIdentifier(wsUserString, true);

    group.grantPriv(wsUser, AccessPrivilege.READ, false);
    group.grantPriv(wsUser, AccessPrivilege.VIEW, false);

    // add a subject
    group.addMember(SubjectTestHelper.SUBJ0, false);

    WsGetGroupsResults wsGetGroupsResults = new GcGetGroups().addSubjectId(SubjectTestHelper.SUBJ0_ID).execute();

    assertEquals("description1", wsGetGroupsResults.getResults()[0].getWsGroups()[0].getDescription());

    //change the description
    WsGroupToSave wsGroupToSave = new WsGroupToSave();
    wsGroupToSave.setWsGroupLookup(new WsGroupLookup("aStem:aGroup", null));
    WsGroup wsGroup = new WsGroup();
    wsGroup.setDescription("description2");
    wsGroup.setName("aStem:aGroup");
    wsGroup.setDisplayExtension("aGroup");
    wsGroupToSave.setWsGroup(wsGroup);
    WsGroupSaveResults wsGroupSaveResults = new GcGroupSave().addGroupToSave(wsGroupToSave).execute();
    assertEquals("description2", wsGroupSaveResults.getResults()[0].getWsGroup().getDescription());

    //get groups for user again
    wsGetGroupsResults = new GcGetGroups().addSubjectId(SubjectTestHelper.SUBJ0_ID).execute();

    assertEquals("description2", wsGetGroupsResults.getResults()[0].getWsGroups()[0].getDescription());


  }

  /**
   * @throws Exception
   */
  public void testAttributeDefNameSave() throws Exception {

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));
    String output = null;
    String[] outputLines = null;
    Pattern pattern = null;
    Matcher matcher = null;
    try {

      GrouperSession grouperSession = GrouperSession.startRootSession();

      AttributeDef attributeDef = new AttributeDefSave(grouperSession).assignName("aStem:newAttributeDef")
        .assignCreateParentStemsIfNotExist(true).save();

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=attributeDefNameSaveWs --name=aStem:newAttributeDefName --nameOfAttributeDef=aStem:newAttributeDef", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      pattern = Pattern.compile("^Success: (T|F): code: ([A-Z_]+): (.*+)$");
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "T", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS_INSERTED", matcher.group(2));
      assertEquals(outputLines[0], "aStem:newAttributeDefName", matcher.group(3));

      // ##########################
      //try with name with slash

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=attributeDefNameSaveWs --name=aStem:newAttributeDefName0/1 --nameOfAttributeDef=aStem:newAttributeDef", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "T", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS_INSERTED", matcher.group(2));
      assertEquals(outputLines[0], "aStem:newAttributeDefName0/1", matcher.group(3));

      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("saveMode"));

      //########################################################
      // run again with save mode  --saveMode=INSERT_OR_UPDATE|INSERT|UPDATE

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=attributeDefNameSaveWs --name=aStem:newAttributeDefName0/1 --nameOfAttributeDef=aStem:newAttributeDef --saveMode=UPDATE", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "T", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS_NO_CHANGES_NEEDED", matcher.group(2));
      assertEquals(outputLines[0], "aStem:newAttributeDefName0/1", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest,
        GrouperClientWs.mostRecentRequest.contains("saveMode")
            && GrouperClientWs.mostRecentRequest.contains("\"UPDATE\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookup"));

      //########################################################
      // run again with lookup  --attributeDefNameLookupName=aStem:newAttributeDefName

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=attributeDefNameSaveWs --name=aStem:newAttributeDefName --attributeDefNameLookupName=aStem:newAttributeDefName --nameOfAttributeDef=aStem:newAttributeDef", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "T", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS_NO_CHANGES_NEEDED", matcher.group(2));
      assertEquals(outputLines[0], "aStem:newAttributeDefName", matcher.group(3));

      assertFalse(GrouperClientWs.mostRecentRequest,
        GrouperClientWs.mostRecentRequest.contains("saveMode"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"wsAttributeDefNameLookup\""));


      //########################################################
      // run again with lookup  --attributeDefNameLookupUuid=aStem:newAttributeDefName

      AttributeDefName newAttributeDefName = AttributeDefNameFinder.findByName("aStem:newAttributeDefName", true);

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=attributeDefNameSaveWs --name=aStem:newAttributeDefName --attributeDefNameLookupUuid=" + newAttributeDefName.getId() + " --nameOfAttributeDef=aStem:newAttributeDef", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "T", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS_NO_CHANGES_NEEDED", matcher.group(2));
      assertEquals(outputLines[0], "aStem:newAttributeDefName", matcher.group(3));

      assertFalse(GrouperClientWs.mostRecentRequest,
        GrouperClientWs.mostRecentRequest.contains("description"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"wsAttributeDefNameLookup\"")
          && GrouperClientWs.mostRecentRequest.contains(newAttributeDefName.getId()));

      //########################################################
      // run again with lookup  --attributeDefNameLookupUuid=aStem:newAttributeDefName

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=attributeDefNameSaveWs --name=aStem:newAttributeDefName --attributeDefNameLookupIdIndex=" + newAttributeDefName.getIdIndex() + " --nameOfAttributeDef=aStem:newAttributeDef", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "T", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS_NO_CHANGES_NEEDED", matcher.group(2));
      assertEquals(outputLines[0], "aStem:newAttributeDefName", matcher.group(3));

      assertFalse(GrouperClientWs.mostRecentRequest,
        GrouperClientWs.mostRecentRequest.contains("description"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"wsAttributeDefNameLookup\"")
          && GrouperClientWs.mostRecentRequest.contains(newAttributeDefName.getIdIndex().toString()));

      //########################################################
      // run again with --description=theDescription

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=attributeDefNameSaveWs --name=aStem:newAttributeDefName --description=theDescription --nameOfAttributeDef=aStem:newAttributeDef", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "T", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS_UPDATED", matcher.group(2));
      assertEquals(outputLines[0], "aStem:newAttributeDefName", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"description\"")
          && GrouperClientWs.mostRecentRequest.contains("theDescription"));

      //########################################################
      // run again with --idIndex=12345

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=attributeDefNameSaveWs --name=aStem:newAttributeDefName5 --idIndex=12345 --nameOfAttributeDef=aStem:newAttributeDef", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "T", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS_INSERTED", matcher.group(2));
      assertEquals(outputLines[0], "aStem:newAttributeDefName5", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"idIndex\"")
          && GrouperClientWs.mostRecentRequest.contains("12345"));
      assertTrue(GrouperClientWs.mostRecentResponse,
          GrouperClientWs.mostRecentResponse.contains("\"idIndex\"12345"));

      //########################################################
      // run again with --displayExtension=theDisplayExtension

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=attributeDefNameSaveWs --name=aStem:newAttributeDefName --displayExtension=theDisplayExtension --nameOfAttributeDef=aStem:newAttributeDef", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "T", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS_UPDATED", matcher.group(2));
      assertEquals(outputLines[0], "aStem:newAttributeDefName", matcher.group(3));

      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("createParentStemsIfNotExist"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("displayExtension")
          && GrouperClientWs.mostRecentRequest.contains("theDisplayExtension"));

      //########################################################
      // run again with --createParentStemsIfNotExist=true

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=attributeDefNameSaveWs --name=aStem:newAttributeDefName --createParentStemsIfNotExist=true --nameOfAttributeDef=aStem:newAttributeDef", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "T", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS_UPDATED", matcher.group(2));
      assertEquals(outputLines[0], "aStem:newAttributeDefName", matcher.group(3));

      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefId"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("createParentStemsIfNotExist"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefName"));

      //########################################################
      // run again with --uuidOfAttributeDef=abc

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=attributeDefNameSaveWs --name=aStem:newAttributeDefName --uuidOfAttributeDef=" + attributeDef.getId(), " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "T", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS_NO_CHANGES_NEEDED", matcher.group(2));
      assertEquals(outputLines[0], "aStem:newAttributeDefName", matcher.group(3));

      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefId"));


      //########################################################
      // run again with --actAsSubjectId=subjId

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=attributeDefNameSaveWs --name=aStem:newAttributeDefName --actAsSubjectId=GrouperSystem --nameOfAttributeDef=aStem:newAttributeDef", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "T", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS_NO_CHANGES_NEEDED", matcher.group(2));
      assertEquals(outputLines[0], "aStem:newAttributeDefName", matcher.group(3));

      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("subjectIdentifier"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup\":\"subjectId"));


      //########################################################
      // run again with --actAsSubjectIdentifier=subjId

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=attributeDefNameSaveWs --name=aStem:newAttributeDefName --actAsSubjectIdentifier=GrouperSystem --nameOfAttributeDef=aStem:newAttributeDef", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "T", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS_NO_CHANGES_NEEDED", matcher.group(2));
      assertEquals(outputLines[0], "aStem:newAttributeDefName", matcher.group(3));

      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("sourceId"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup\":\"subjectIdentifier"));


      //########################################################
      // run again with --actAsSubjectSource=subjId

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=attributeDefNameSaveWs --name=aStem:newAttributeDefName --actAsSubjectIdentifier=GrouperSystem --actAsSubjectSource=g:isa --nameOfAttributeDef=aStem:newAttributeDef", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "T", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS_NO_CHANGES_NEEDED", matcher.group(2));
      assertEquals(outputLines[0], "aStem:newAttributeDefName", matcher.group(3));

      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("somethingelse"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("subjectSourceId")
          && GrouperClientWs.mostRecentRequest.contains("g:isa"));

    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testAttributeDefNameDelete() throws Exception {

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));
    String output = null;
    String[] outputLines = null;
    Pattern pattern = null;
    Matcher matcher = null;
    try {

      GrouperSession grouperSession = GrouperSession.startRootSession();

      AttributeDef attributeDef = new AttributeDefSave(grouperSession).assignName("aStem:newAttributeDef")
        .assignCreateParentStemsIfNotExist(true).save();

      AttributeDefName attributeDefName = new AttributeDefNameSave(grouperSession, attributeDef).assignName("aStem:newAttributeDefName")
        .assignCreateParentStemsIfNotExist(true).save();

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=attributeDefNameDeleteWs --attributeDefNameNames=aStem:newAttributeDefName,aStem:newAttributeDefName2", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(2, outputLines.length);

      pattern = Pattern.compile("^Index (\\d+): success: (T|F): code: ([A-Z_]+): (.*+)$");
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "T", matcher.group(2));
      assertEquals(outputLines[0], "SUCCESS", matcher.group(3));
      assertEquals(outputLines[0], "aStem:newAttributeDefName", matcher.group(4));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals(outputLines[1], "1", matcher.group(1));
      assertEquals(outputLines[1], "T", matcher.group(2));
      assertEquals(outputLines[1], "SUCCESS_ATTRIBUTE_DEF_NAME_NOT_FOUND", matcher.group(3));
      assertEquals(outputLines[1], "aStem:newAttributeDefName2", matcher.group(4));

      // ##########################
      // [--txType=NONE|READ_WRITE_NEW]
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=attributeDefNameDeleteWs --attributeDefNameNames=aStem:newAttributeDefName,aStem:newAttributeDefName2 --txType=READ_WRITE_NEW", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(2, outputLines.length);

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "T", matcher.group(2));
      assertEquals(outputLines[0], "SUCCESS_ATTRIBUTE_DEF_NAME_NOT_FOUND", matcher.group(3));
      assertEquals(outputLines[0], "aStem:newAttributeDefName", matcher.group(4));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals(outputLines[1], "1", matcher.group(1));
      assertEquals(outputLines[1], "T", matcher.group(2));
      assertEquals(outputLines[1], "SUCCESS_ATTRIBUTE_DEF_NAME_NOT_FOUND", matcher.group(3));
      assertEquals(outputLines[1], "aStem:newAttributeDefName2", matcher.group(4));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("txType") && GrouperClientWs.mostRecentRequest.contains("READ_WRITE_NEW"));


    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testFindAttributeDefNames() throws Exception {

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));
    String output = null;
    String[] outputLines = null;
    Pattern pattern = null;
    Matcher matcher = null;
    try {

      GrouperSession grouperSession = GrouperSession.startRootSession();

      AttributeDef attributeDef = new AttributeDefSave(grouperSession).assignName("aStem1:newAttributeDef")
        .assignCreateParentStemsIfNotExist(true).assignAttributeDefType(AttributeDefType.perm).assignToGroup(true).save();

      AttributeDefName attributeDefName = new AttributeDefNameSave(grouperSession, attributeDef).assignName("aStem1:newAttributeDefName1")
        .assignCreateParentStemsIfNotExist(true).save();

      AttributeDefName attributeDefName2 = new AttributeDefNameSave(grouperSession, attributeDef).assignName("aStem1:newAttributeDefName2")
        .assignCreateParentStemsIfNotExist(true).save();

      attributeDefName.getAttributeDefNameSetDelegate().addToAttributeDefNameSet(attributeDefName2);

      AttributeDefName attributeDefName3 = new AttributeDefNameSave(grouperSession, attributeDef).assignName("aStem1:sub:newAttributeDefName3")
      .assignCreateParentStemsIfNotExist(true).save();

      AttributeDefName attributeDefName4 = new AttributeDefNameSave(grouperSession, attributeDef).assignName("aStem2:newAttributeDefName4")
        .assignCreateParentStemsIfNotExist(true).save();

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=findAttributeDefNamesWs --scope=aStem", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");
      {
        String[] outputLines2 = new String[4];
        int i=0;
        for (String outputLine : outputLines) {
          if (!outputLine.contains("attestationLastEmailedDate") && !outputLine.contains("deprovisioningLastEmailedDate") &&
              !outputLine.contains("workflowInstanceLastEmailedDate") && !outputLine.contains("workflowInstanceLastEmailedState")) {
            outputLines2[i++] = outputLine;
          }
        }
        outputLines = outputLines2;
      }
      
      assertEquals(output, 4, outputLines.length);

      //Index ${index}: name: ${wsAttributeDefName.name}, displayName: ${wsAttributeDefName.displayName}$newline$
      pattern = Pattern.compile("^Index (\\d+): name: (.*), displayName: (.*)$");
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "aStem1:newAttributeDefName1", matcher.group(2));
      assertEquals(outputLines[0], "aStem1:newAttributeDefName1", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("scope"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("splitScope"));

      // ############################
      //[--splitScope=T|F]
      baos = new ByteArrayOutputStream();

      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=findAttributeDefNamesWs --scope=aStem --splitScope=T", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      {
        String[] outputLines2 = new String[4];
        int i=0;
        for (String outputLine : outputLines) {
          if (!outputLine.contains("attestationLastEmailedDate") && !outputLine.contains("deprovisioningLastEmailedDate") &&
              !outputLine.contains("workflowInstanceLastEmailedDate") && !outputLine.contains("workflowInstanceLastEmailedState")) {
            outputLines2[i++] = outputLine;
          }
        }
        outputLines = outputLines2;
      }

      assertEquals(4, outputLines.length);

      //Index ${index}: name: ${wsAttributeDefName.name}, displayName: ${wsAttributeDefName.displayName}$newline$
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "aStem1:newAttributeDefName1", matcher.group(2));
      assertEquals(outputLines[0], "aStem1:newAttributeDefName1", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("scope"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("splitScope"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));

      // ############################
      //[--attributeDefNameNames=a:b]
      baos = new ByteArrayOutputStream();

      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=findAttributeDefNamesWs --attributeDefNameNames=aStem1:newAttributeDefName1,aStem1:newAttributeDefName2", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(2, outputLines.length);

      //Index ${index}: name: ${wsAttributeDefName.name}, displayName: ${wsAttributeDefName.displayName}$newline$
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "aStem1:newAttributeDefName1", matcher.group(2));
      assertEquals(outputLines[0], "aStem1:newAttributeDefName1", matcher.group(3));

      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("scope"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("splitScope"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));

      // ############################
      //[--attributeDefNameUuids=12ab,34cd]
      baos = new ByteArrayOutputStream();

      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=findAttributeDefNamesWs --attributeDefNameUuids=" + attributeDefName.getId() + "," + attributeDefName2.getId(), " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(2, outputLines.length);

      //Index ${index}: name: ${wsAttributeDefName.name}, displayName: ${wsAttributeDefName.displayName}$newline$
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "aStem1:newAttributeDefName1", matcher.group(2));
      assertEquals(outputLines[0], "aStem1:newAttributeDefName1", matcher.group(3));

      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("scope"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("splitScope"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookup"));

      // ############################
      //[--attributeDefNameIdIndexes=12,34]
      baos = new ByteArrayOutputStream();

      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=findAttributeDefNamesWs --attributeDefNameIdIndexes=" + attributeDefName.getIdIndex() + "," + attributeDefName2.getIdIndex(), " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(2, outputLines.length);

      //Index ${index}: name: ${wsAttributeDefName.name}, displayName: ${wsAttributeDefName.displayName}$newline$
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "aStem1:newAttributeDefName1", matcher.group(2));
      assertEquals(outputLines[0], "aStem1:newAttributeDefName1", matcher.group(3));

      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("scope"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("splitScope"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookup"));

      // ############################
      //[--nameOfAttributeDef=a:b:c]
      baos = new ByteArrayOutputStream();

      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=findAttributeDefNamesWs --scope=% --nameOfAttributeDef=aStem1:newAttributeDef", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(4, outputLines.length);

      //Index ${index}: name: ${wsAttributeDefName.name}, displayName: ${wsAttributeDefName.displayName}$newline$
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "aStem1:newAttributeDefName1", matcher.group(2));
      assertEquals(outputLines[0], "aStem1:newAttributeDefName1", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("scope"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("splitScope"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookup"));

      // ############################
      //[--uuidOfAttributeDef=a:b:c]
      baos = new ByteArrayOutputStream();

      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=findAttributeDefNamesWs --scope=% --uuidOfAttributeDef=" + attributeDef.getId(), " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(4, outputLines.length);

      //Index ${index}: name: ${wsAttributeDefName.name}, displayName: ${wsAttributeDefName.displayName}$newline$
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "aStem1:newAttributeDefName1", matcher.group(2));
      assertEquals(outputLines[0], "aStem1:newAttributeDefName1", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("scope"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("splitScope"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookup"));

      // ############################
      //[--idIndexOfAttributeDef=123]
      baos = new ByteArrayOutputStream();

      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=findAttributeDefNamesWs --scope=% --idIndexOfAttributeDef=" + attributeDef.getIdIndex(), " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(4, outputLines.length);

      //Index ${index}: name: ${wsAttributeDefName.name}, displayName: ${wsAttributeDefName.displayName}$newline$
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "aStem1:newAttributeDefName1", matcher.group(2));
      assertEquals(outputLines[0], "aStem1:newAttributeDefName1", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("scope"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("splitScope"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookup"));

      // ############################
      //[--attributeAssignType=any_mem|any_mem_asgn|attr_def|attr_def_asgn|group|group_asgn|imm_mem|imm_mem_asgn|mem_asgn|member|stem|stem_asgn]
      baos = new ByteArrayOutputStream();

      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=findAttributeDefNamesWs --scope=aStem1 --attributeAssignType=stem", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(0, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));

      // ############################
      //[--attributeAssignType=any_mem|any_mem_asgn|attr_def|attr_def_asgn|group|group_asgn|imm_mem|imm_mem_asgn|mem_asgn|member|stem|stem_asgn]
      baos = new ByteArrayOutputStream();

      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=findAttributeDefNamesWs --scope=aStem1 --attributeAssignType=group", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(3, outputLines.length);

      //Index ${index}: name: ${wsAttributeDefName.name}, displayName: ${wsAttributeDefName.displayName}$newline$
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "aStem1:newAttributeDefName1", matcher.group(2));
      assertEquals(outputLines[0], "aStem1:newAttributeDefName1", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("scope"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));

      // ############################
      //[--attributeDefType=attr|domain|limit|perm|type]
      baos = new ByteArrayOutputStream();

      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=findAttributeDefNamesWs --scope=aStem1 --attributeDefType=attr", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(0, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("scope"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));

      // ############################
      //[--attributeDefType=attr|domain|limit|perm|type]
      baos = new ByteArrayOutputStream();

      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=findAttributeDefNamesWs --scope=aStem1 --attributeDefType=perm", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(3, outputLines.length);

      //Index ${index}: name: ${wsAttributeDefName.name}, displayName: ${wsAttributeDefName.displayName}$newline$
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "aStem1:newAttributeDefName1", matcher.group(2));
      assertEquals(outputLines[0], "aStem1:newAttributeDefName1", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("scope"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsInheritanceSetRelation"));

      // ############################
      //[--inheritanceSetRelation=IMPLIED_BY_THIS|IMPLIED_BY_THIS_IMMEDIATE|THAT_IMPLY_THIS|THAT_IMPLY_THIS_IMMEDIATE]
      baos = new ByteArrayOutputStream();

      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=findAttributeDefNamesWs --attributeDefNameNames=aStem1:newAttributeDefName1 --inheritanceSetRelation=IMPLIED_BY_THIS", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      //Index ${index}: name: ${wsAttributeDefName.name}, displayName: ${wsAttributeDefName.displayName}$newline$
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "aStem1:newAttributeDefName2", matcher.group(2));
      assertEquals(outputLines[0], "aStem1:newAttributeDefName2", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsInheritanceSetRelation"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("sortString"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("ascending"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("pageNumber"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("pageSize"));


      // ############################
      //[--sortString=name|displayName|extension|displayExtension] [--ascending=T|F] [--pageNumber=2] [--pageSize=50]
      baos = new ByteArrayOutputStream();

      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=findAttributeDefNamesWs --scope=aStem --sortString=extension --ascending=F --pageNumber=2 --pageSize=2", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(2, outputLines.length);

      //Index ${index}: name: ${wsAttributeDefName.name}, displayName: ${wsAttributeDefName.displayName}$newline$
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "aStem2:newAttributeDefName4", matcher.group(2));
      assertEquals(outputLines[0], "aStem2:newAttributeDefName4", matcher.group(3));

      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsInheritanceSetRelation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("sortString"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("ascending"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("pageNumber"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("pageSize"));


    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testAssignAttributeDefNameInheritanceWs() throws Exception {

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));
    String output = null;
    String[] outputLines = null;
    Pattern pattern = null;
    Matcher matcher = null;
    try {

      GrouperSession grouperSession = GrouperSession.startRootSession();

      AttributeDef attributeDef = new AttributeDefSave(grouperSession).assignName("aStem:newAttributeDef")
        .assignCreateParentStemsIfNotExist(true).assignAttributeDefType(AttributeDefType.perm).save();

      AttributeDefName attributeDefName = new AttributeDefNameSave(grouperSession, attributeDef).assignName("aStem:newAttributeDefName")
        .assignCreateParentStemsIfNotExist(true).save();

      AttributeDefName attributeDefName2 = new AttributeDefNameSave(grouperSession, attributeDef).assignName("aStem:newAttributeDefName2")
        .assignCreateParentStemsIfNotExist(true).save();

      AttributeDefName attributeDefName3 = new AttributeDefNameSave(grouperSession, attributeDef).assignName("aStem:newAttributeDefName3")
        .assignCreateParentStemsIfNotExist(true).save();

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributeDefNameInheritanceWs --attributeDefNameName=aStem:newAttributeDefName --relatedAttributeDefNameNames=aStem:newAttributeDefName2,aStem:newAttributeDefName3 --assign=T", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      //Success: ${resultMetadata.success}: code: ${resultMetadata.resultCode}, message: ${resultMetadata.resultMessage}$newline$
      pattern = Pattern.compile("^Success: (T|F): code: ([A-Z_]+), message: (.*+)$");
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "T", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS", matcher.group(2));
      //Had 2 successful adds, 0 adds which already existed
      assertTrue(outputLines[0], matcher.group(3).contains("Had 2 successful adds"));

      // ############################
      //[--replaceAllExisting=T|F]
      baos = new ByteArrayOutputStream();

      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributeDefNameInheritanceWs --attributeDefNameName=aStem:newAttributeDefName " +
          "--relatedAttributeDefNameNames=aStem:newAttributeDefName2,aStem:newAttributeDefName3 --assign=T --replaceAllExisting=T", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "T", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS", matcher.group(2));
      //Had 2 successful adds, 0 adds which already existed
      assertTrue(outputLines[0], matcher.group(3).contains("2 adds which already existed"));

      // ##########################
      // [--txType=NONE|READ_WRITE_NEW]

      baos = new ByteArrayOutputStream();

      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributeDefNameInheritanceWs --attributeDefNameName=aStem:newAttributeDefName " +
          "--relatedAttributeDefNameNames=aStem:newAttributeDefName2,aStem:newAttributeDefName3 --assign=F --txType=READ_WRITE_NEW", " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "T", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS", matcher.group(2));
      //Had 2 successful adds, 0 adds which already existed
      assertTrue(outputLines[0], matcher.group(3).contains("2 successful removes"));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("txType") && GrouperClientWs.mostRecentRequest.contains("READ_WRITE_NEW"));



    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testGetAttributeAssignsGroupExtraFeatures() throws Exception {

    AttributeDefName attributeDefName = AttributeDefNameTest.exampleAttributeDefNameDb("test", "testAttributeAssignDefName");
    AttributeDefName attributeDefName2 = AttributeDefNameTest.exampleAttributeDefNameDb("test", "testAttributeAssignAssignName");

    final AttributeDef attributeDef = attributeDefName.getAttributeDef();

    attributeDef.setValueType(AttributeDefValueType.string);
    attributeDef.store();

    final AttributeDef attributeDef2 = attributeDefName2.getAttributeDef();

    attributeDef2.setAssignToGroup(false);
    attributeDef2.setAssignToGroupAssn(true);
    attributeDef2.setValueType(AttributeDefValueType.integer);
    attributeDef2.store();

    Group group = new GroupSave(GrouperSession.staticGrouperSession()).assignSaveMode(SaveMode.INSERT_OR_UPDATE)
      .assignGroupNameToEdit("test:groupTestAttrAssign").assignName("test:groupTestAttrAssign").assignCreateParentStemsIfNotExist(true)
      .assignDescription("description").save();

    //test subject 0 can view and read
    group.grantPriv(SubjectTestHelper.SUBJ0, AccessPrivilege.VIEW);
    attributeDef.getPrivilegeDelegate().grantPriv(SubjectTestHelper.SUBJ0, AttributeDefPrivilege.ATTR_READ, false);

    //test subject 0 can read the assignment on assignment
    attributeDef2.getPrivilegeDelegate().grantPriv(SubjectTestHelper.SUBJ0, AttributeDefPrivilege.ATTR_READ, false);

    AttributeAssignResult attributeAssignResult = group.getAttributeDelegate().assignAttribute(attributeDefName);
    AttributeAssign attributeAssign = attributeAssignResult.getAttributeAssign();
    attributeAssign.getValueDelegate().assignValue("abc");

    AttributeAssignResult attributeAssignResult2 = attributeAssign.getAttributeDelegate().assignAttribute(attributeDefName2);
    AttributeAssign attributeAssign2 = attributeAssignResult2.getAttributeAssign();
    attributeAssign2.getValueDelegate().assignValue("123");

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group " +
          "--attributeDefNames=test:testAttributeAssignDefNameDef " +
          "--attributeDefValueType=string --value=abc",
          " "));
      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group, owner: test:groupTestAttrAssign, attributeDefNameName test:testAttributeAssignDefName, action: assign, values: 15,5,5, enable: T, id: a9c83eeb78c04ae5befcea36272d318c
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      Pattern pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));
      String outputLine = outputLines[0];

      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "abc", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("\"name\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("abc"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));

      // ######################################################
      // Try wrong value

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group --attributeDefUuids=" + attributeDef.getId() +
          " --attributeDefNames=test:testAttributeAssignDefNameDef " +
          "--attributeDefValueType=string --value=123",
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(0, GrouperUtil.length(outputLines));
//      outputLine = outputLines[0];
//
//      matcher = pattern.matcher(outputLines[0]);

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("\"name\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try wrong id

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {
        GrouperClient.main(GrouperClientUtils.splitTrim(
            " --operation=getAttributeAssignmentsWs --attributeAssignType=group --attributeDefUuids=123" + attributeDef.getId() +
            " --attributeDefNames=test:testAttributeAssignDefNameDef " +
            "--attributeDefValueType=string --value=123",
            " "));
        fail("Shouldnt get here");
      } catch (GcWebServiceError gwse) {
        //ignore
      }

      // ######################################################
      // Try correct attributeDefType

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group --attributeDefUuids=" + attributeDef.getId() +
          " --attributeDefValueType=string --value=abc --attributeDefType=attr",
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group, owner: test:groupTestAttrAssign, attributeDefNameName test:testAttributeAssignDefName, action: assign, values: 15,5,5, enable: T, id: a9c83eeb78c04ae5befcea36272d318c
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));
      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "abc", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("abc"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));

      // ######################################################
      // Try wrong attributeDefType

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group --attributeDefUuids=" + attributeDef.getId() +
          " --attributeDefValueType=string --value=abc --attributeDefType=limit",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group, owner: test:groupTestAttrAssign, attributeDefNameName test:testAttributeAssignDefName, action: assign, values: 15,5,5, enable: T, id: a9c83eeb78c04ae5befcea36272d318c
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(0, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("abc"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("limit"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));

      // ######################################################
      // Try group assignment on assignment by attributeDef

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group_asgn --attributeDefUuids=" + attributeDef2.getId(),
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));
      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"abc\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));

      // ######################################################
      // Try group assignment on assignment by attributeDef with wrong id

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=group_asgn --attributeDefUuids=1" + attributeDef2.getId(),
            " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(0, GrouperUtil.length(outputLines));
        fail("Why did it not fail?");
      } catch (Exception e) {
        //good
      }
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("abc"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by attributeDef and value

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group_asgn --attributeDefUuids=" + attributeDef2.getId()
          + " --attributeDefValueType=integer --value=123 ",
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));
      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by attributeDef and wrong value

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group_asgn --attributeDefUuids=" + attributeDef2.getId()
          + " --attributeDefValueType=integer --value=1234 ",
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(0, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("1234"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by attributeDef and value

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group_asgn --attributeDefUuids=" + attributeDef2.getId()
          + " --includeAssignmentsFromAssignments=T ",
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(2, GrouperUtil.length(outputLines));
      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group", matcher.group(2));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "abc", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      outputLine = outputLines[1];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "1", matcher.group(1));
      assertEquals(outputLine, "group_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by owner attribute assign id with wrong id

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=group_asgn --assignAssignOwnerAttributeAssignUuids=1" + attributeAssign.getId()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(0, GrouperUtil.length(outputLines));
        fail("Shouldnt get here");
      } catch (Exception e) {
        //good
      } finally {
        System.setOut(systemOut);

      }

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));

      // ######################################################
      // Try group assignment on assignment by owner attribute assign id

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group_asgn --assignAssignOwnerAttributeAssignUuids=" + attributeAssign.getId()
          ,
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group_asgn --assignAssignOwnerNamesOfAttributeDefs=" + attributeDef.getName()
          ,
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));



      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefLookups with wrong name

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=group_asgn --assignAssignOwnerNamesOfAttributeDefs=1" + attributeDef.getName()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(0, GrouperUtil.length(outputLines));

        fail("shouldnt get here");
      } catch (Exception e) {
        //good
      } finally {
        System.setOut(systemOut);
      }

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group_asgn --assignAssignOwnerUuidsOfAttributeDefs=" + attributeDef.getId()
          ,
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group_asgn --assignAssignOwnerUuidsOfAttributeDefs=" + attributeDef.getId()
          ,
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));



      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=group_asgn --assignAssignOwnerUuidsOfAttributeDefs=1" + attributeDef.getId()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(0, GrouperUtil.length(outputLines));
        fail("Shouldnt get here");
      } catch (Exception e) {
        //good
      } finally {

        System.setOut(systemOut);

      }

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group_asgn --assignAssignOwnerNamesOfAttributeDefNames=" + attributeDefName.getName()
          ,
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));



      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=group_asgn --assignAssignOwnerNamesOfAttributeDefNames=1" + attributeDefName.getName()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(0, GrouperUtil.length(outputLines));
        fail("Shouldnt get here");

      } catch (Exception e) {
        //ok
      } finally {

        System.setOut(systemOut);

      }

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group_asgn --assignAssignOwnerUuidsOfAttributeDefNames=" + attributeDefName.getId()
          ,
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));



      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups wrong name

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=group_asgn --assignAssignOwnerUuidsOfAttributeDefNames=1" + attributeDefName.getId()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(1, GrouperUtil.length(outputLines));
        fail("Shouldnt get here");
      } catch (Exception e) {
        //good
      } finally {

        System.setOut(systemOut);

      }

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group_asgn --assignAssignOwnerUuidsOfAttributeDefNames=" + attributeDefName.getId()
          + " --assignAssignOwnerActions=assign",
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups wrong action

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group_asgn --assignAssignOwnerUuidsOfAttributeDefNames=" + attributeDefName.getId()
          + " --assignAssignOwnerActions=assign2",
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(0, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerActions"));



      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=group_asgn --ownerGroupNames=" + group.getName()
          ,
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "group_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerActions"));


    } finally {
      System.setOut(systemOut);
    }

  }

  /**
     * @throws Exception
     */
    public void testGetAttributeAssignsStemExtraFeatures() throws Exception {

      AttributeDefName attributeDefName = AttributeDefNameTest.exampleAttributeDefNameDb("test", "testAttributeAssignDefName");
      AttributeDefName attributeDefName2 = AttributeDefNameTest.exampleAttributeDefNameDb("test", "testAttributeAssignAssignName");

      final AttributeDef attributeDef = attributeDefName.getAttributeDef();

      attributeDef.setValueType(AttributeDefValueType.string);
      attributeDef.setAssignToStem(true);
      attributeDef.store();

      final AttributeDef attributeDef2 = attributeDefName2.getAttributeDef();

      attributeDef2.setAssignToGroup(false);
      attributeDef2.setAssignToStemAssn(true);
      attributeDef2.setValueType(AttributeDefValueType.integer);
      attributeDef2.store();

      Stem stem = new StemSave(GrouperSession.staticGrouperSession()).assignSaveMode(SaveMode.INSERT_OR_UPDATE)
        .assignName("test:stemTestAttrAssign").assignCreateParentStemsIfNotExist(true)
        .assignDescription("description").save();

      AttributeAssignResult attributeAssignResult = stem.getAttributeDelegate().assignAttribute(attributeDefName);
      AttributeAssign attributeAssign = attributeAssignResult.getAttributeAssign();
      attributeAssign.getValueDelegate().assignValue("abc");

      AttributeAssignResult attributeAssignResult2 = attributeAssign.getAttributeDelegate().assignAttribute(attributeDefName2);
      AttributeAssign attributeAssign2 = attributeAssignResult2.getAttributeAssign();
      attributeAssign2.getValueDelegate().assignValue("123");

      PrintStream systemOut = System.out;

      ByteArrayOutputStream baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=stem " +
            "--attributeDefNames=test:testAttributeAssignDefNameDef " +
            "--attributeDefValueType=string --value=abc",
            " "));
        System.out.flush();
        String output = new String(baos.toByteArray());

        System.setOut(systemOut);

        String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: group, owner: test:stemTestAttrAssign, attributeDefNameName test:testAttributeAssignDefName, action: assign, values: 15,5,5, enable: T, id: a9c83eeb78c04ae5befcea36272d318c
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        Pattern pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(1, GrouperUtil.length(outputLines));
        String outputLine = outputLines[0];

        Matcher matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "stem", matcher.group(2));
        assertEquals(outputLine, "test:stemTestAttrAssign", matcher.group(3));
        assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
        assertEquals(outputLine, "assign", matcher.group(5));
        assertEquals(outputLine, "abc", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("\"name\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("abc"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));

        // ######################################################
        // Try wrong value

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=stem --attributeDefUuids=" + attributeDef.getId() +
            " --attributeDefNames=test:testAttributeAssignDefNameDef " +
            "--attributeDefValueType=string --value=123",
            " "));


        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        assertEquals(0, GrouperUtil.length(outputLines));
  //      outputLine = outputLines[0];
  //
  //      matcher = pattern.matcher(outputLines[0]);

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("\"name\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


        // ######################################################
        // Try wrong id

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        try {
          GrouperClient.main(GrouperClientUtils.splitTrim(
              " --operation=getAttributeAssignmentsWs --attributeAssignType=stem --attributeDefUuids=123" + attributeDef.getId() +
              " --attributeDefNames=test:testAttributeAssignDefNameDef " +
              "--attributeDefValueType=string --value=123",
              " "));
          fail("Shouldnt get here");
        } catch (GcWebServiceError gwse) {
          //ignore
        }

        // ######################################################
        // Try correct attributeDefType

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=stem --attributeDefUuids=" + attributeDef.getId() +
            " --attributeDefValueType=string --value=abc --attributeDefType=attr",
            " "));


        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: group, owner: test:stemTestAttrAssign, attributeDefNameName test:testAttributeAssignDefName, action: assign, values: 15,5,5, enable: T, id: a9c83eeb78c04ae5befcea36272d318c
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(1, GrouperUtil.length(outputLines));
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "stem", matcher.group(2));
        assertEquals(outputLine, "test:stemTestAttrAssign", matcher.group(3));
        assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
        assertEquals(outputLine, "assign", matcher.group(5));
        assertEquals(outputLine, "abc", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("abc"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));

        // ######################################################
        // Try wrong attributeDefType

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=stem --attributeDefUuids=" + attributeDef.getId() +
            " --attributeDefValueType=string --value=abc --attributeDefType=limit",
            " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: group, owner: test:stemTestAttrAssign, attributeDefNameName test:testAttributeAssignDefName, action: assign, values: 15,5,5, enable: T, id: a9c83eeb78c04ae5befcea36272d318c
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(0, GrouperUtil.length(outputLines));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("abc"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("limit"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));

        // ######################################################
        // Try group assignment on assignment by attributeDef

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=stem_asgn --attributeDefUuids=" + attributeDef2.getId(),
            " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(1, GrouperUtil.length(outputLines));
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "stem_asgn", matcher.group(2));
        assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
        assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
        assertEquals(outputLine, "assign", matcher.group(5));
        assertEquals(outputLine, "123", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"abc\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));

        // ######################################################
        // Try group assignment on assignment by attributeDef with wrong id

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        try {
          GrouperClient.main(GrouperClientUtils.splitTrim(
              "--operation=getAttributeAssignmentsWs --attributeAssignType=stem_asgn --attributeDefUuids=1" + attributeDef2.getId(),
              " "));

          System.out.flush();
          output = new String(baos.toByteArray());

          System.setOut(systemOut);

          outputLines = GrouperClientUtils.splitTrim(output, "\n");

          // match: Index: 0: attributeAssignType: stem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
          // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
          pattern = Pattern
              .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

          assertEquals(0, GrouperUtil.length(outputLines));
          fail("Why did it not fail?");
        } catch (Exception e) {
          //good
        }
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("abc"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


        // ######################################################
        // Try group assignment on assignment by attributeDef and value

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=stem_asgn --attributeDefUuids=" + attributeDef2.getId()
            + " --attributeDefValueType=integer --value=123 ",
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: stem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(1, GrouperUtil.length(outputLines));
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "stem_asgn", matcher.group(2));
        assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
        assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
        assertEquals(outputLine, "assign", matcher.group(5));
        assertEquals(outputLine, "123", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


        // ######################################################
        // Try group assignment on assignment by attributeDef and wrong value

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=stem_asgn --attributeDefUuids=" + attributeDef2.getId()
            + " --attributeDefValueType=integer --value=1234 ",
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: stem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(0, GrouperUtil.length(outputLines));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("1234"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


        // ######################################################
        // Try group assignment on assignment by attributeDef and value

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=stem_asgn --attributeDefUuids=" + attributeDef2.getId()
            + " --includeAssignmentsFromAssignments=T ",
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: stem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(2, GrouperUtil.length(outputLines));
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLine);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "stem", matcher.group(2));
        assertEquals(outputLine, "test:stemTestAttrAssign", matcher.group(3));
        assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
        assertEquals(outputLine, "assign", matcher.group(5));
        assertEquals(outputLine, "abc", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

        outputLine = outputLines[1];

        matcher = pattern.matcher(outputLine);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "1", matcher.group(1));
        assertEquals(outputLine, "stem_asgn", matcher.group(2));
        assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
        assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
        assertEquals(outputLine, "assign", matcher.group(5));
        assertEquals(outputLine, "123", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


        // ######################################################
        // Try group assignment on assignment by owner attribute assign id with wrong id

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        try {
          GrouperClient.main(GrouperClientUtils.splitTrim(
              "--operation=getAttributeAssignmentsWs --attributeAssignType=stem_asgn --assignAssignOwnerAttributeAssignUuids=1" + attributeAssign.getId()
              ,
            " "));

          System.out.flush();
          output = new String(baos.toByteArray());

          System.setOut(systemOut);

          outputLines = GrouperClientUtils.splitTrim(output, "\n");

          // match: Index: 0: attributeAssignType: stem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
          // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
          pattern = Pattern
              .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

          assertEquals(0, GrouperUtil.length(outputLines));
          fail("Shouldnt get here");
        } catch (Exception e) {
          //good
        } finally {
          System.setOut(systemOut);

        }

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));

        // ######################################################
        // Try group assignment on assignment by owner attribute assign id

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=stem_asgn --assignAssignOwnerAttributeAssignUuids=" + attributeAssign.getId()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: stem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(1, GrouperUtil.length(outputLines));

        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLine);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "stem_asgn", matcher.group(2));
        assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
        assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
        assertEquals(outputLine, "assign", matcher.group(5));
        assertEquals(outputLine, "123", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


        // ######################################################
        // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefLookups

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=stem_asgn --assignAssignOwnerNamesOfAttributeDefs=" + attributeDef.getName()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: stem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(1, GrouperUtil.length(outputLines));

        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLine);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "stem_asgn", matcher.group(2));
        assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
        assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
        assertEquals(outputLine, "assign", matcher.group(5));
        assertEquals(outputLine, "123", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));



        // ######################################################
        // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefLookups with wrong name

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        try {
          GrouperClient.main(GrouperClientUtils.splitTrim(
              "--operation=getAttributeAssignmentsWs --attributeAssignType=stem_asgn --assignAssignOwnerNamesOfAttributeDefs=1" + attributeDef.getName()
              ,
            " "));

          System.out.flush();
          output = new String(baos.toByteArray());

          System.setOut(systemOut);

          outputLines = GrouperClientUtils.splitTrim(output, "\n");

          // match: Index: 0: attributeAssignType: stem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
          // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
          pattern = Pattern
              .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

          assertEquals(0, GrouperUtil.length(outputLines));

          fail("shouldnt get here");
        } catch (Exception e) {
          //good
        } finally {
          System.setOut(systemOut);
        }

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


        // ######################################################
        // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefLookups

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=stem_asgn --assignAssignOwnerUuidsOfAttributeDefs=" + attributeDef.getId()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: stem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(1, GrouperUtil.length(outputLines));

        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLine);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "stem_asgn", matcher.group(2));
        assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
        assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
        assertEquals(outputLine, "assign", matcher.group(5));
        assertEquals(outputLine, "123", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


        // ######################################################
        // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefLookups

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=stem_asgn --assignAssignOwnerUuidsOfAttributeDefs=" + attributeDef.getId()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: stem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(1, GrouperUtil.length(outputLines));

        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLine);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "stem_asgn", matcher.group(2));
        assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
        assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
        assertEquals(outputLine, "assign", matcher.group(5));
        assertEquals(outputLine, "123", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));



        // ######################################################
        // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefLookups

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        try {
          GrouperClient.main(GrouperClientUtils.splitTrim(
              "--operation=getAttributeAssignmentsWs --attributeAssignType=stem_asgn --assignAssignOwnerUuidsOfAttributeDefs=1" + attributeDef.getId()
              ,
            " "));

          System.out.flush();
          output = new String(baos.toByteArray());

          System.setOut(systemOut);

          outputLines = GrouperClientUtils.splitTrim(output, "\n");

          // match: Index: 0: attributeAssignType: stem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
          // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
          pattern = Pattern
              .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

          assertEquals(0, GrouperUtil.length(outputLines));
          fail("Shouldnt get here");
        } catch (Exception e) {
          //good
        } finally {

          System.setOut(systemOut);

        }

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


        // ######################################################
        // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=stem_asgn --assignAssignOwnerNamesOfAttributeDefNames=" + attributeDefName.getName()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: stem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(1, GrouperUtil.length(outputLines));

        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLine);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "stem_asgn", matcher.group(2));
        assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
        assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
        assertEquals(outputLine, "assign", matcher.group(5));
        assertEquals(outputLine, "123", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));



        // ######################################################
        // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        try {
          GrouperClient.main(GrouperClientUtils.splitTrim(
              "--operation=getAttributeAssignmentsWs --attributeAssignType=stem_asgn --assignAssignOwnerNamesOfAttributeDefNames=1" + attributeDefName.getName()
              ,
            " "));

          System.out.flush();
          output = new String(baos.toByteArray());

          System.setOut(systemOut);

          outputLines = GrouperClientUtils.splitTrim(output, "\n");

          // match: Index: 0: attributeAssignType: stem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
          // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
          pattern = Pattern
              .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

          assertEquals(0, GrouperUtil.length(outputLines));
          fail("Shouldnt get here");

        } catch (Exception e) {
          //ok
        } finally {

          System.setOut(systemOut);

        }

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


        // ######################################################
        // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=stem_asgn --assignAssignOwnerUuidsOfAttributeDefNames=" + attributeDefName.getId()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: stem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(1, GrouperUtil.length(outputLines));

        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLine);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "stem_asgn", matcher.group(2));
        assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
        assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
        assertEquals(outputLine, "assign", matcher.group(5));
        assertEquals(outputLine, "123", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));



        // ######################################################
        // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups wrong name

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        try {
          GrouperClient.main(GrouperClientUtils.splitTrim(
              "--operation=getAttributeAssignmentsWs --attributeAssignType=stem_asgn --assignAssignOwnerUuidsOfAttributeDefNames=1" + attributeDefName.getId()
              ,
            " "));

          System.out.flush();
          output = new String(baos.toByteArray());

          System.setOut(systemOut);

          outputLines = GrouperClientUtils.splitTrim(output, "\n");

          // match: Index: 0: attributeAssignType: stem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
          // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
          pattern = Pattern
              .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

          assertEquals(1, GrouperUtil.length(outputLines));
          fail("Shouldnt get here");
        } catch (Exception e) {
          //good
        } finally {

          System.setOut(systemOut);

        }

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


        // ######################################################
        // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=stem_asgn --assignAssignOwnerUuidsOfAttributeDefNames=" + attributeDefName.getId()
            + " --assignAssignOwnerActions=assign",
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: stem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(1, GrouperUtil.length(outputLines));

        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLine);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "stem_asgn", matcher.group(2));
        assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
        assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
        assertEquals(outputLine, "assign", matcher.group(5));
        assertEquals(outputLine, "123", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerActions"));


        // ######################################################
        // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups wrong action

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=stem_asgn --assignAssignOwnerUuidsOfAttributeDefNames=" + attributeDefName.getId()
            + " --assignAssignOwnerActions=assign2",
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: stem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(0, GrouperUtil.length(outputLines));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerActions"));



        // ######################################################
        // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=stem_asgn --ownerStemNames=" + stem.getName()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: stem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(1, GrouperUtil.length(outputLines));

        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLine);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "stem_asgn", matcher.group(2));
        assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
        assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
        assertEquals(outputLine, "assign", matcher.group(5));
        assertEquals(outputLine, "123", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerActions"));


      } finally {
        System.setOut(systemOut);
      }

    }

  /**
     * @throws Exception
     */
    public void testGetAttributeAssignsMemberExtraFeatures() throws Exception {

      AttributeDefName attributeDefName = AttributeDefNameTest.exampleAttributeDefNameDb("test", "testAttributeAssignDefName");
      AttributeDefName attributeDefName2 = AttributeDefNameTest.exampleAttributeDefNameDb("test", "testAttributeAssignAssignName");

      final AttributeDef attributeDef = attributeDefName.getAttributeDef();

      attributeDef.setValueType(AttributeDefValueType.string);
      attributeDef.setAssignToMember(true);
      attributeDef.store();

      final AttributeDef attributeDef2 = attributeDefName2.getAttributeDef();

      attributeDef2.setAssignToGroup(false);
      attributeDef2.setAssignToMemberAssn(true);
      attributeDef2.setValueType(AttributeDefValueType.integer);
      attributeDef2.store();

      Member member = MemberFinder.findBySubject(GrouperSession.staticGrouperSession(), SubjectTestHelper.SUBJ0, true);

      AttributeAssignResult attributeAssignResult = member.getAttributeDelegate().assignAttribute(attributeDefName);
      AttributeAssign attributeAssign = attributeAssignResult.getAttributeAssign();
      attributeAssign.getValueDelegate().assignValue("abc");

      AttributeAssignResult attributeAssignResult2 = attributeAssign.getAttributeDelegate().assignAttribute(attributeDefName2);
      AttributeAssign attributeAssign2 = attributeAssignResult2.getAttributeAssign();
      attributeAssign2.getValueDelegate().assignValue("123");

      PrintStream systemOut = System.out;

      ByteArrayOutputStream baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=member " +
            "--attributeDefNames=test:testAttributeAssignDefNameDef " +
            "--attributeDefValueType=string --value=abc",
            " "));
        System.out.flush();
        String output = new String(baos.toByteArray());

        System.setOut(systemOut);

        String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: group, owner: jdbc - test.subject.0, attributeDefNameName test:testAttributeAssignDefName, action: assign, values: 15,5,5, enable: T, id: a9c83eeb78c04ae5befcea36272d318c
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        Pattern pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(1, GrouperUtil.length(outputLines));
        String outputLine = outputLines[0];

        Matcher matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "member", matcher.group(2));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(3));
        assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
        assertEquals(outputLine, "assign", matcher.group(5));
        assertEquals(outputLine, "abc", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("\"name\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("abc"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));

        // ######################################################
        // Try wrong value

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=member --attributeDefUuids=" + attributeDef.getId() +
            " --attributeDefNames=test:testAttributeAssignDefNameDef " +
            "--attributeDefValueType=string --value=123",
            " "));


        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        assertEquals(0, GrouperUtil.length(outputLines));
  //      outputLine = outputLines[0];
  //
  //      matcher = pattern.matcher(outputLines[0]);

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("\"name\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


        // ######################################################
        // Try wrong id

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        try {
          GrouperClient.main(GrouperClientUtils.splitTrim(
              " --operation=getAttributeAssignmentsWs --attributeAssignType=member --attributeDefUuids=123" + attributeDef.getId() +
              " --attributeDefNames=test:testAttributeAssignDefNameDef " +
              "--attributeDefValueType=string --value=123",
              " "));
          fail("Shouldnt get here");
        } catch (GcWebServiceError gwse) {
          //ignore
        }

        // ######################################################
        // Try correct attributeDefType

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=member --attributeDefUuids=" + attributeDef.getId() +
            " --attributeDefValueType=string --value=abc --attributeDefType=attr",
            " "));


        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: group, owner: jdbc - test.subject.0, attributeDefNameName test:testAttributeAssignDefName, action: assign, values: 15,5,5, enable: T, id: a9c83eeb78c04ae5befcea36272d318c
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(1, GrouperUtil.length(outputLines));
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "member", matcher.group(2));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(3));
        assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
        assertEquals(outputLine, "assign", matcher.group(5));
        assertEquals(outputLine, "abc", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("abc"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));

        // ######################################################
        // Try wrong attributeDefType

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=member --attributeDefUuids=" + attributeDef.getId() +
            " --attributeDefValueType=string --value=abc --attributeDefType=limit",
            " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: group, owner: jdbc - test.subject.0, attributeDefNameName test:testAttributeAssignDefName, action: assign, values: 15,5,5, enable: T, id: a9c83eeb78c04ae5befcea36272d318c
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(0, GrouperUtil.length(outputLines));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("abc"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("limit"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));

        // ######################################################
        // Try group assignment on assignment by attributeDef

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=mem_asgn --attributeDefUuids=" + attributeDef2.getId(),
            " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(1, GrouperUtil.length(outputLines));
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "mem_asgn", matcher.group(2));
        assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
        assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
        assertEquals(outputLine, "assign", matcher.group(5));
        assertEquals(outputLine, "123", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"abc\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));

        // ######################################################
        // Try group assignment on assignment by attributeDef with wrong id

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        try {
          GrouperClient.main(GrouperClientUtils.splitTrim(
              "--operation=getAttributeAssignmentsWs --attributeAssignType=mem_asgn --attributeDefUuids=1" + attributeDef2.getId(),
              " "));

          System.out.flush();
          output = new String(baos.toByteArray());

          System.setOut(systemOut);

          outputLines = GrouperClientUtils.splitTrim(output, "\n");

          // match: Index: 0: attributeAssignType: mem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
          // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
          pattern = Pattern
              .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

          assertEquals(0, GrouperUtil.length(outputLines));
          fail("Why did it not fail?");
        } catch (Exception e) {
          //good
        }
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("abc"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


        // ######################################################
        // Try group assignment on assignment by attributeDef and value

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=mem_asgn --attributeDefUuids=" + attributeDef2.getId()
            + " --attributeDefValueType=integer --value=123 ",
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: mem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(1, GrouperUtil.length(outputLines));
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "mem_asgn", matcher.group(2));
        assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
        assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
        assertEquals(outputLine, "assign", matcher.group(5));
        assertEquals(outputLine, "123", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


        // ######################################################
        // Try group assignment on assignment by attributeDef and wrong value

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=mem_asgn --attributeDefUuids=" + attributeDef2.getId()
            + " --attributeDefValueType=integer --value=1234 ",
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: mem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(0, GrouperUtil.length(outputLines));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("1234"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


        // ######################################################
        // Try group assignment on assignment by attributeDef and value

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=mem_asgn --attributeDefUuids=" + attributeDef2.getId()
            + " --includeAssignmentsFromAssignments=T ",
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: mem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(2, GrouperUtil.length(outputLines));
        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLine);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "mem_asgn", matcher.group(2));
        assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
        assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
        assertEquals(outputLine, "assign", matcher.group(5));
        assertEquals(outputLine, "123", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

        outputLine = outputLines[1];

        matcher = pattern.matcher(outputLine);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "1", matcher.group(1));
        assertEquals(outputLine, "member", matcher.group(2));
        assertEquals(outputLine, "jdbc - test.subject.0", matcher.group(3));
        assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
        assertEquals(outputLine, "assign", matcher.group(5));
        assertEquals(outputLine, "abc", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


        // ######################################################
        // Try group assignment on assignment by owner attribute assign id with wrong id

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        try {
          GrouperClient.main(GrouperClientUtils.splitTrim(
              "--operation=getAttributeAssignmentsWs --attributeAssignType=mem_asgn --assignAssignOwnerAttributeAssignUuids=1" + attributeAssign.getId()
              ,
            " "));

          System.out.flush();
          output = new String(baos.toByteArray());

          System.setOut(systemOut);

          outputLines = GrouperClientUtils.splitTrim(output, "\n");

          // match: Index: 0: attributeAssignType: mem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
          // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
          pattern = Pattern
              .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

          assertEquals(0, GrouperUtil.length(outputLines));
          fail("Shouldnt get here");
        } catch (Exception e) {
          //good
        } finally {
          System.setOut(systemOut);

        }

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));

        // ######################################################
        // Try group assignment on assignment by owner attribute assign id

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=mem_asgn --assignAssignOwnerAttributeAssignUuids=" + attributeAssign.getId()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: mem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(1, GrouperUtil.length(outputLines));

        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLine);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "mem_asgn", matcher.group(2));
        assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
        assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
        assertEquals(outputLine, "assign", matcher.group(5));
        assertEquals(outputLine, "123", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


        // ######################################################
        // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefLookups

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=mem_asgn --assignAssignOwnerNamesOfAttributeDefs=" + attributeDef.getName()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: mem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(1, GrouperUtil.length(outputLines));

        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLine);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "mem_asgn", matcher.group(2));
        assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
        assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
        assertEquals(outputLine, "assign", matcher.group(5));
        assertEquals(outputLine, "123", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));



        // ######################################################
        // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefLookups with wrong name

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        try {
          GrouperClient.main(GrouperClientUtils.splitTrim(
              "--operation=getAttributeAssignmentsWs --attributeAssignType=mem_asgn --assignAssignOwnerNamesOfAttributeDefs=1" + attributeDef.getName()
              ,
            " "));

          System.out.flush();
          output = new String(baos.toByteArray());

          System.setOut(systemOut);

          outputLines = GrouperClientUtils.splitTrim(output, "\n");

          // match: Index: 0: attributeAssignType: mem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
          // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
          pattern = Pattern
              .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

          assertEquals(0, GrouperUtil.length(outputLines));

          fail("shouldnt get here");
        } catch (Exception e) {
          //good
        } finally {
          System.setOut(systemOut);
        }

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


        // ######################################################
        // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefLookups

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=mem_asgn --assignAssignOwnerUuidsOfAttributeDefs=" + attributeDef.getId()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: mem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(1, GrouperUtil.length(outputLines));

        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLine);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "mem_asgn", matcher.group(2));
        assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
        assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
        assertEquals(outputLine, "assign", matcher.group(5));
        assertEquals(outputLine, "123", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


        // ######################################################
        // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefLookups

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=mem_asgn --assignAssignOwnerUuidsOfAttributeDefs=" + attributeDef.getId()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: mem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(1, GrouperUtil.length(outputLines));

        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLine);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "mem_asgn", matcher.group(2));
        assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
        assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
        assertEquals(outputLine, "assign", matcher.group(5));
        assertEquals(outputLine, "123", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));



        // ######################################################
        // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefLookups

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        try {
          GrouperClient.main(GrouperClientUtils.splitTrim(
              "--operation=getAttributeAssignmentsWs --attributeAssignType=mem_asgn --assignAssignOwnerUuidsOfAttributeDefs=1" + attributeDef.getId()
              ,
            " "));

          System.out.flush();
          output = new String(baos.toByteArray());

          System.setOut(systemOut);

          outputLines = GrouperClientUtils.splitTrim(output, "\n");

          // match: Index: 0: attributeAssignType: mem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
          // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
          pattern = Pattern
              .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

          assertEquals(0, GrouperUtil.length(outputLines));
          fail("Shouldnt get here");
        } catch (Exception e) {
          //good
        } finally {

          System.setOut(systemOut);

        }

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


        // ######################################################
        // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=mem_asgn --assignAssignOwnerNamesOfAttributeDefNames=" + attributeDefName.getName()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: mem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(1, GrouperUtil.length(outputLines));

        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLine);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "mem_asgn", matcher.group(2));
        assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
        assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
        assertEquals(outputLine, "assign", matcher.group(5));
        assertEquals(outputLine, "123", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));



        // ######################################################
        // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        try {
          GrouperClient.main(GrouperClientUtils.splitTrim(
              "--operation=getAttributeAssignmentsWs --attributeAssignType=mem_asgn --assignAssignOwnerNamesOfAttributeDefNames=1" + attributeDefName.getName()
              ,
            " "));

          System.out.flush();
          output = new String(baos.toByteArray());

          System.setOut(systemOut);

          outputLines = GrouperClientUtils.splitTrim(output, "\n");

          // match: Index: 0: attributeAssignType: mem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
          // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
          pattern = Pattern
              .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

          assertEquals(0, GrouperUtil.length(outputLines));
          fail("Shouldnt get here");

        } catch (Exception e) {
          //ok
        } finally {

          System.setOut(systemOut);

        }

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


        // ######################################################
        // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=mem_asgn --assignAssignOwnerUuidsOfAttributeDefNames=" + attributeDefName.getId()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: mem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(1, GrouperUtil.length(outputLines));

        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLine);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "mem_asgn", matcher.group(2));
        assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
        assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
        assertEquals(outputLine, "assign", matcher.group(5));
        assertEquals(outputLine, "123", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));



        // ######################################################
        // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups wrong name

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        try {
          GrouperClient.main(GrouperClientUtils.splitTrim(
              "--operation=getAttributeAssignmentsWs --attributeAssignType=mem_asgn --assignAssignOwnerUuidsOfAttributeDefNames=1" + attributeDefName.getId()
              ,
            " "));

          System.out.flush();
          output = new String(baos.toByteArray());

          System.setOut(systemOut);

          outputLines = GrouperClientUtils.splitTrim(output, "\n");

          // match: Index: 0: attributeAssignType: mem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
          // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
          pattern = Pattern
              .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

          assertEquals(1, GrouperUtil.length(outputLines));
          fail("Shouldnt get here");
        } catch (Exception e) {
          //good
        } finally {

          System.setOut(systemOut);

        }

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


        // ######################################################
        // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=mem_asgn --assignAssignOwnerUuidsOfAttributeDefNames=" + attributeDefName.getId()
            + " --assignAssignOwnerActions=assign",
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: mem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(1, GrouperUtil.length(outputLines));

        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLine);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "mem_asgn", matcher.group(2));
        assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
        assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
        assertEquals(outputLine, "assign", matcher.group(5));
        assertEquals(outputLine, "123", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerActions"));


        // ######################################################
        // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups wrong action

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=mem_asgn --assignAssignOwnerUuidsOfAttributeDefNames=" + attributeDefName.getId()
            + " --assignAssignOwnerActions=assign2",
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: mem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(0, GrouperUtil.length(outputLines));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerActions"));



        // ######################################################
        // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups

        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=mem_asgn --owner0SubjectId=" + SubjectTestHelper.SUBJ0_ID
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: mem_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(1, GrouperUtil.length(outputLines));

        outputLine = outputLines[0];

        matcher = pattern.matcher(outputLine);

        assertTrue(outputLine, matcher.matches());
        assertEquals(outputLine, "0", matcher.group(1));
        assertEquals(outputLine, "mem_asgn", matcher.group(2));
        assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
        assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
        assertEquals(outputLine, "assign", matcher.group(5));
        assertEquals(outputLine, "123", matcher.group(6));
        assertEquals(outputLine, "T", matcher.group(7));
        assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("actions"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("enabled"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("params"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("uuid"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("theValue"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("\"123\""));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
        assertFalse(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
        assertTrue(GrouperClientWs.mostRecentRequest,
            !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerActions"));


      } finally {
        System.setOut(systemOut);
      }

    }

/**
   * @throws Exception
   */
  public void testGetAttributeAssignsAttributeDefExtraFeatures() throws Exception {

    AttributeDefName attributeDefName = AttributeDefNameTest.exampleAttributeDefNameDb("test", "testAttributeAssignDefName");
    AttributeDefName attributeDefName2 = AttributeDefNameTest.exampleAttributeDefNameDb("test", "testAttributeAssignAssignName");

    final AttributeDef attributeDef = attributeDefName.getAttributeDef();

    attributeDef.setValueType(AttributeDefValueType.string);
    attributeDef.setAssignToAttributeDef(true);
    attributeDef.store();

    final AttributeDef attributeDef2 = attributeDefName2.getAttributeDef();

    attributeDef2.setAssignToGroup(false);
    attributeDef2.setAssignToAttributeDefAssn(true);
    attributeDef2.setValueType(AttributeDefValueType.integer);
    attributeDef2.store();

    AttributeDef ownerAttributeDef = new AttributeDefSave(GrouperSession.staticGrouperSession()).assignSaveMode(SaveMode.INSERT_OR_UPDATE)
      .assignName("test:attributeDefTestAttrAssign").assignCreateParentStemsIfNotExist(true)
      .assignDescription("description").save();

    //test subject 0 can read the assignment on assignment
    attributeDef2.getPrivilegeDelegate().grantPriv(SubjectTestHelper.SUBJ0, AttributeDefPrivilege.ATTR_READ, false);

    AttributeAssignResult attributeAssignResult = ownerAttributeDef.getAttributeDelegate().assignAttribute(attributeDefName);
    AttributeAssign attributeAssign = attributeAssignResult.getAttributeAssign();
    attributeAssign.getValueDelegate().assignValue("abc");

    AttributeAssignResult attributeAssignResult2 = attributeAssign.getAttributeDelegate().assignAttribute(attributeDefName2);
    AttributeAssign attributeAssign2 = attributeAssignResult2.getAttributeAssign();
    attributeAssign2.getValueDelegate().assignValue("123");

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=attr_def " +
          "--attributeDefNames=test:testAttributeAssignDefNameDef " +
          "--attributeDefValueType=string --value=abc",
          " "));
      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: attributeDef, owner: test:attributeDefTestAttrAssign, attributeDefNameName test:testAttributeAssignDefName, action: assign, values: 15,5,5, enable: T, id: a9c83eeb78c04ae5befcea36272d318c
      // match: ^Index: (\d+)\: attributeDef\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      Pattern pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));
      String outputLine = outputLines[0];

      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "attr_def", matcher.group(2));
      assertEquals(outputLine, "test:attributeDefTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "abc", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("\"name\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("abc"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));

      // ######################################################
      // Try wrong value

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=attr_def --attributeDefUuids=" + attributeDef.getId() +
          " --attributeDefNames=test:testAttributeAssignDefNameDef " +
          "--attributeDefValueType=string --value=123",
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(0, GrouperUtil.length(outputLines));
//      outputLine = outputLines[0];
//
//      matcher = pattern.matcher(outputLines[0]);

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("\"name\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try wrong id

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {
        GrouperClient.main(GrouperClientUtils.splitTrim(
            " --operation=getAttributeAssignmentsWs --attributeAssignType=attr_def --attributeDefUuids=123" + attributeDef.getId() +
            " --attributeDefNames=test:testAttributeAssignDefNameDef " +
            "--attributeDefValueType=string --value=123",
            " "));
        fail("Shouldnt get here");
      } catch (GcWebServiceError gwse) {
        //ignore
      }

      // ######################################################
      // Try correct attributeDefType

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=attr_def --attributeDefUuids=" + attributeDef.getId() +
          " --attributeDefValueType=string --value=abc --attributeDefType=attr",
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: attributeDef, owner: test:attributeDefTestAttrAssign, attributeDefNameName test:testAttributeAssignDefName, action: assign, values: 15,5,5, enable: T, id: a9c83eeb78c04ae5befcea36272d318c
      // match: ^Index: (\d+)\: attributeDef\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));
      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "attr_def", matcher.group(2));
      assertEquals(outputLine, "test:attributeDefTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "abc", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("abc"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));

      // ######################################################
      // Try wrong attributeDefType

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=attr_def --attributeDefUuids=" + attributeDef.getId() +
          " --attributeDefValueType=string --value=abc --attributeDefType=limit",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: attributeDef, owner: test:attributeDefTestAttrAssign, attributeDefNameName test:testAttributeAssignDefName, action: assign, values: 15,5,5, enable: T, id: a9c83eeb78c04ae5befcea36272d318c
      // match: ^Index: (\d+)\: attributeDef\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(0, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("abc"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("limit"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));

      // ######################################################
      // Try attributeDef assignment on assignment by attributeDef

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=attr_def_asgn --attributeDefUuids=" + attributeDef2.getId(),
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: attributeDef_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: attributeDef\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));
      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "attr_def_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"abc\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));

      // ######################################################
      // Try attributeDef assignment on assignment by attributeDef with wrong id

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=attr_def_asgn --attributeDefUuids=1" + attributeDef2.getId(),
            " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: attributeDef_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: attributeDef\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(0, GrouperUtil.length(outputLines));
        fail("Why did it not fail?");
      } catch (Exception e) {
        //good
      }
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("abc"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try attributeDef assignment on assignment by attributeDef and value

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=attr_def_asgn --attributeDefUuids=" + attributeDef2.getId()
          + " --attributeDefValueType=integer --value=123 ",
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: attributeDef_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: attributeDef\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));
      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "attr_def_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try attributeDef assignment on assignment by attributeDef and wrong value

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=attr_def_asgn --attributeDefUuids=" + attributeDef2.getId()
          + " --attributeDefValueType=integer --value=1234 ",
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: attributeDef_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: attributeDef\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(0, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("1234"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try attributeDef assignment on assignment by attributeDef and value

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=attr_def_asgn --attributeDefUuids=" + attributeDef2.getId()
          + " --includeAssignmentsFromAssignments=T ",
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: attributeDef_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: attributeDef\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(2, GrouperUtil.length(outputLines));
      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "attr_def", matcher.group(2));
      assertEquals(outputLine, "test:attributeDefTestAttrAssign", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "abc", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      outputLine = outputLines[1];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "1", matcher.group(1));
      assertEquals(outputLine, "attr_def_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try attributeDef assignment on assignment by owner attribute assign id with wrong id

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=attr_def_asgn --assignAssignOwnerAttributeAssignUuids=1" + attributeAssign.getId()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: attributeDef_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: attributeDef\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(0, GrouperUtil.length(outputLines));
        fail("Shouldnt get here");
      } catch (Exception e) {
        //good
      } finally {
        System.setOut(systemOut);

      }

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));

      // ######################################################
      // Try attributeDef assignment on assignment by owner attribute assign id

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=attr_def_asgn --assignAssignOwnerAttributeAssignUuids=" + attributeAssign.getId()
          ,
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: attributeDef_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: attributeDef\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "attr_def_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try attributeDef assignment on assignment by wsAssignAssignOwnerAttributeDefLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=attr_def_asgn --assignAssignOwnerNamesOfAttributeDefs=" + attributeDef.getName()
          ,
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: attributeDef_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: attributeDef\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "attr_def_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));



      // ######################################################
      // Try attributeDef assignment on assignment by wsAssignAssignOwnerAttributeDefLookups with wrong name

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=attr_def_asgn --assignAssignOwnerNamesOfAttributeDefs=1" + attributeDef.getName()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: attributeDef_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: attributeDef\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(0, GrouperUtil.length(outputLines));

        fail("shouldnt get here");
      } catch (Exception e) {
        //good
      } finally {
        System.setOut(systemOut);
      }

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try attributeDef assignment on assignment by wsAssignAssignOwnerAttributeDefLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=attr_def_asgn --assignAssignOwnerUuidsOfAttributeDefs=" + attributeDef.getId()
          ,
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: attributeDef_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: attributeDef\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "attr_def_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try attributeDef assignment on assignment by wsAssignAssignOwnerAttributeDefLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=attr_def_asgn --assignAssignOwnerUuidsOfAttributeDefs=" + attributeDef.getId()
          ,
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: attr_def_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: attributeDef\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "attr_def_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));



      // ######################################################
      // Try attributeDef assignment on assignment by wsAssignAssignOwnerAttributeDefLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=attr_def_asgn --assignAssignOwnerUuidsOfAttributeDefs=1" + attributeDef.getId()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: attributeDef_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: attributeDef\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(0, GrouperUtil.length(outputLines));
        fail("Shouldnt get here");
      } catch (Exception e) {
        //good
      } finally {

        System.setOut(systemOut);

      }

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try attributeDef assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=attr_def_asgn --assignAssignOwnerNamesOfAttributeDefNames=" + attributeDefName.getName()
          ,
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: attributeDef_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: attributeDef\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "attr_def_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));



      // ######################################################
      // Try attributeDef assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=attr_def_asgn --assignAssignOwnerNamesOfAttributeDefNames=1" + attributeDefName.getName()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: attributeDef_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: attributeDef\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(0, GrouperUtil.length(outputLines));
        fail("Shouldnt get here");

      } catch (Exception e) {
        //ok
      } finally {

        System.setOut(systemOut);

      }

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try attributeDef assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=attr_def_asgn --assignAssignOwnerUuidsOfAttributeDefNames=" + attributeDefName.getId()
          ,
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: attr_def_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: attributeDef\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "attr_def_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));



      // ######################################################
      // Try attributeDef assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups wrong name

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=attr_def_asgn --assignAssignOwnerUuidsOfAttributeDefNames=1" + attributeDefName.getId()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: attributeDef_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: attributeDef\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(1, GrouperUtil.length(outputLines));
        fail("Shouldnt get here");
      } catch (Exception e) {
        //good
      } finally {

        System.setOut(systemOut);

      }

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try attributeDef assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=attr_def_asgn --assignAssignOwnerUuidsOfAttributeDefNames=" + attributeDefName.getId()
          + " --assignAssignOwnerActions=assign",
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: attributeDef_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: attributeDef\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "attr_def_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerActions"));


      // ######################################################
      // Try attributeDef assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups wrong action

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=attr_def_asgn --assignAssignOwnerUuidsOfAttributeDefNames=" + attributeDefName.getId()
          + " --assignAssignOwnerActions=assign2",
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: attributeDef_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: attributeDef\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(0, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerActions"));



      // ######################################################
      // Try attributeDef assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=attr_def_asgn --ownerAttributeDefNames=" + ownerAttributeDef.getName()
          ,
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: attributeDef_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: attributeDef\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "attr_def_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerActions"));


    } finally {
      System.setOut(systemOut);
    }

  }

/**
   * @throws Exception
   */
  public void testGetAttributeAssignsMembershipExtraFeatures() throws Exception {

    AttributeDefName attributeDefName = AttributeDefNameTest.exampleAttributeDefNameDb("test", "testAttributeAssignDefName");
    AttributeDefName attributeDefName2 = AttributeDefNameTest.exampleAttributeDefNameDb("test", "testAttributeAssignAssignName");

    final AttributeDef attributeDef = attributeDefName.getAttributeDef();

    attributeDef.setValueType(AttributeDefValueType.string);
    attributeDef.setAssignToGroup(false);
    attributeDef.setAssignToImmMembership(true);
    attributeDef.store();

    final AttributeDef attributeDef2 = attributeDefName2.getAttributeDef();

    attributeDef2.setAssignToGroup(false);
    attributeDef2.setAssignToImmMembershipAssn(true);
    attributeDef2.setValueType(AttributeDefValueType.integer);
    attributeDef2.store();

    Group group = new GroupSave(GrouperSession.staticGrouperSession()).assignSaveMode(SaveMode.INSERT_OR_UPDATE)
      .assignGroupNameToEdit("test:groupTestAttrAssign").assignName("test:groupTestAttrAssign").assignCreateParentStemsIfNotExist(true)
      .assignDescription("description").save();

    group.addMember(SubjectTestHelper.SUBJ1);

    Membership membership = MembershipFinder.findImmediateMembership(GrouperSession.staticGrouperSession(),
        group, SubjectTestHelper.SUBJ1, true);

    AttributeAssignResult attributeAssignResult = membership.getAttributeDelegate().assignAttribute(attributeDefName);
    AttributeAssign attributeAssign = attributeAssignResult.getAttributeAssign();
    attributeAssign.getValueDelegate().assignValue("abc");

    AttributeAssignResult attributeAssignResult2 = attributeAssign.getAttributeDelegate().assignAttribute(attributeDefName2);
    AttributeAssign attributeAssign2 = attributeAssignResult2.getAttributeAssign();
    attributeAssign2.getValueDelegate().assignValue("123");

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=imm_mem " +
          "--attributeDefNames=test:testAttributeAssignDefNameDef " +
          "--attributeDefValueType=string --value=abc",
          " "));
      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group, owner: test:groupTestAttrAssign, attributeDefNameName test:testAttributeAssignDefName, action: assign, values: 15,5,5, enable: T, id: a9c83eeb78c04ae5befcea36272d318c
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      Pattern pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));
      String outputLine = outputLines[0];

      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "imm_mem", matcher.group(2));
      assertEquals(outputLine, membership.getImmediateMembershipId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "abc", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("\"name\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("abc"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));

      // ######################################################
      // Try wrong value

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=imm_mem --attributeDefUuids=" + attributeDef.getId() +
          " --attributeDefNames=test:testAttributeAssignDefNameDef " +
          "--attributeDefValueType=string --value=123",
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(0, GrouperUtil.length(outputLines));
//      outputLine = outputLines[0];
//
//      matcher = pattern.matcher(outputLines[0]);

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("\"name\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try wrong id

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {
        GrouperClient.main(GrouperClientUtils.splitTrim(
            " --operation=getAttributeAssignmentsWs --attributeAssignType=imm_mem --attributeDefUuids=123" + attributeDef.getId() +
            " --attributeDefNames=test:testAttributeAssignDefNameDef " +
            "--attributeDefValueType=string --value=123",
            " "));
        fail("Shouldnt get here");
      } catch (GcWebServiceError gwse) {
        //ignore
      }

      // ######################################################
      // Try correct attributeDefType

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=imm_mem --attributeDefUuids=" + attributeDef.getId() +
          " --attributeDefValueType=string --value=abc --attributeDefType=attr",
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group, owner: test:groupTestAttrAssign, attributeDefNameName test:testAttributeAssignDefName, action: assign, values: 15,5,5, enable: T, id: a9c83eeb78c04ae5befcea36272d318c
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));
      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "imm_mem", matcher.group(2));
      assertEquals(outputLine, membership.getImmediateMembershipId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "abc", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("abc"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));

      // ######################################################
      // Try wrong attributeDefType

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=imm_mem --attributeDefUuids=" + attributeDef.getId() +
          " --attributeDefValueType=string --value=abc --attributeDefType=limit",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group, owner: test:groupTestAttrAssign, attributeDefNameName test:testAttributeAssignDefName, action: assign, values: 15,5,5, enable: T, id: a9c83eeb78c04ae5befcea36272d318c
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(0, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("abc"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("limit"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));

      // ######################################################
      // Try group assignment on assignment by attributeDef

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=imm_mem_asgn --attributeDefUuids=" + attributeDef2.getId(),
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));
      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "imm_mem_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"abc\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));

      // ######################################################
      // Try group assignment on assignment by attributeDef with wrong id

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=imm_mem_asgn --attributeDefUuids=1" + attributeDef2.getId(),
            " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(0, GrouperUtil.length(outputLines));
        fail("Why did it not fail?");
      } catch (Exception e) {
        //good
      }
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("abc"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by attributeDef and value

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=imm_mem_asgn --attributeDefUuids=" + attributeDef2.getId()
          + " --attributeDefValueType=integer --value=123 ",
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));
      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "imm_mem_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by attributeDef and wrong value

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=imm_mem_asgn --attributeDefUuids=" + attributeDef2.getId()
          + " --attributeDefValueType=integer --value=1234 ",
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(0, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("1234"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by attributeDef and value

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=imm_mem_asgn --attributeDefUuids=" + attributeDef2.getId()
          + " --includeAssignmentsFromAssignments=T ",
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(2, GrouperUtil.length(outputLines));
      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "imm_mem", matcher.group(2));
      assertEquals(outputLine, membership.getImmediateMembershipId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "abc", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      outputLine = outputLines[1];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "1", matcher.group(1));
      assertEquals(outputLine, "imm_mem_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by owner attribute assign id with wrong id

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=imm_mem_asgn --assignAssignOwnerAttributeAssignUuids=1" + attributeAssign.getId()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(0, GrouperUtil.length(outputLines));
        fail("Shouldnt get here");
      } catch (Exception e) {
        //good
      } finally {
        System.setOut(systemOut);

      }

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));

      // ######################################################
      // Try group assignment on assignment by owner attribute assign id

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=imm_mem_asgn --assignAssignOwnerAttributeAssignUuids=" + attributeAssign.getId()
          ,
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "imm_mem_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=imm_mem_asgn --assignAssignOwnerNamesOfAttributeDefs=" + attributeDef.getName()
          ,
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "imm_mem_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));



      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefLookups with wrong name

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=imm_mem_asgn --assignAssignOwnerNamesOfAttributeDefs=1" + attributeDef.getName()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(0, GrouperUtil.length(outputLines));

        fail("shouldnt get here");
      } catch (Exception e) {
        //good
      } finally {
        System.setOut(systemOut);
      }

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=imm_mem_asgn --assignAssignOwnerUuidsOfAttributeDefs=" + attributeDef.getId()
          ,
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "imm_mem_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=imm_mem_asgn --assignAssignOwnerUuidsOfAttributeDefs=" + attributeDef.getId()
          ,
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "imm_mem_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));



      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=imm_mem_asgn --assignAssignOwnerUuidsOfAttributeDefs=1" + attributeDef.getId()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(0, GrouperUtil.length(outputLines));
        fail("Shouldnt get here");
      } catch (Exception e) {
        //good
      } finally {

        System.setOut(systemOut);

      }

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=imm_mem_asgn --assignAssignOwnerNamesOfAttributeDefNames=" + attributeDefName.getName()
          ,
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "imm_mem_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));



      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=imm_mem_asgn --assignAssignOwnerNamesOfAttributeDefNames=1" + attributeDefName.getName()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(0, GrouperUtil.length(outputLines));
        fail("Shouldnt get here");

      } catch (Exception e) {
        //ok
      } finally {

        System.setOut(systemOut);

      }

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=imm_mem_asgn --assignAssignOwnerUuidsOfAttributeDefNames=" + attributeDefName.getId()
          ,
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "imm_mem_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));



      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups wrong name

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=imm_mem_asgn --assignAssignOwnerUuidsOfAttributeDefNames=1" + attributeDefName.getId()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(1, GrouperUtil.length(outputLines));
        fail("Shouldnt get here");
      } catch (Exception e) {
        //good
      } finally {

        System.setOut(systemOut);

      }

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=imm_mem_asgn --assignAssignOwnerUuidsOfAttributeDefNames=" + attributeDefName.getId()
          + " --assignAssignOwnerActions=assign",
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "imm_mem_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups wrong action

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=imm_mem_asgn --assignAssignOwnerUuidsOfAttributeDefNames=" + attributeDefName.getId()
          + " --assignAssignOwnerActions=assign2",
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(0, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerActions"));



      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=imm_mem_asgn --ownerMembershipUuids=" + membership.getImmediateMembershipId()
          ,
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "imm_mem_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerActions"));


    } finally {
      System.setOut(systemOut);
    }

  }

/**
   * @throws Exception
   */
  public void testGetAttributeAssignsAnyMembershipExtraFeatures() throws Exception {

    AttributeDefName attributeDefName = AttributeDefNameTest.exampleAttributeDefNameDb("test", "testAttributeAssignDefName");
    AttributeDefName attributeDefName2 = AttributeDefNameTest.exampleAttributeDefNameDb("test", "testAttributeAssignAssignName");

    final AttributeDef attributeDef = attributeDefName.getAttributeDef();

    attributeDef.setValueType(AttributeDefValueType.string);
    attributeDef.setAssignToGroup(false);
    attributeDef.setAssignToEffMembership(true);
    attributeDef.store();

    final AttributeDef attributeDef2 = attributeDefName2.getAttributeDef();

    attributeDef2.setAssignToGroup(false);
    attributeDef2.setAssignToEffMembershipAssn(true);
    attributeDef2.setValueType(AttributeDefValueType.integer);
    attributeDef2.store();

    Group group1 = new GroupSave(GrouperSession.staticGrouperSession()).assignSaveMode(SaveMode.INSERT_OR_UPDATE)
      .assignGroupNameToEdit("test:anyMembershipTestAttrAssign").assignName("test:anyMembershipTestAttrAssign").assignCreateParentStemsIfNotExist(true)
      .assignDescription("description").save();

    Group group2 = new GroupSave(GrouperSession.staticGrouperSession()).assignSaveMode(SaveMode.INSERT_OR_UPDATE)
      .assignGroupNameToEdit("test:anyMembershipTestAttrAssign2").assignName("test:anyMembershipTestAttrAssign2").assignCreateParentStemsIfNotExist(true)
      .assignDescription("description").save();

    //add one group to another to make effective membership and add attribute to that membership
    group1.addMember(group2.toSubject());
    group2.addMember(SubjectTestHelper.SUBJ0);

    Member member = MemberFinder.findBySubject(GrouperSession.staticGrouperSession(), SubjectTestHelper.SUBJ0, false);

    Membership membership = (Membership)MembershipFinder.findMemberships(GrouperUtil.toSet(group1.getId()),
        GrouperUtil.toSet(member.getUuid()), null, null, FieldFinder.find("members", true), null, null, null, null, null).iterator().next()[0];

    AttributeAssignResult attributeAssignResult = membership.getAttributeDelegateEffMship().assignAttribute(attributeDefName);

    AttributeAssign attributeAssign = attributeAssignResult.getAttributeAssign();
    attributeAssign.getValueDelegate().assignValue("abc");

    AttributeAssignResult attributeAssignResult2 = attributeAssign.getAttributeDelegate().assignAttribute(attributeDefName2);
    AttributeAssign attributeAssign2 = attributeAssignResult2.getAttributeAssign();
    attributeAssign2.getValueDelegate().assignValue("123");

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=any_mem " +
          "--attributeDefNames=test:testAttributeAssignDefNameDef " +
          "--attributeDefValueType=string --value=abc",
          " "));
      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group, owner: test:groupTestAttrAssign, attributeDefNameName test:testAttributeAssignDefName, action: assign, values: 15,5,5, enable: T, id: a9c83eeb78c04ae5befcea36272d318c
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      Pattern pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));
      String outputLine = outputLines[0];

      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "any_mem", matcher.group(2));
      assertEquals(outputLine, "test:anyMembershipTestAttrAssign - jdbc - test.subject.0", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "abc", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("\"name\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("abc"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));

      // ######################################################
      // Try wrong value

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=any_mem --attributeDefUuids=" + attributeDef.getId() +
          " --attributeDefNames=test:testAttributeAssignDefNameDef " +
          "--attributeDefValueType=string --value=123",
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(0, GrouperUtil.length(outputLines));
//      outputLine = outputLines[0];
//
//      matcher = pattern.matcher(outputLines[0]);

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("\"name\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try wrong id

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {
        GrouperClient.main(GrouperClientUtils.splitTrim(
            " --operation=getAttributeAssignmentsWs --attributeAssignType=any_mem --attributeDefUuids=123" + attributeDef.getId() +
            " --attributeDefNames=test:testAttributeAssignDefNameDef " +
            "--attributeDefValueType=string --value=123",
            " "));
        fail("Shouldnt get here");
      } catch (GcWebServiceError gwse) {
        //ignore
      }

      // ######################################################
      // Try correct attributeDefType

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=any_mem --attributeDefUuids=" + attributeDef.getId() +
          " --attributeDefValueType=string --value=abc --attributeDefType=attr",
          " "));


      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group, owner: test:anyMembershipTestAttrAssign - jdbc - test.subject.0, attributeDefNameName test:testAttributeAssignDefName, action: assign, values: 15,5,5, enable: T, id: a9c83eeb78c04ae5befcea36272d318c
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));
      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "any_mem", matcher.group(2));
      assertEquals(outputLine, "test:anyMembershipTestAttrAssign - jdbc - test.subject.0", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "abc", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("abc"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));

      // ######################################################
      // Try wrong attributeDefType

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=any_mem --attributeDefUuids=" + attributeDef.getId() +
          " --attributeDefValueType=string --value=abc --attributeDefType=limit",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group, owner: test:anyMembershipTestAttrAssign - jdbc - test.subject.0, attributeDefNameName test:testAttributeAssignDefName, action: assign, values: 15,5,5, enable: T, id: a9c83eeb78c04ae5befcea36272d318c
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(0, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("abc"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("limit"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));

      // ######################################################
      // Try group assignment on assignment by attributeDef

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=any_mem_asgn --attributeDefUuids=" + attributeDef2.getId(),
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));
      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "any_mem_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"abc\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by attributeDef

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=any_mem_asgn --attributeDefIdIndexes=" + attributeDef2.getIdIndex(),
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));
      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "any_mem_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("\"idIndex\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"abc\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));

      // ######################################################
      // Try group assignment on assignment by attributeDef with wrong id

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=any_mem_asgn --attributeDefUuids=1" + attributeDef2.getId(),
            " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(0, GrouperUtil.length(outputLines));
        fail("Why did it not fail?");
      } catch (Exception e) {
        //good
      }
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("abc"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by attributeDef and value

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=any_mem_asgn --attributeDefUuids=" + attributeDef2.getId()
          + " --attributeDefValueType=integer --value=123 ",
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));
      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "any_mem_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by attributeDef and wrong value

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=any_mem_asgn --attributeDefUuids=" + attributeDef2.getId()
          + " --attributeDefValueType=integer --value=1234 ",
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(0, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("1234"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by attributeDef and value

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=any_mem_asgn --attributeDefUuids=" + attributeDef2.getId()
          + " --includeAssignmentsFromAssignments=T ",
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(2, GrouperUtil.length(outputLines));
      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "any_mem", matcher.group(2));
      assertEquals(outputLine, "test:anyMembershipTestAttrAssign - jdbc - test.subject.0", matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "abc", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(8));

      outputLine = outputLines[1];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "1", matcher.group(1));
      assertEquals(outputLine, "any_mem_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups") && GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by owner attribute assign id with wrong id

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=any_mem_asgn --assignAssignOwnerAttributeAssignUuids=1" + attributeAssign.getId()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(0, GrouperUtil.length(outputLines));
        fail("Shouldnt get here");
      } catch (Exception e) {
        //good
      } finally {
        System.setOut(systemOut);

      }

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));

      // ######################################################
      // Try group assignment on assignment by owner attribute assign id

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=any_mem_asgn --assignAssignOwnerAttributeAssignUuids=" + attributeAssign.getId()
          ,
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "any_mem_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=any_mem_asgn --assignAssignOwnerNamesOfAttributeDefs=" + attributeDef.getName()
          ,
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "any_mem_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));



      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefLookups with wrong name

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=any_mem_asgn --assignAssignOwnerNamesOfAttributeDefs=1" + attributeDef.getName()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(0, GrouperUtil.length(outputLines));

        fail("shouldnt get here");
      } catch (Exception e) {
        //good
      } finally {
        System.setOut(systemOut);
      }

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=any_mem_asgn --assignAssignOwnerUuidsOfAttributeDefs=" + attributeDef.getId()
          ,
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "any_mem_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=any_mem_asgn --assignAssignOwnerUuidsOfAttributeDefs=" + attributeDef.getId()
          ,
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "any_mem_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));



      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=any_mem_asgn --assignAssignOwnerUuidsOfAttributeDefs=1" + attributeDef.getId()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(0, GrouperUtil.length(outputLines));
        fail("Shouldnt get here");
      } catch (Exception e) {
        //good
      } finally {

        System.setOut(systemOut);

      }

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefs"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerUuidsOfAttributeDefNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=any_mem_asgn --assignAssignOwnerNamesOfAttributeDefNames=" + attributeDefName.getName()
          ,
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "any_mem_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));



      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=any_mem_asgn --assignAssignOwnerNamesOfAttributeDefNames=1" + attributeDefName.getName()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(0, GrouperUtil.length(outputLines));
        fail("Shouldnt get here");

      } catch (Exception e) {
        //ok
      } finally {

        System.setOut(systemOut);

      }

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=any_mem_asgn --assignAssignOwnerUuidsOfAttributeDefNames=" + attributeDefName.getId()
          ,
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "any_mem_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));



      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups wrong name

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      try {
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAttributeAssignmentsWs --attributeAssignType=any_mem_asgn --assignAssignOwnerUuidsOfAttributeDefNames=1" + attributeDefName.getId()
            ,
          " "));

        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
        // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
        pattern = Pattern
            .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

        assertEquals(1, GrouperUtil.length(outputLines));
        fail("Shouldnt get here");
      } catch (Exception e) {
        //good
      } finally {

        System.setOut(systemOut);

      }

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=any_mem_asgn --assignAssignOwnerUuidsOfAttributeDefNames=" + attributeDefName.getId()
          + " --assignAssignOwnerActions=assign",
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "any_mem_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerActions"));


      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups wrong action

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=any_mem_asgn --assignAssignOwnerUuidsOfAttributeDefNames=" + attributeDefName.getId()
          + " --assignAssignOwnerActions=assign2",
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(0, GrouperUtil.length(outputLines));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerActions"));



      // ######################################################
      // Try group assignment on assignment by wsAssignAssignOwnerAttributeDefNameLookups

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=getAttributeAssignmentsWs --attributeAssignType=any_mem_asgn --ownerMembershipAny0SubjectId=" + member.getSubjectId()
          + " --ownerMembershipAny0GroupName=" + group1.getName()
          ,
        " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: 0: attributeAssignType: group_asgn, owner: 91dba6fbe4e9483c876f3af32039ed19, attributeDefNameName: test:testAttributeAssignAssignName, action: assign, values: 123, enabled: T, id: b0cccccf4af14af9be9c5df294f875e1
      // match: ^Index: (\d+)\: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F)$
      pattern = Pattern
          .compile("^Index: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName: (.+), action\\: (.+), values: (.+), enabled\\: (T|F), id: (.+)$");

      assertEquals(1, GrouperUtil.length(outputLines));

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLine);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "any_mem_asgn", matcher.group(2));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(3));
      assertEquals(outputLine, "test:testAttributeAssignAssignName", matcher.group(4));
      assertEquals(outputLine, "assign", matcher.group(5));
      assertEquals(outputLine, "123", matcher.group(6));
      assertEquals(outputLine, "T", matcher.group(7));
      assertEquals(outputLine, attributeAssign2.getId(), matcher.group(8));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actions"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("enabled"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeAssignmentsOnAssignments"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("uuid"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookups"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefValueType"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("theValue"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"123\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("includeAssignmentsFromAssignments"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeDefType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignAssignOwnerAttributeAssignUuids"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerAttributeDefNameLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAssignAssignOwnerActions"));


    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testAssignAttributesBatchGroup() throws Exception {

    AttributeDefName attributeDefName = AttributeDefNameTest.exampleAttributeDefNameDb("test", "testAttributeAssignDefName");

    final AttributeDef attributeDef = attributeDefName.getAttributeDef();

    attributeDef.setValueType(AttributeDefValueType.integer);
    attributeDef.setMultiValued(true);
    attributeDef.store();

    Group group = new GroupSave(GrouperSession.staticGrouperSession()).assignSaveMode(SaveMode.INSERT_OR_UPDATE)
      .assignGroupNameToEdit("test:groupTestAttrAssign").assignName("test:groupTestAttrAssign").assignCreateParentStemsIfNotExist(true)
      .assignDescription("description").save();

    //test subject 0 can view and read
    group.grantPriv(SubjectTestHelper.SUBJ0, AccessPrivilege.VIEW);
    attributeDef.getPrivilegeDelegate().grantPriv(SubjectTestHelper.SUBJ0, AttributeDefPrivilege.ATTR_READ, false);

    AttributeAssign attributeAssign = null;
    //    AttributeAssignResult attributeAssignResult = group.getAttributeDelegate().assignAttribute(attributeDefName);
    //     = attributeAssignResult.getAttributeAssign();

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));

    try {

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesBatchWs --entry_0_attributeAssignType=group --entry_0_attributeAssignOperation=assign_attr " +
          "--entry_0_nameOfAttributeDefName=test:testAttributeAssignDefName --entry_0_ownerGroupName=test:groupTestAttrAssign",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      String output = new String(baos.toByteArray());

      System.setOut(systemOut);

      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");

      // match: Index: ${assignIndex}, itemIndex: ${assignItemIndex}: attributeAssignType: group, owner: test:groupTestAttrAssign, attributeDefNameNameName test:testAttributeAssignDefName, action: assign, values: 15,5,5, enable: T, id: a9c83eeb78c04ae5befcea36272d318c, changed: true, valuesChanged: false
      // match: ^Index: (\d+), \: group\: (.+), subject\: (.+), list: (.+), type\: (.+), enabled\: (T|F), changed\: (T|F), valuesChanged\: (T|F)$
      Pattern pattern = Pattern
        .compile("^Index\\: (\\d+), itemIndex: (\\d+)\\: attributeAssignType\\: (.+), owner\\: (.+), attributeDefNameName\\: (.+), action\\: (.+), " +
            "values\\: (.+), enabled\\: (T|F), id\\: (.+), changed\\: (T|F), deleted\\: (T|F), valuesChanged\\: (T|F)$");
      String outputLine = outputLines[0];

      Matcher matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "0", matcher.group(2));
      assertEquals(outputLine, "group", matcher.group(3));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(4));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(5));
      assertEquals(outputLine, "assign", matcher.group(6));
      assertEquals(outputLine, "none", matcher.group(7));
      assertEquals(outputLine, "T", matcher.group(8));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(9));
      assertEquals(outputLine, "T", matcher.group(10));
      assertEquals(outputLine, "F", matcher.group(11));
      assertEquals(outputLine, "F", matcher.group(12));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("action"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookup")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookup")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookup"));


      // ######################################################
      // Try attributeDefNameId

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesBatchWs --entry_0_attributeAssignType=group --entry_0_attributeAssignOperation=assign_attr " +
          "--entry_0_uuidOfAttributeDefName=" + attributeDefName.getId() +  " --entry_0_ownerGroupName=test:groupTestAttrAssign",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "0", matcher.group(2));
      assertEquals(outputLine, "group", matcher.group(3));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(4));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(5));
      assertEquals(outputLine, "assign", matcher.group(6));
      assertEquals(outputLine, "none", matcher.group(7));
      assertEquals(outputLine, "T", matcher.group(8));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(9));
      assertEquals(outputLine, "F", matcher.group(10));
      assertEquals(outputLine, "F", matcher.group(11));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("action"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookup")
          && GrouperClientWs.mostRecentRequest.contains(attributeDefName.getId()));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookup")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookup"));

      // ######################################################
      // Try attributeDefNameIdIndex

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesBatchWs --entry_0_attributeAssignType=group --entry_0_attributeAssignOperation=assign_attr " +
          "--entry_0_idIndexOfAttributeDefName=" + attributeDefName.getIdIndex() +  " --entry_0_ownerGroupName=test:groupTestAttrAssign",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "0", matcher.group(2));
      assertEquals(outputLine, "group", matcher.group(3));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(4));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(5));
      assertEquals(outputLine, "assign", matcher.group(6));
      assertEquals(outputLine, "none", matcher.group(7));
      assertEquals(outputLine, "T", matcher.group(8));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(9));
      assertEquals(outputLine, "F", matcher.group(10));
      assertEquals(outputLine, "F", matcher.group(11));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("action"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookup")
          && GrouperClientWs.mostRecentRequest.contains(attributeDefName.getIdIndex().toString()));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookup")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookup"));

      // ######################################################
      // Try ownerGroupUuid

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesBatchWs --entry_0_attributeAssignType=group --entry_0_attributeAssignOperation=assign_attr " +
          "--entry_0_nameOfAttributeDefName=test:testAttributeAssignDefName --entry_0_ownerGroupUuid=" + group.getUuid(),
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "0", matcher.group(2));
      assertEquals(outputLine, "group", matcher.group(3));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(4));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(5));
      assertEquals(outputLine, "assign", matcher.group(6));
      assertEquals(outputLine, "none", matcher.group(7));
      assertEquals(outputLine, "T", matcher.group(8));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(9));
      assertEquals(outputLine, "F", matcher.group(10));
      assertEquals(outputLine, "F", matcher.group(11));
      assertEquals(outputLine, "F", matcher.group(12));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("action"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookup")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookup")
          && GrouperClientWs.mostRecentRequest.contains(group.getUuid()));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookup"));

      // ######################################################
      // Try ownerGroupIdIndex

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesBatchWs --entry_0_attributeAssignType=group --entry_0_attributeAssignOperation=assign_attr " +
          "--entry_0_nameOfAttributeDefName=test:testAttributeAssignDefName --entry_0_ownerGroupIdIndex=" + group.getIdIndex(),
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "0", matcher.group(2));
      assertEquals(outputLine, "group", matcher.group(3));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(4));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(5));
      assertEquals(outputLine, "assign", matcher.group(6));
      assertEquals(outputLine, "none", matcher.group(7));
      assertEquals(outputLine, "T", matcher.group(8));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(9));
      assertEquals(outputLine, "F", matcher.group(10));
      assertEquals(outputLine, "F", matcher.group(11));
      assertEquals(outputLine, "F", matcher.group(12));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("action"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookup")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookup")
          && GrouperClientWs.mostRecentRequest.contains(group.getIdIndex().toString()));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookup"));

      // ######################################################
      // Try enabledTime

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesBatchWs --entry_0_attributeAssignType=group --entry_0_attributeAssignOperation=assign_attr " +
          "--entry_0_nameOfAttributeDefName=test:testAttributeAssignDefName --entry_0_ownerGroupName=test:groupTestAttrAssign "
          + " --entry_0_assignmentEnabledTime=2010/03/05_17:05:13.123",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "0", matcher.group(2));
      assertEquals(outputLine, "group", matcher.group(3));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(4));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(5));
      assertEquals(outputLine, "assign", matcher.group(6));
      assertEquals(outputLine, "none", matcher.group(7));
      assertEquals(outputLine, "T", matcher.group(8));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(9));
      assertEquals(outputLine, "T", matcher.group(10));
      assertEquals(outputLine, "F", matcher.group(11));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("action"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime")
          && GrouperClientWs.mostRecentRequest.contains("2010/03/05 17:05:13.123"));
      assertTrue(GrouperClientWs.mostRecentResponse,
          GrouperClientWs.mostRecentResponse.contains("2010/03/05 17:05:13.123"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookup")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookup")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookup"));

      // ######################################################
      // Try disabledTime

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesBatchWs --entry_0_attributeAssignType=group --entry_0_attributeAssignOperation=assign_attr " +
          "--entry_0_nameOfAttributeDefName=test:testAttributeAssignDefName --entry_0_ownerGroupName=test:groupTestAttrAssign "
          + " --entry_0_assignmentDisabledTime=2010/03/05_17:05:13.123",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "0", matcher.group(2));
      assertEquals(outputLine, "group", matcher.group(3));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(4));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(5));
      assertEquals(outputLine, "assign", matcher.group(6));
      assertEquals(outputLine, "none", matcher.group(7));
      assertEquals(outputLine, "F", matcher.group(8));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(9));
      assertEquals(outputLine, "T", matcher.group(10));
      assertEquals(outputLine, "F", matcher.group(11));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("action"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime")
          && GrouperClientWs.mostRecentRequest.contains("2010/03/05 17:05:13.123"));
      assertTrue(GrouperClientWs.mostRecentResponse,
          GrouperClientWs.mostRecentResponse.contains("2010/03/05 17:05:13.123"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookup")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookup")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookup"));

      // ######################################################
      // Try assignmentNotes

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesBatchWs --entry_0_attributeAssignType=group --entry_0_attributeAssignOperation=assign_attr " +
          "--entry_0_nameOfAttributeDefName=test:testAttributeAssignDefName --entry_0_ownerGroupName=test:groupTestAttrAssign "
          + " --entry_0_assignmentNotes=theNotes",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "0", matcher.group(2));
      assertEquals(outputLine, "group", matcher.group(3));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(4));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(5));
      assertEquals(outputLine, "assign", matcher.group(6));
      assertEquals(outputLine, "none", matcher.group(7));
      assertEquals(outputLine, "T", matcher.group(8));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(9));
      assertEquals(outputLine, "T", matcher.group(10));
      assertEquals(outputLine, "F", matcher.group(11));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("action"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      assertTrue(GrouperClientWs.mostRecentResponse,
          GrouperClientWs.mostRecentResponse.contains("theNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("assignmentNotes")
          && GrouperClientWs.mostRecentRequest.contains("theNotes") );
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookup")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookup")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookup"));


      // ######################################################
      // Try delegatable

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesBatchWs --entry_0_attributeAssignType=group --entry_0_attributeAssignOperation=assign_attr " +
          "--entry_0_nameOfAttributeDefName=test:testAttributeAssignDefName --entry_0_ownerGroupName=test:groupTestAttrAssign "
          + " --entry_0_delegatable=FALSE",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "0", matcher.group(2));
      assertEquals(outputLine, "group", matcher.group(3));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(4));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(5));
      assertEquals(outputLine, "assign", matcher.group(6));
      assertEquals(outputLine, "none", matcher.group(7));
      assertEquals(outputLine, "T", matcher.group(8));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(9));
      assertEquals(outputLine, "T", matcher.group(10));
      assertEquals(outputLine, "F", matcher.group(11));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("action"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      //assertTrue(GrouperClientWs.mostRecentResponse,
      //    GrouperClientWs.mostRecentResponse.contains("theNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("delegatable")
          && GrouperClientWs.mostRecentRequest.contains("FALSE"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookup")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookup")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookup"));

      // ######################################################
      // Try action

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesBatchWs --entry_0_attributeAssignType=group --entry_0_attributeAssignOperation=assign_attr " +
          "--entry_0_nameOfAttributeDefName=test:testAttributeAssignDefName --entry_0_ownerGroupName=test:groupTestAttrAssign "
          + " --entry_0_action=assign",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "0", matcher.group(2));
      assertEquals(outputLine, "group", matcher.group(3));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(4));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(5));
      assertEquals(outputLine, "assign", matcher.group(6));
      assertEquals(outputLine, "none", matcher.group(7));
      assertEquals(outputLine, "T", matcher.group(8));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(9));
      assertEquals(outputLine, "F", matcher.group(10));
      assertEquals(outputLine, "F", matcher.group(11));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("action"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      //assertTrue(GrouperClientWs.mostRecentResponse,
      //    GrouperClientWs.mostRecentResponse.contains("theNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("values"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookup")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookup")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookup"));

      // ######################################################
      // Try values

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=assignAttributesBatchWs --entry_0_attributeAssignType=group --entry_0_attributeAssignOperation=assign_attr " +
          "--entry_0_nameOfAttributeDefName=test:testAttributeAssignDefName --entry_0_ownerGroupName=test:groupTestAttrAssign "
          + " --entry_0_values0System=3 --entry_0_values1System=4 --entry_0_values2System=5 --entry_0_attributeAssignValueOperation=replace_values",
          " "));

      attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      outputLine = outputLines[0];

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLine, matcher.matches());
      assertEquals(outputLine, "0", matcher.group(1));
      assertEquals(outputLine, "0", matcher.group(2));
      assertEquals(outputLine, "group", matcher.group(3));
      assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(4));
      assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(5));
      assertEquals(outputLine, "assign", matcher.group(6));
      assertEquals(outputLine, "3,4,5", matcher.group(7));
      assertEquals(outputLine, "T", matcher.group(8));
      assertEquals(outputLine, attributeAssign.getId(), matcher.group(9));
      assertEquals(outputLine, "F", matcher.group(10));
      assertEquals(outputLine, "F", matcher.group(11));
      assertEquals(outputLine, "T", matcher.group(12));

      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("action"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
      //assertTrue(GrouperClientWs.mostRecentResponse,
      //    GrouperClientWs.mostRecentResponse.contains("theNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("delegatable"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("params"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("values")
          && GrouperClientWs.mostRecentRequest.contains("\"3\"")
          && GrouperClientWs.mostRecentRequest.contains("\"4\"")
          && GrouperClientWs.mostRecentRequest.contains("\"5\""));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookup")
          && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookup")
          && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookup"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookup"));

  //    // ######################################################
  //    // includeGroupDetail
  //
  //    baos = new ByteArrayOutputStream();
  //    System.setOut(new PrintStream(baos));
  //
  //    GrouperClient.main(GrouperClientUtils.splitTrim(
  //        "--operation=assignAttributesBatchWs --entry_0_attributeAssignType=group --entry_0_attributeAssignOperation=assign_attr " +
  //        "--entry_0_nameOfAttributeDefName=test:testAttributeAssignDefName --entry_0_ownerGroupName=test:groupTestAttrAssign "
  //        + " --includeGroupDetail=T",
  //        " "));
  //
  //    attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);
  //
  //    System.out.flush();
  //    output = new String(baos.toByteArray());
  //
  //    System.setOut(systemOut);
  //
  //    outputLines = GrouperClientUtils.splitTrim(output, "\n");
  //
  //    outputLine = outputLines[0];
  //
  //    matcher = pattern.matcher(outputLines[0]);
  //
  //    assertTrue(outputLine, matcher.matches());
  //    assertEquals(outputLine, "0", matcher.group(1));
  //    assertEquals(outputLine, "0", matcher.group(2));
  //    assertEquals(outputLine, "group", matcher.group(3));
  //    assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(4));
  //    assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(5));
  //    assertEquals(outputLine, "assign", matcher.group(6));
  //    assertEquals(outputLine, "3,4,5", matcher.group(7));
  //    assertEquals(outputLine, "T", matcher.group(8));
  //    assertEquals(outputLine, attributeAssign.getId(), matcher.group(9));
  //    assertEquals(outputLine, "F", matcher.group(10));
  //    assertEquals(outputLine, "F", matcher.group(11));
  //    assertEquals(outputLine, "F", matcher.group(12));
  //
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("action"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("delegatable"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("params"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("values"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookup")
  //        && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookup")
  //        && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookup"));
  //
  //
  //    // ######################################################
  //    // includeSubjectDetail
  //
  //    baos = new ByteArrayOutputStream();
  //    System.setOut(new PrintStream(baos));
  //
  //    GrouperClient.main(GrouperClientUtils.splitTrim(
  //        "--operation=assignAttributesBatchWs --entry_0_attributeAssignType=group --entry_0_attributeAssignOperation=assign_attr " +
  //        "--entry_0_nameOfAttributeDefName=test:testAttributeAssignDefName --entry_0_ownerGroupName=test:groupTestAttrAssign "
  //        + " --includeSubjectDetail=T",
  //        " "));
  //
  //    attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);
  //
  //    System.out.flush();
  //    output = new String(baos.toByteArray());
  //
  //    System.setOut(systemOut);
  //
  //    outputLines = GrouperClientUtils.splitTrim(output, "\n");
  //
  //    outputLine = outputLines[0];
  //
  //    matcher = pattern.matcher(outputLines[0]);
  //
  //    assertTrue(outputLine, matcher.matches());
  //    assertEquals(outputLine, "0", matcher.group(1));
  //    assertEquals(outputLine, "0", matcher.group(2));
  //    assertEquals(outputLine, "group", matcher.group(3));
  //    assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(4));
  //    assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(5));
  //    assertEquals(outputLine, "assign", matcher.group(6));
  //    assertEquals(outputLine, "3,4,5", matcher.group(7));
  //    assertEquals(outputLine, "T", matcher.group(8));
  //    assertEquals(outputLine, attributeAssign.getId(), matcher.group(9));
  //    assertEquals(outputLine, "F", matcher.group(10));
  //    assertEquals(outputLine, "F", matcher.group(11));
  //    assertEquals(outputLine, "F", matcher.group(12));
  //
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("action"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("delegatable"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("params"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("values"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookup")
  //        && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookup")
  //        && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookup"));
  //
  //
  //    // ######################################################
  //    // subjectAttributeNames
  //
  //    baos = new ByteArrayOutputStream();
  //    System.setOut(new PrintStream(baos));
  //
  //    GrouperClient.main(GrouperClientUtils.splitTrim(
  //        "--operation=assignAttributesBatchWs --entry_0_attributeAssignType=group --entry_0_attributeAssignOperation=assign_attr " +
  //        "--entry_0_nameOfAttributeDefName=test:testAttributeAssignDefName --entry_0_ownerGroupName=test:groupTestAttrAssign "
  //        + " --subjectAttributeNames=abc",
  //        " "));
  //
  //    attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);
  //
  //    System.out.flush();
  //    output = new String(baos.toByteArray());
  //
  //    System.setOut(systemOut);
  //
  //    outputLines = GrouperClientUtils.splitTrim(output, "\n");
  //
  //    outputLine = outputLines[0];
  //
  //    matcher = pattern.matcher(outputLines[0]);
  //
  //    assertTrue(outputLine, matcher.matches());
  //    assertEquals(outputLine, "0", matcher.group(1));
  //    assertEquals(outputLine, "0", matcher.group(2));
  //    assertEquals(outputLine, "group", matcher.group(3));
  //    assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(4));
  //    assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(5));
  //    assertEquals(outputLine, "assign", matcher.group(6));
  //    assertEquals(outputLine, "3,4,5", matcher.group(7));
  //    assertEquals(outputLine, "T", matcher.group(8));
  //    assertEquals(outputLine, attributeAssign.getId(), matcher.group(9));
  //    assertEquals(outputLine, "F", matcher.group(10));
  //    assertEquals(outputLine, "F", matcher.group(11));
  //    assertEquals(outputLine, "F", matcher.group(12));
  //
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("action"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("delegatable"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("params"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("values"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookup")
  //        && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookup")
  //        && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookup"));
  //
  //
  //    // ######################################################
  //    // params
  //
  //    baos = new ByteArrayOutputStream();
  //    System.setOut(new PrintStream(baos));
  //
  //    GrouperClient.main(GrouperClientUtils.splitTrim(
  //        "--operation=assignAttributesBatchWs --entry_0_attributeAssignType=group --entry_0_attributeAssignOperation=assign_attr " +
  //        "--entry_0_nameOfAttributeDefName=test:testAttributeAssignDefName --entry_0_ownerGroupName=test:groupTestAttrAssign "
  //        + " --paramName0=a --paramValue0=b",
  //        " "));
  //
  //    attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);
  //
  //    System.out.flush();
  //    output = new String(baos.toByteArray());
  //
  //    System.setOut(systemOut);
  //
  //    outputLines = GrouperClientUtils.splitTrim(output, "\n");
  //
  //    outputLine = outputLines[0];
  //
  //    matcher = pattern.matcher(outputLines[0]);
  //
  //    assertTrue(outputLine, matcher.matches());
  //    assertEquals(outputLine, "0", matcher.group(1));
  //    assertEquals(outputLine, "0", matcher.group(2));
  //    assertEquals(outputLine, "group", matcher.group(3));
  //    assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(4));
  //    assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(5));
  //    assertEquals(outputLine, "assign", matcher.group(6));
  //    assertEquals(outputLine, "3,4,5", matcher.group(7));
  //    assertEquals(outputLine, "T", matcher.group(8));
  //    assertEquals(outputLine, attributeAssign.getId(), matcher.group(9));
  //    assertEquals(outputLine, "F", matcher.group(10));
  //    assertEquals(outputLine, "F", matcher.group(11));
  //    assertEquals(outputLine, "F", matcher.group(12));
  //
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("action"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("delegatable"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        GrouperClientWs.mostRecentRequest.contains("params"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("values"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookup")
  //        && GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookup")
  //        && GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookup"));
  //
  //
  //    // ######################################################
  //    // attribute assign lookups
  //
  //    baos = new ByteArrayOutputStream();
  //    System.setOut(new PrintStream(baos));
  //
  //    attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, true);
  //
  //    String attributeAssignId = attributeAssign.getId();
  //
  //    GrouperClient.main(GrouperClientUtils.splitTrim(
  //        "--operation=assignAttributesBatchWs --entry_0_attributeAssignType=group --entry_0_attributeAssignOperation=remove_attr "
  //        + " --attributeAssignUuids=" + attributeAssign.getId(),
  //        " "));
  //
  //    attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, false);
  //
  //    assertNull("Should be deleted", attributeAssign);
  //
  //    System.out.flush();
  //    output = new String(baos.toByteArray());
  //
  //    System.setOut(systemOut);
  //
  //    outputLines = GrouperClientUtils.splitTrim(output, "\n");
  //
  //    outputLine = outputLines[0];
  //
  //    matcher = pattern.matcher(outputLines[0]);
  //
  //    assertTrue(outputLine, matcher.matches());
  //    assertEquals(outputLine, "0", matcher.group(1));
  //    assertEquals(outputLine, "0", matcher.group(2));
  //    assertEquals(outputLine, "group", matcher.group(3));
  //    assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(4));
  //    assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(5));
  //    assertEquals(outputLine, "assign", matcher.group(6));
  //    assertEquals(outputLine, "none", matcher.group(7));
  //    assertEquals(outputLine, "T", matcher.group(8));
  //    assertEquals(outputLine, attributeAssignId, matcher.group(9));
  //    assertEquals(outputLine, "T", matcher.group(10));
  //    assertEquals(outputLine, "T", matcher.group(11));
  //    assertEquals(outputLine, "F", matcher.group(12));
  //
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("action"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("delegatable"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("params"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("values"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookup")
  //        && !GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookup")
  //        && !GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookup"));
  //
  //    // ######################################################
  //    // attribute assign lookups custom tempplate
  //
  //    baos = new ByteArrayOutputStream();
  //    System.setOut(new PrintStream(baos));
  //
  //    attributeAssign = group.getAttributeDelegate().assignAttribute(attributeDefName).getAttributeAssign();
  //
  //    attributeAssignId = attributeAssign.getId();
  //
  //    GrouperClient.main(GrouperClientUtils.splitTrim(
  //        "--operation=assignAttributesBatchWs --entry_0_attributeAssignType=group --entry_0_attributeAssignOperation=remove_attr "
  //        + " --attributeAssignUuids=" + attributeAssign.getId() + " --outputTemplate=${wsAttributeAssign.attributeAssignType}$newline$",
  //        " "));
  //
  //    attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, false);
  //
  //    assertNull("Should be deleted", attributeAssign);
  //
  //    System.out.flush();
  //    output = new String(baos.toByteArray());
  //
  //    System.setOut(systemOut);
  //
  //    outputLines = GrouperClientUtils.splitTrim(output, "\n");
  //
  //    outputLine = GrouperClientUtils.trim(outputLines[0]);
  //
  //    assertEquals(outputLine, "group", outputLine);
  //
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("action"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("delegatable"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("params"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("values"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookup")
  //        && !GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookup")
  //        && !GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookup"));
  //
  //
  //    // ######################################################
  //    // attribute assign lookups
  //
  //    baos = new ByteArrayOutputStream();
  //    System.setOut(new PrintStream(baos));
  //
  //    attributeAssign = group.getAttributeDelegate().assignAttribute(attributeDefName).getAttributeAssign();
  //
  //    attributeAssignId = attributeAssign.getId();
  //
  //    GrouperClient.main(GrouperClientUtils.splitTrim(
  //        "--operation=assignAttributesBatchWs --entry_0_attributeAssignType=group --entry_0_attributeAssignOperation=remove_attr "
  //        + " --attributeAssignUuids=" + attributeAssign.getId() + " --actAsSubjectId=GrouperSystem",
  //        " "));
  //
  //    attributeAssign = group.getAttributeDelegate().retrieveAssignment("assign", attributeDefName, false, false);
  //
  //    assertNull("Should be deleted", attributeAssign);
  //
  //    System.out.flush();
  //    output = new String(baos.toByteArray());
  //
  //    System.setOut(systemOut);
  //
  //    outputLines = GrouperClientUtils.splitTrim(output, "\n");
  //
  //    outputLine = outputLines[0];
  //
  //    matcher = pattern.matcher(outputLines[0]);
  //
  //    assertTrue(outputLine, matcher.matches());
  //    assertEquals(outputLine, "0", matcher.group(1));
  //    assertEquals(outputLine, "0", matcher.group(2));
  //    assertEquals(outputLine, "group", matcher.group(3));
  //    assertEquals(outputLine, "test:groupTestAttrAssign", matcher.group(4));
  //    assertEquals(outputLine, "test:testAttributeAssignDefName", matcher.group(5));
  //    assertEquals(outputLine, "assign", matcher.group(6));
  //    assertEquals(outputLine, "none", matcher.group(7));
  //    assertEquals(outputLine, "T", matcher.group(8));
  //    assertEquals(outputLine, attributeAssignId, matcher.group(9));
  //    assertEquals(outputLine, "T", matcher.group(10));
  //    assertEquals(outputLine, "T", matcher.group(11));
  //    assertEquals(outputLine, "F", matcher.group(12));
  //
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("action"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("assignmentEnabledTime"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("assignmentDisabledTime"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("assignmentNotes"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        GrouperClientWs.mostRecentRequest.contains("attributeAssignOperation"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("attributeAssignValueOperation"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        GrouperClientWs.mostRecentRequest.contains("attributeAssignType"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("clientVersion"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("delegatable"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("includeGroupDetail"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("includeSubjectDetail"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("params"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("subjectAttributeNames"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("values"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        GrouperClientWs.mostRecentRequest.contains("wsAttributeAssignLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsAttributeDefNameLookup")
  //        && !GrouperClientWs.mostRecentRequest.contains("test:testAttributeAssignDefName"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeAssignLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerAttributeDefLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerGroupLookup")
  //        && !GrouperClientWs.mostRecentRequest.contains("test:groupTestAttrAssign"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipAnyLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerMembershipLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerStemLookup"));
  //    assertTrue(GrouperClientWs.mostRecentRequest,
  //        !GrouperClientWs.mostRecentRequest.contains("wsOwnerSubjectLookup"));



    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testFindAttributeDefNamesServiceRole() throws Exception {

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));
    String output = null;
    String[] outputLines = null;
    Pattern pattern = null;
    Matcher matcher = null;
    try {

      GrouperSession grouperSession = GrouperSession.startRootSession();

      AttributeDefName jiraService = null;
      AttributeDefName confluenceService = null;
      try {

        //create three services, one directly in, one hierarchical, one the user is not in
        AttributeDef jiraServiceDef = new AttributeDefSave(grouperSession)
          .assignCreateParentStemsIfNotExist(true).assignAttributeDefType(AttributeDefType.service)
          .assignName("apps:jira:jiraServiceDefinition").assignToStem(true).save();

        jiraService = new AttributeDefNameSave(grouperSession, jiraServiceDef)
          .assignCreateParentStemsIfNotExist(true)
          .assignName("apps:jira:jiraService").assignDisplayExtension("Central IT production Jira issue tracker").save();

        //jira group
        Group jiraGroup = new GroupSave(grouperSession)
          .assignName("apps:jira:groups:admins").assignCreateParentStemsIfNotExist(true).save();

        jiraGroup.revokePriv(SubjectFinder.findAllSubject(), AccessPrivilege.READ);
        jiraGroup.grantPriv(SubjectTestHelper.SUBJ5, AccessPrivilege.READ);
        jiraGroup.grantPriv(SubjectTestHelper.SUBJ6, AccessPrivilege.ADMIN);

        jiraGroup.addMember(SubjectTestHelper.SUBJ0);
        jiraGroup.addMember(SubjectTestHelper.SUBJ1);

        //the jira group has the jira service tag
        Stem jiraStem = StemFinder.findByUuid(grouperSession, jiraGroup.getStemId(), true);
        jiraStem.getAttributeDelegate().assignAttribute(jiraService);

        AttributeDef confluenceServiceDef = new AttributeDefSave(grouperSession)
          .assignCreateParentStemsIfNotExist(true).assignAttributeDefType(AttributeDefType.service)
          .assignName("apps:confluence:confluenceServiceDefinition").assignToStem(true).save();

        confluenceService = new AttributeDefNameSave(grouperSession, confluenceServiceDef)
          .assignCreateParentStemsIfNotExist(true)
          .assignName("apps:confluence:confluenceService").assignDisplayExtension("Central IT production Confluence wiki").save();

        Group confluenceGroup = new GroupSave(grouperSession)
          .assignName("apps:confluence:editors").assignCreateParentStemsIfNotExist(true).save();

        confluenceGroup.revokePriv(SubjectFinder.findAllSubject(), AccessPrivilege.READ);
        confluenceGroup.grantPriv(SubjectTestHelper.SUBJ6, AccessPrivilege.READ);
        confluenceGroup.grantPriv(SubjectTestHelper.SUBJ7, AccessPrivilege.ADMIN);
        confluenceGroup.grantPriv(SubjectTestHelper.SUBJ8, AccessPrivilege.ADMIN);

        confluenceGroup.addMember(SubjectTestHelper.SUBJ1);
        confluenceGroup.addMember(SubjectTestHelper.SUBJ2);

        //the confluence folder has the confluence service tag
        Stem confluenceFolder = StemFinder.findByName(grouperSession, "apps:confluence", true);
        confluenceFolder.getAttributeDelegate().assignAttribute(confluenceService);

      } finally {
        GrouperSession.stopQuietly(grouperSession);
      }

      // ##################### subject 0 is in the jira service...

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=findAttributeDefNamesWs --scope=% --serviceRole=user --subjectId=" + SubjectTestHelper.SUBJ0_ID , " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      //Index ${index}: name: ${wsAttributeDefName.name}, displayName: ${wsAttributeDefName.displayName}$newline$
      pattern = Pattern.compile("^Index (\\d+): name: (.*), displayName: (.*)$");
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], jiraService.getName(), matcher.group(2));
      assertEquals(outputLines[0], jiraService.getDisplayName(), matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("serviceRole"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("subjectId"));

      // ##################### subject 1 is in the jira and confluence service...

      baos = new ByteArrayOutputStream();

      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=findAttributeDefNamesWs --scope=% --serviceRole=user --subjectIdentifier=" + SubjectTestHelper.SUBJ1_IDENTIFIER + " --subjectSource=jdbc" , " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(2, outputLines.length);

      //Index ${index}: name: ${wsAttributeDefName.name}, displayName: ${wsAttributeDefName.displayName}$newline$
      pattern = Pattern.compile("^Index (\\d+): name: (.*), displayName: (.*)$");
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], confluenceService.getName(), matcher.group(2));
      assertEquals(outputLines[0], confluenceService.getDisplayName(), matcher.group(3));

      matcher = pattern.matcher(outputLines[1]);
      assertTrue(outputLines[1], matcher.matches());

      assertEquals(outputLines[1], "1", matcher.group(1));
      assertEquals(outputLines[1], jiraService.getName(), matcher.group(2));
      assertEquals(outputLines[1], jiraService.getDisplayName(), matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("serviceRole"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("subjectIdentifier"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("subjectId"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("subjectSourceId"));



    } finally {
      System.setOut(systemOut);
    }

  }
  
  /**
   * @throws Exception
   */
  public void testAttributeDefSave() throws Exception {

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));
    String output = null;
    String[] outputLines = null;
    Pattern pattern = null;
    Matcher matcher = null;
    try {

      GrouperSession grouperSession = GrouperSession.startRootSession();

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=attributeDefSaveWs --name=aStem:newAttributeDef --createParentStemsIfNotExist=T --attributeDefType=attr --valueType=string --assignToAttributeDef=T",
          " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      pattern = Pattern.compile("^Success: (T|F): code: ([A-Z_]+): (.*+)$");
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "T", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS_INSERTED", matcher.group(2));
      assertEquals(outputLines[0], "aStem:newAttributeDef", matcher.group(3));

      // ##########################
      //try with name with slash

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=attributeDefSaveWs --name=aStem:newAttributeDef0/1 --createParentStemsIfNotExist=T --attributeDefType=attr --valueType=string --assignToAttributeDef=T",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "T", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS_INSERTED", matcher.group(2));
      assertEquals(outputLines[0], "aStem:newAttributeDef0/1", matcher.group(3));

      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("saveMode"));

      //########################################################
      // run again with save mode  --saveMode=INSERT_OR_UPDATE|INSERT|UPDATE

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=attributeDefSaveWs --name=aStem:newAttributeDef0/1 --createParentStemsIfNotExist=T "
              + "--attributeDefType=attr --valueType=string --assignToAttributeDef=T --saveMode=UPDATE",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "T", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS_NO_CHANGES_NEEDED", matcher.group(2));
      assertEquals(outputLines[0], "aStem:newAttributeDef0/1", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("saveMode")
              && GrouperClientWs.mostRecentRequest.contains("\"UPDATE\""));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookup"));

      //########################################################
      // run again with lookup  --attributeDefLookupName=aStem:newAttributeDef

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=attributeDefSaveWs --name=aStem:newAttributeDef --createParentStemsIfNotExist=T "
              + "--attributeDefLookupName=aStem:newAttributeDef --attributeDefType=attr --valueType=string --assignToAttributeDef=T",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "T", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS_NO_CHANGES_NEEDED", matcher.group(2));
      assertEquals(outputLines[0], "aStem:newAttributeDef", matcher.group(3));

      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("saveMode"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("createParentStemsIfNotExist"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookup"));

      //########################################################
      // run again with lookup  --attributeDefLookupUuid=aStem:newAttributeDef

      AttributeDef newAttributeDef = AttributeDefFinder
          .findByName("aStem:newAttributeDef", true);

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=attributeDefSaveWs --name=aStem:newAttributeDef --createParentStemsIfNotExist=T "
              + "--attributeDefLookupUuid=" + newAttributeDef.getId()
              + " --attributeDefType=attr --valueType=string --assignToAttributeDef=T",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "T", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS_NO_CHANGES_NEEDED", matcher.group(2));
      assertEquals(outputLines[0], "aStem:newAttributeDef", matcher.group(3));

      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("description"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookup")
              && GrouperClientWs.mostRecentRequest.contains(newAttributeDef.getId()));

      //########################################################
      // run again with lookup  --attributeDefLookupUuid=aStem:newAttributeDef

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=attributeDefSaveWs --name=aStem:newAttributeDef --createParentStemsIfNotExist=T "
              + "--attributeDefLookupIdIndex=" + newAttributeDef.getIdIndex()
              + " --attributeDefType=attr --valueType=string --assignToAttributeDef=T",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "T", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS_NO_CHANGES_NEEDED", matcher.group(2));
      assertEquals(outputLines[0], "aStem:newAttributeDef", matcher.group(3));

      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("description"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookup")
              && GrouperClientWs.mostRecentRequest
                  .contains(newAttributeDef.getIdIndex().toString()));

      //########################################################
      // run again with --description=theDescription

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=attributeDefSaveWs --name=aStem:newAttributeDef --createParentStemsIfNotExist=T "
              + "--description=theDescription --attributeDefType=attr --valueType=string --assignToAttributeDef=T",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "T", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS_UPDATED", matcher.group(2));
      assertEquals(outputLines[0], "aStem:newAttributeDef", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"description\"")
              && GrouperClientWs.mostRecentRequest.contains("theDescription"));

      //########################################################
      // run again with --idIndex=12345

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=attributeDefSaveWs --name=aStem:newAttributeDef5 --idIndex=12345 --createParentStemsIfNotExist=T "
              + "--description=theDescription --attributeDefType=attr --valueType=string --assignToAttributeDef=T",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "T", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS_INSERTED", matcher.group(2));
      assertEquals(outputLines[0], "aStem:newAttributeDef5", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("\"idIndex\"")
              && GrouperClientWs.mostRecentRequest.contains("12345"));
      assertTrue(GrouperClientWs.mostRecentResponse,
          GrouperClientWs.mostRecentResponse.contains("\"idIndex\"12345"));

      //########################################################
      // run again with --actAsSubjectId=subjId

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=attributeDefSaveWs --name=aStem:newAttributeDef --actAsSubjectId=GrouperSystem --createParentStemsIfNotExist=T "
              + "--description=theDescription --attributeDefType=attr --valueType=string --assignToAttributeDef=T",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "T", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS_NO_CHANGES_NEEDED", matcher.group(2));
      assertEquals(outputLines[0], "aStem:newAttributeDef", matcher.group(3));

      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("subjectIdentifier"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("actAsSubjectLookup\":\"subjectId"));

      //########################################################
      // run again with --actAsSubjectIdentifier=subjId

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=attributeDefSaveWs --name=aStem:newAttributeDef --actAsSubjectIdentifier=GrouperSystem --createParentStemsIfNotExist=T "
              + "--description=theDescription --attributeDefType=attr --valueType=string --assignToAttributeDef=T",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "T", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS_NO_CHANGES_NEEDED", matcher.group(2));
      assertEquals(outputLines[0], "aStem:newAttributeDef", matcher.group(3));

      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("sourceId"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest
              .contains("actAsSubjectLookup\":\"subjectIdentifier"));

      //########################################################
      // run again with --actAsSubjectSource=subjId

      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=attributeDefSaveWs --name=aStem:newAttributeDef --actAsSubjectIdentifier=GrouperSystem"
              + " --actAsSubjectSource=g:isa --createParentStemsIfNotExist=T"
              + " --description=theDescription --attributeDefType=attr --valueType=string --assignToAttributeDef=T",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "T", matcher.group(1));
      assertEquals(outputLines[0], "SUCCESS_NO_CHANGES_NEEDED", matcher.group(2));
      assertEquals(outputLines[0], "aStem:newAttributeDef", matcher.group(3));

      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("somethingelse"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("subjectSourceId")
              && GrouperClientWs.mostRecentRequest.contains("g:isa"));

    } finally {
      System.setOut(systemOut);
    }

  }
  
  /**
   * @throws Exception
   */
  public void testAttributeDefDelete() throws Exception {

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));
    String output = null;
    String[] outputLines = null;
    Pattern pattern = null;
    Matcher matcher = null;
    try {

      GrouperSession grouperSession = GrouperSession.startRootSession();

      AttributeDef testAttributeDef1 = new AttributeDefSave(grouperSession)
          .assignName("aStem:newAttributeDef")
          .assignAttributeDefType(AttributeDefType.perm).assignToGroup(true)
          .assignToEffMembership(true).save();

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=attributeDefDeleteWs --attributeDefNames=aStem:newAttributeDef,aStem:newAttributeDef2",
          " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(2, outputLines.length);

      pattern = Pattern.compile("^Index (\\d+): success: (T|F): code: ([A-Z_]+): (.*+)$");
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "T", matcher.group(2));
      assertEquals(outputLines[0], "SUCCESS", matcher.group(3));
      assertEquals(outputLines[0], "aStem:newAttributeDef", matcher.group(4));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals(outputLines[1], "1", matcher.group(1));
      assertEquals(outputLines[1], "T", matcher.group(2));
      assertEquals(outputLines[1], "SUCCESS_ATTRIBUTE_DEF_NOT_FOUND", matcher.group(3));
      assertEquals(outputLines[1], "aStem:newAttributeDef2", matcher.group(4));

      // ##########################
      // [--txType=NONE|READ_WRITE_NEW]
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=attributeDefDeleteWs --attributeDefNames=aStem:newAttributeDef,aStem:newAttributeDef2 --txType=READ_WRITE_NEW",
          " "));

      System.out.flush();
      output = new String(baos.toByteArray());

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(2, outputLines.length);

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "T", matcher.group(2));
      assertEquals(outputLines[0], "SUCCESS_ATTRIBUTE_DEF_NOT_FOUND", matcher.group(3));
      assertEquals(outputLines[0], "aStem:newAttributeDef", matcher.group(4));

      matcher = pattern.matcher(outputLines[1]);

      assertTrue(outputLines[1], matcher.matches());

      assertEquals(outputLines[1], "1", matcher.group(1));
      assertEquals(outputLines[1], "T", matcher.group(2));
      assertEquals(outputLines[1], "SUCCESS_ATTRIBUTE_DEF_NOT_FOUND", matcher.group(3));
      assertEquals(outputLines[1], "aStem:newAttributeDef2", matcher.group(4));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("txType")
              && GrouperClientWs.mostRecentRequest.contains("READ_WRITE_NEW"));

    } finally {
      System.setOut(systemOut);
    }

  }
  
  /**
   * @throws Exception
   */
  public void testFindAttributeDefs() throws Exception {

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));
    String output = null;
    String[] outputLines = null;
    Pattern pattern = null;
    Matcher matcher = null;
    try {

      GrouperSession grouperSession = GrouperSession.startRootSession();

      AttributeDef attributeDef1 = new AttributeDefSave(grouperSession)
          .assignName("aStem1:newAttributeDef1")
          .assignCreateParentStemsIfNotExist(true)
          .assignAttributeDefType(AttributeDefType.perm).assignToGroup(true)
          .assignDescription("attribute def 1").save();

      AttributeDef attributeDef2 = new AttributeDefSave(grouperSession)
          .assignName("aStem1:newAttributeDef2")
          .assignCreateParentStemsIfNotExist(true)
          .assignAttributeDefType(AttributeDefType.perm).assignToGroup(true)
          .assignDescription("attribute def 2").save();

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=findAttributeDefsWs --attributeDefNames=aStem1:newAttributeDef1,aStem1:newAttributeDef2 --scope=aStem",
          " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(2, outputLines.length);

      //Index ${index}: name: ${wsAttributeDef.name}, description: ${wsAttributeDef.description}$newline$
      pattern = Pattern.compile("^Index (\\d+): name: (.*), description: (.*)$");
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "aStem1:newAttributeDef1", matcher.group(2));
      assertEquals(outputLines[0], "attribute def 1", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("scope"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("splitScope"));

      // ############################
      //[--splitScope=T|F]
      baos = new ByteArrayOutputStream();

      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=findAttributeDefsWs --attributeDefNames=aStem1:newAttributeDef1,aStem1:newAttributeDef2 --scope=aStem --splitScope=T",
          " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(2, outputLines.length);

      //Index ${index}: name: ${wsAttributeDef.name}, description: ${wsAttributeDef.description}$newline$
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "aStem1:newAttributeDef1", matcher.group(2));
      assertEquals(outputLines[0], "attribute def 1", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("scope"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("splitScope"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));

      // ############################
      //[--attributeDefNames=a:b]
      baos = new ByteArrayOutputStream();

      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=findAttributeDefsWs --attributeDefNames=aStem1:newAttributeDef1,aStem1:newAttributeDef2",
          " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(2, outputLines.length);

      //Index ${index}: name: ${wsAttributeDef.name}, description: ${wsAttributeDef.description}$newline$
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "aStem1:newAttributeDef1", matcher.group(2));
      assertEquals(outputLines[0], "attribute def 1", matcher.group(3));

      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("scope"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("splitScope"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));

      // ############################
      //[--attributeDefUuids=12ab,34cd]
      baos = new ByteArrayOutputStream();

      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=findAttributeDefsWs --attributeDefUuids=" + attributeDef1.getId()
              + "," + attributeDef2.getId(),
          " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(2, outputLines.length);

      //Index ${index}: name: ${wsAttributeDef.name}, description: ${wsAttributeDef.description}$newline$
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "aStem1:newAttributeDef1", matcher.group(2));
      assertEquals(outputLines[0], "attribute def 1", matcher.group(3));

      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("scope"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("splitScope"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));

      // ############################
      //[--attributeDefIdIndexes=12,34]
      baos = new ByteArrayOutputStream();

      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=findAttributeDefsWs --attributeDefIdIndexes="
              + attributeDef1.getIdIndex() + "," + attributeDef2.getIdIndex(),
          " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(2, outputLines.length);

      //Index ${index}: name: ${wsAttributeDef.name}, description: ${wsAttributeDef.description}$newline$
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "aStem1:newAttributeDef1", matcher.group(2));
      assertEquals(outputLines[0], "attribute def 1", matcher.group(3));

      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("scope"));
      assertFalse(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("splitScope"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));

      // ############################
      //[--sortString=name|extension|displayExtension] [--ascending=T|F] [--pageNumber=2] [--pageSize=50]
      baos = new ByteArrayOutputStream();

      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=findAttributeDefsWs --attributeDefNames=aStem1:newAttributeDef1,aStem1:newAttributeDef2 --scope=aStem --sortString=extension --ascending=T --pageNumber=2 --pageSize=1",
          " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      //Index ${index}: name: ${wsAttributeDef.name}, description: ${wsAttributeDef.description}$newline$
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "aStem1:newAttributeDef2", matcher.group(2));
      assertEquals(outputLines[0], "attribute def 2", matcher.group(3));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("wsAttributeDefLookups"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("sortString"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("ascending"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("pageNumber"));
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("pageSize"));

    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testSendMessage() throws Exception {

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));
    String output = null;
    String[] outputLines = null;
    Pattern pattern = null;
    Matcher matcher = null;
    try {

      GrouperSession grouperSession = GrouperSession.startRootSession();
      GrouperBuiltinMessagingSystem.createQueue("test_queue");
      GrouperBuiltinMessagingSystem.allowSendToQueue("test_queue", SubjectTestHelper.SUBJ0);
      GrouperBuiltinMessagingSystem.allowReceiveFromQueue("test_queue", SubjectTestHelper.SUBJ0);

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=sendMessageWs --queueType=queue --queueOrTopicName=test_queue --messageBody0=Test_body --messageBody1=Another_test_body --actAsSubjectId="+SubjectTestHelper.SUBJ0.getId(),
          " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      pattern = Pattern.compile("^Success: (T|F), queueOrTopicName: (.*), numberOfMessages: (.*)$");
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "T", matcher.group(1));
      assertEquals(outputLines[0], "test_queue", matcher.group(2));
      assertEquals(outputLines[0], "2", matcher.group(3));
      
      assertTrue(GrouperClientWs.mostRecentRequest,
              GrouperClientWs.mostRecentRequest.contains("queueType"));
     assertFalse(GrouperClientWs.mostRecentRequest,
              GrouperClientWs.mostRecentRequest.contains("messageSystemName"));

    } finally {
      System.setOut(systemOut);
    }

  }
  
  /**
   * @throws Exception
   */
  public void testReceiveMessage() throws Exception {

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));
    String output = null;
    String[] outputLines = null;
    Pattern pattern = null;
    Matcher matcher = null;
    try {

      GrouperSession grouperSession = GrouperSession.startRootSession();
      GrouperBuiltinMessagingSystem.createQueue("test_queue");
      GrouperBuiltinMessagingSystem.allowSendToQueue("test_queue", SubjectTestHelper.SUBJ0);
      GrouperBuiltinMessagingSystem.allowReceiveFromQueue("test_queue", SubjectTestHelper.SUBJ0);
      
      GrouperSession.start(SubjectTestHelper.SUBJ0);
      GrouperMessagingEngine.send(new GrouperMessageSendParam().assignQueueOrTopicName("test_queue")
    	        .addMessageBody("message body").assignQueueType(GrouperMessageQueueType.queue));

      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=receiveMessageWs --queueOrTopicName=test_queue --actAsSubjectId="+SubjectTestHelper.SUBJ0.getId(),
          " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      pattern = Pattern.compile("^Index ([0-9]+): success: (T|F), queueOrTopicName: (.*), messageBody: (.*)$");
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "T", matcher.group(2));
      assertEquals(outputLines[0], "test_queue", matcher.group(3));
      assertEquals(outputLines[0], "message body", matcher.group(4));
      
      // ############################
      // max messages to receive at once
      GrouperMessagingEngine.send(new GrouperMessageSendParam().assignQueueOrTopicName("test_queue")
  	        .addMessageBody("message body").assignQueueType(GrouperMessageQueueType.queue));
      GrouperMessagingEngine.send(new GrouperMessageSendParam().assignQueueOrTopicName("test_queue")
    	        .addMessageBody("another message body").assignQueueType(GrouperMessageQueueType.queue));
      baos = new ByteArrayOutputStream();

      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
              "--operation=receiveMessageWs --queueOrTopicName=test_queue --maxMessagesToReceiveAtOnce=1 --actAsSubjectId="+SubjectTestHelper.SUBJ0.getId(),
              " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "0", matcher.group(1));
      assertEquals(outputLines[0], "T", matcher.group(2));
      assertEquals(outputLines[0], "test_queue", matcher.group(3));
      assertEquals(outputLines[0], "message body", matcher.group(4));

      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("maxMessagesToReceiveAtOnce"));

    } finally {
      System.setOut(systemOut);
    }

  }
  
  /**
   * @throws Exception
   */
  public void testAcknowledgeMessage() throws Exception {

    PrintStream systemOut = System.out;

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));
    String output = null;
    String[] outputLines = null;
    Pattern pattern = null;
    Matcher matcher = null;
    try {

      GrouperSession grouperSession = GrouperSession.startRootSession();
      GrouperBuiltinMessagingSystem.createQueue("test_queue");
      GrouperBuiltinMessagingSystem.allowSendToQueue("test_queue", SubjectTestHelper.SUBJ0);
      GrouperBuiltinMessagingSystem.allowReceiveFromQueue("test_queue", SubjectTestHelper.SUBJ0);
      
      GrouperBuiltinMessagingSystem.createQueue("test_another_queue");
      GrouperBuiltinMessagingSystem.allowSendToQueue("test_another_queue", SubjectTestHelper.SUBJ0);
      GrouperBuiltinMessagingSystem.allowReceiveFromQueue("test_another_queue", SubjectTestHelper.SUBJ0);
      
      GrouperSession.start(SubjectTestHelper.SUBJ0);
      GrouperMessagingEngine.send(new GrouperMessageSendParam().assignQueueOrTopicName("test_queue")
    	        .addMessageBody("message body").assignQueueType(GrouperMessageQueueType.queue));
      
      GrouperMessageReceiveResult grouperMessageReceiveResult = GrouperMessagingEngine.receive(new GrouperMessageReceiveParam().assignQueueName("test_queue"));
      
      GrouperMessage grouperMessage = grouperMessageReceiveResult.getGrouperMessages().iterator().next();

      // mark as processed
      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=acknowledgeMessageWs --queueOrTopicName=test_queue "
          + "--acknowledgeType=mark_as_processed --messageIds="+grouperMessage.getId()+" --actAsSubjectId="+SubjectTestHelper.SUBJ0.getId(),
          " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      pattern = Pattern.compile("^Success: (T|F), queueOrTopicName: (.*), numberOfMessages: (\\d+)$");
      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "T", matcher.group(1));
      assertEquals(outputLines[0], "test_queue", matcher.group(2));
      assertTrue(outputLines[0], Integer.valueOf(matcher.group(3)) >= 1);
      
      // ############################
      
      GrouperMessagingEngine.send(new GrouperMessageSendParam().assignQueueOrTopicName("test_queue")
  	        .addMessageBody("message test body").assignQueueType(GrouperMessageQueueType.queue));
    
      grouperMessageReceiveResult = GrouperMessagingEngine.receive(new GrouperMessageReceiveParam().assignQueueName("test_queue"));
      grouperMessage = grouperMessageReceiveResult.getGrouperMessages().iterator().next();

      baos = new ByteArrayOutputStream();

      System.setOut(new PrintStream(baos));

      GrouperClient.main(GrouperClientUtils.splitTrim(
              "--operation=acknowledgeMessageWs --queueOrTopicName=test_queue "
              + "--acknowledgeType=send_to_another_queue --anotherQueueOrTopicName=test_another_queue --anotherQueueType=queue"
              + " --messageIds="+grouperMessage.getId()+" --actAsSubjectId="+SubjectTestHelper.SUBJ0.getId(),
              " "));
      System.out.flush();
      output = new String(baos.toByteArray());

      systemOut.println(output);

      System.setOut(systemOut);

      outputLines = GrouperClientUtils.splitTrim(output, "\n");

      assertEquals(1, outputLines.length);

      matcher = pattern.matcher(outputLines[0]);

      assertTrue(outputLines[0], matcher.matches());

      assertEquals(outputLines[0], "T", matcher.group(1));
      assertEquals(outputLines[0], "test_queue", matcher.group(2));
      assertTrue(outputLines[0], Integer.valueOf(matcher.group(3)) == 1); // one message is received only because maxMessagesToReceiveAtOnce is set to 1
      
    } finally {
      System.setOut(systemOut);
    }

  }

  /**
   * @throws Exception
   */
  public void testFindExternalSubjects() throws Exception {
  
    // set some stuff to query
    GrouperSession grouperSession = GrouperSession.startRootSession();

    //make sure you have jabber enabled in grouper.properties
    ExternalSubjectSave assignName = new ExternalSubjectSave(grouperSession).assignEmail("a@idp.example.edu")
        .assignIdentifier("a_ident@idp.example.edu").assignName("Some Name");
    
    boolean hasJabber = StringUtils.equals(GrouperConfig.retrieveConfig().propertyValueString("externalSubjects.attributes.jabber.systemName"), "jabber");

    if (hasJabber) {
      assignName.addAttribute("jabber", "a_jabber@idp.example.edu");
    }
    ExternalSubject externalSubject = assignName.save();
    
  
    PrintStream systemOut = System.out;
  
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));
  
    try {
  
      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=findExternalSubjectsWs --identifier=a_ident@idp.example.edu",
                  " "));
      System.out.flush();
      String output = new String(baos.toByteArray());
  
      System.setOut(systemOut);
  
      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");
  
      Pattern pattern = Pattern
          .compile("^Index (\\d+): identifier: (.+): name: (.+)$");
      Matcher matcher = pattern.matcher(outputLines[0]);
  
      assertEquals(output, 1, outputLines.length);
      assertTrue(outputLines[0], matcher.matches());
  
      assertEquals(output, "0", matcher.group(1));
      assertEquals(output, "a_ident@idp.example.edu", matcher.group(2));
      assertEquals(output, "Some Name", matcher.group(3));
  
      // #####################################################
      // run with invalid args
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));
  
      // test a command line template
      try {
        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=findExternalSubjectsWs --identifier=a_ident@idp.example.edu --ousdfsdfate=${index}",
                    " "));
      } catch (Exception e) {
        assertTrue(e.getMessage(), e.getMessage().contains("ousdfsdfate"));
      }
      System.out.flush();
  
      System.setOut(systemOut);
  
      // #####################################################
      // run with custom template
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));
  
      // test a command line template
      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=findExternalSubjectsWs --identifier=a_ident@idp.example.edu --outputTemplate=${index}",
                  " "));
  
      System.out.flush();
  
      output = new String(baos.toByteArray());
  
      System.setOut(systemOut);
  
      assertEquals("0", output);
  
      // #####################################################
      // run again, with params
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));
  
      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=findExternalSubjectsWs --identifier=a_ident@idp.example.edu --paramName0=whatever --paramValue0=someValue",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());
  
      System.setOut(systemOut);
  
      outputLines = GrouperClientUtils.splitTrim(output, "\n");
  
      matcher = pattern.matcher(outputLines[0]);
  
      assertEquals(output, 1, outputLines.length);
      assertTrue(outputLines[0], matcher.matches());
  
      assertEquals(output, "0", matcher.group(1));
      assertEquals(output, "a_ident@idp.example.edu", matcher.group(2));
      assertEquals(output, "Some Name", matcher.group(3));
  
      assertTrue(GrouperClientWs.mostRecentRequest.contains("whatever")
          && GrouperClientWs.mostRecentRequest.contains("someValue"));
    
  
    } finally {
      System.setOut(systemOut);
    }
  
  }

  /**
   * @throws Exception
   */
  public void testExternalSubjectDelete() throws Exception {
    
    // set some stuff to query
    GrouperSession grouperSession = GrouperSession.startRootSession();

    //make sure you have jabber enabled in grouper.properties
    ExternalSubjectSave assignName = new ExternalSubjectSave(grouperSession).assignEmail("a@idp.example.edu")
        .assignIdentifier("a_ident@idp.example.edu").assignName("Some Name");
    
    boolean hasJabber = StringUtils.equals(GrouperConfig.retrieveConfig().propertyValueString("externalSubjects.attributes.jabber.systemName"), "jabber");

    if (hasJabber) {
      assignName.addAttribute("jabber", "a_jabber@idp.example.edu");
    }
    ExternalSubject externalSubject = assignName.save();

    
    PrintStream systemOut = System.out;
  
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(baos));
  
    try {
  
      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=externalSubjectDeleteWs --identifiers=a_ident@idp.example.edu", " "));
      System.out.flush();
      String output = new String(baos.toByteArray());
  
      System.setOut(systemOut);
  
      String[] outputLines = GrouperClientUtils.splitTrim(output, "\n");
  
      Pattern pattern = Pattern
          .compile("^Index (\\d+): success: T: code: ([A-Z_]+): identifier: (.+): name:\\s?(.*)$");
      Matcher matcher = pattern.matcher(outputLines[0]);
  
      assertTrue(outputLines[0], matcher.matches());
  
      assertEquals("0", matcher.group(1));
      assertEquals(output, "SUCCESS", matcher.group(2));
      assertEquals("a_ident@idp.example.edu", matcher.group(3));
      assertEquals("Some Name", matcher.group(4));
  
      // #####################################################
      // run again, should be already deleted
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));
  
      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=externalSubjectDeleteWs --identifiers=a_ident@idp.example.edu", " "));
      System.out.flush();
      output = new String(baos.toByteArray());
  
      System.setOut(systemOut);
  
      outputLines = GrouperClientUtils.splitTrim(output, "\n");
  
      matcher = pattern.matcher(outputLines[0]);
  
      assertTrue(outputLines[0], matcher.matches());
  
      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS_EXTERNAL_SUBJECT_NOT_FOUND", matcher.group(2));
      assertEquals("a_ident@idp.example.edu", matcher.group(3));
      assertTrue(matcher.group(4), StringUtils.isBlank(matcher.group(4)));
  
      // #####################################################
      // run with invalid args
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));
  
      // test a command line template
      try {
        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=externalSubjectDeleteWs --identifiers=a_ident@idp.example.edu --ousdfsdfate=${index}",
                    " "));
      } catch (Exception e) {
        assertTrue(e.getMessage(), e.getMessage().contains("ousdfsdfate"));
      }
      System.out.flush();
  
      System.setOut(systemOut);
  
      // #####################################################
      // run with custom template
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));
  
      // test a command line template
      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=externalSubjectDeleteWs --identifiers=a_ident@idp.example.edu --outputTemplate=${index}",
                  " "));
  
      System.out.flush();
  
      output = new String(baos.toByteArray());
  
      System.setOut(systemOut);
  
      assertEquals("0", output);
  
      // #####################################################
      // run again, with txType
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));
  
      GrouperClient.main(GrouperClientUtils.splitTrim(
          "--operation=externalSubjectDeleteWs --identifiers=a_ident@idp.example.edu --txType=NONE",
          " "));
      System.out.flush();
      output = new String(baos.toByteArray());
  
      System.setOut(systemOut);
  
      outputLines = GrouperClientUtils.splitTrim(output, "\n");
  
      matcher = pattern.matcher(outputLines[0]);
  
      assertTrue(outputLines[0], matcher.matches());
  
      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS_EXTERNAL_SUBJECT_NOT_FOUND", matcher.group(2));
      assertEquals("a_ident@idp.example.edu", matcher.group(3));
      assertTrue(matcher.group(4), StringUtils.isBlank(matcher.group(4)));
  
      assertTrue(GrouperClientWs.mostRecentRequest,
          GrouperClientWs.mostRecentRequest.contains("txType")
              && GrouperClientWs.mostRecentRequest.contains("NONE"));
  
      // #####################################################
      // run again, with params
      baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));
  
      GrouperClient
          .main(GrouperClientUtils
              .splitTrim(
                  "--operation=externalSubjectDeleteWs --identifiers=a_ident@idp.example.edu --paramName0=whatever --paramValue0=someValue",
                  " "));
      System.out.flush();
      output = new String(baos.toByteArray());
  
      System.setOut(systemOut);
  
      outputLines = GrouperClientUtils.splitTrim(output, "\n");
  
      matcher = pattern.matcher(outputLines[0]);
  
      assertTrue(outputLines[0], matcher.matches());
  
      assertEquals("0", matcher.group(1));
      assertEquals("SUCCESS_EXTERNAL_SUBJECT_NOT_FOUND", matcher.group(2));
      assertEquals("a_ident@idp.example.edu", matcher.group(3));
      assertTrue(matcher.group(4), StringUtils.isBlank(matcher.group(4)));
  
      assertTrue(GrouperClientWs.mostRecentRequest.contains("whatever")
          && GrouperClientWs.mostRecentRequest.contains("someValue"));
  
    } finally {
      System.setOut(systemOut);
    }
  
  }

  /**
     * @throws Exception
     */
    public void testExternalSubjectSave() throws Exception {
  //sdf
      PrintStream systemOut = System.out;
  
      ByteArrayOutputStream baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));
      String output = null;
      String[] outputLines = null;
      Pattern pattern = null;
      Matcher matcher = null;
      
      try {

        // ##########################
        //try with name with slash
  
        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));
  
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=externalSubjectSaveWs --identifier=b_ident@idp2.example2.edu --name=AnotherName --attributeName0=jabber --attributeValue0=b_jabber@idp2.example2.edu", " "));
        System.out.flush();
        output = new String(baos.toByteArray());
  
        System.setOut(systemOut);
  
        outputLines = GrouperClientUtils.splitTrim(output, "\n");
  
        pattern = Pattern.compile("^Success: T: code: ([A-Z_]+): identifier: (.+): name: (.+)$");
        matcher = pattern.matcher(outputLines[0]);
  
        assertTrue(outputLines[0], matcher.matches());
  
        assertEquals("SUCCESS_INSERTED", matcher.group(1));
        assertEquals("b_ident@idp2.example2.edu", matcher.group(2));
        assertEquals("AnotherName", matcher.group(3));
  
        // #####################################################
        // run again, should be already added
        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));
  
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=externalSubjectSaveWs --identifier=b_ident@idp2.example2.edu --name=AnotherName --attributeName0=jabber --attributeValue0=b_jabber@idp2.example2.edu", " "));
        System.out.flush();
        output = new String(baos.toByteArray());
  
        System.setOut(systemOut);
  
        outputLines = GrouperClientUtils.splitTrim(output, "\n");
  
        matcher = pattern.matcher(outputLines[0]);
  
        assertTrue(outputLines[0], matcher.matches());
  
        assertEquals("SUCCESS_NO_CHANGES_NEEDED", matcher.group(1));
        assertEquals("b_ident@idp2.example2.edu", matcher.group(2));
        assertEquals("AnotherName", matcher.group(3));
  
        // #####################################################
        // run with invalid args
        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));
  
        // test a command line template
        try {
          GrouperClient
              .main(GrouperClientUtils
                  .splitTrim(
                      "--operation=externalSubjectSaveWs --identifier=b_ident@idp2.example2.edu --name=AnotherName --attributeName0=jabber --attributeValue0=b_jabber@idp2.example2.edu --ousdfsdfate=${index}", 
                      " "));
        } catch (Exception e) {
          assertTrue(e.getMessage(), e.getMessage().contains("ousdfsdfate"));
        }
        System.out.flush();
  
        System.setOut(systemOut);
  
        // #####################################################
        // run with custom template
        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));
  
        // test a command line template
        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=externalSubjectSaveWs --identifier=b_ident@idp2.example2.edu --name=AnotherName --attributeName0=jabber --attributeValue0=b_jabber@idp2.example2.edu --outputTemplate=${index}", 
                    " "));
  
        System.out.flush();
  
        output = new String(baos.toByteArray());
  
        System.setOut(systemOut);
  
        assertEquals("0", output);
  
        // #####################################################
        // run again, with txType
        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));
  
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=externalSubjectSaveWs --identifier=b_ident@idp2.example2.edu --name=AnotherName --attributeName0=jabber --attributeValue0=b_jabber@idp2.example2.edu --txType=NONE", 
            " "));
            
        System.out.flush();
        output = new String(baos.toByteArray());
  
        System.setOut(systemOut);
  
        outputLines = GrouperClientUtils.splitTrim(output, "\n");
  
        matcher = pattern.matcher(outputLines[0]);
  
        assertTrue(outputLines[0], matcher.matches());
  
        assertEquals("SUCCESS_NO_CHANGES_NEEDED", matcher.group(1));
        assertEquals("b_ident@idp2.example2.edu", matcher.group(2));
        assertEquals("AnotherName", matcher.group(3));
  
        assertTrue(GrouperClientWs.mostRecentRequest,
            GrouperClientWs.mostRecentRequest.contains("txType")
                && GrouperClientWs.mostRecentRequest.contains("NONE")
                && !GrouperClientWs.mostRecentRequest
                    .contains("includeGroupDetail"));
  
        // #####################################################
        // run again, with saveMode
        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));
  
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=externalSubjectSaveWs --identifier=b_ident@idp2.example2.edu --name=AnotherName --attributeName0=jabber --attributeValue0=b_jabber@idp2.example2.edu --saveMode=UPDATE", 
            " "));
        System.out.flush();
        output = new String(baos.toByteArray());
  
        System.setOut(systemOut);
  
        outputLines = GrouperClientUtils.splitTrim(output, "\n");
  
        matcher = pattern.matcher(outputLines[0]);
  
        assertTrue(outputLines[0], matcher.matches());
  
        assertEquals("SUCCESS_NO_CHANGES_NEEDED", matcher.group(1));
        assertEquals("b_ident@idp2.example2.edu", matcher.group(2));
        assertEquals("AnotherName", matcher.group(3));
  
        assertTrue(GrouperClientWs.mostRecentRequest.contains("saveMode")
            && GrouperClientWs.mostRecentRequest.contains("UPDATE"));
  
        // #####################################################
        // run again, with params
        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));

        GrouperClient
            .main(GrouperClientUtils
                .splitTrim(
                    "--operation=externalSubjectSaveWs --identifier=b_ident@idp2.example2.edu --name=AnotherName --attributeName0=jabber --attributeValue0=b_jabber@idp2.example2.edu --paramName0=whatever --paramValue0=someValue", 
                    " "));
        System.out.flush();
        output = new String(baos.toByteArray());

        System.setOut(systemOut);

        outputLines = GrouperClientUtils.splitTrim(output, "\n");

        matcher = pattern.matcher(outputLines[0]);

        assertTrue(outputLines[0], matcher.matches());

        assertEquals("SUCCESS_NO_CHANGES_NEEDED", matcher.group(1));
        assertEquals("b_ident@idp2.example2.edu", matcher.group(2));
        assertEquals("AnotherName", matcher.group(3));

        assertTrue(GrouperClientWs.mostRecentRequest.contains("whatever")
            && GrouperClientWs.mostRecentRequest.contains("someValue"));

      } finally {
        System.setOut(systemOut);
      }
  
    }
    
    public void testGetAuditEntries() throws Exception {
      
      PrintStream systemOut = System.out;
      
      ByteArrayOutputStream baos = new ByteArrayOutputStream();
      System.setOut(new PrintStream(baos));
      String output = null;
      String[] outputLines = null;
      Pattern pattern = null;
      Matcher matcher = null;
      
      try {

        GrouperSession grouperSession = GrouperSession.startRootSession();
        
        
        Group group1 = new GroupSave(GrouperSession.staticGrouperSession()).assignSaveMode(SaveMode.INSERT_OR_UPDATE)
          .assignGroupNameToEdit("test:group113").assignName("test:group113").assignCreateParentStemsIfNotExist(true)
          .assignDescription("description").save();
        
        // look up by stem
        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));
  
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAuditEntriesWs --auditType=group --auditActionId=addGroup --stemUuid="+group1.getStemId(), " "));
        System.out.flush();
        output = new String(baos.toByteArray());
  
        System.setOut(systemOut);
  
        outputLines = GrouperClientUtils.splitTrim(output, "\n");
  
        pattern = Pattern.compile("^Success: T: code: ([A-Z_]+): actionName: (.+): auditCategory: (.+)$");
        matcher = pattern.matcher(outputLines[0]);
  
        assertTrue(outputLines[0], matcher.matches());
  
        assertEquals("SUCCESS", matcher.group(1));
        assertEquals("addGroup", matcher.group(2));
        assertEquals("group", matcher.group(3));
        
        assertTrue(GrouperClientWs.mostRecentRequest.contains("auditType")
            && GrouperClientWs.mostRecentRequest.contains("group"));
        
        assertTrue(GrouperClientWs.mostRecentRequest.contains("auditActionId")
            && GrouperClientWs.mostRecentRequest.contains("addGroup"));
        
        assertTrue(GrouperClientWs.mostRecentRequest.contains("uuid")
            && GrouperClientWs.mostRecentRequest.contains(group1.getStemId()));
        
        // look up by group
        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));
  
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAuditEntriesWs --auditType=group --auditActionId=addGroup --groupLookupUuid="+group1.getId(), " "));
        System.out.flush();
        output = new String(baos.toByteArray());
  
        System.setOut(systemOut);
  
        outputLines = GrouperClientUtils.splitTrim(output, "\n");
  
        pattern = Pattern.compile("^Success: T: code: ([A-Z_]+): actionName: (.+): auditCategory: (.+)$");
        matcher = pattern.matcher(outputLines[0]);
  
        assertTrue(outputLines[0], matcher.matches());
  
        assertEquals("SUCCESS", matcher.group(1));
        assertEquals("addGroup", matcher.group(2));
        assertEquals("group", matcher.group(3));
        
        assertTrue(GrouperClientWs.mostRecentRequest.contains("auditType")
            && GrouperClientWs.mostRecentRequest.contains("group"));
        
        assertTrue(GrouperClientWs.mostRecentRequest.contains("auditActionId")
            && GrouperClientWs.mostRecentRequest.contains("addGroup"));
        
        assertTrue(GrouperClientWs.mostRecentRequest.contains("uuid")
            && GrouperClientWs.mostRecentRequest.contains(group1.getId()));
        
        // look up by subject
        group1.addMember(SubjectTestHelper.SUBJ0, false);
        
        baos = new ByteArrayOutputStream();
        System.setOut(new PrintStream(baos));
  
        GrouperClient.main(GrouperClientUtils.splitTrim(
            "--operation=getAuditEntriesWs --auditType=memberId  --subjectId="+SubjectTestHelper.SUBJ0.getId(), " "));
        System.out.flush();
        output = new String(baos.toByteArray());
  
        System.setOut(systemOut);
  
        outputLines = GrouperClientUtils.splitTrim(output, "\n");
  
        pattern = Pattern.compile("^Success: T: code: ([A-Z_]+): actionName: (.+): auditCategory: (.+)$");
        matcher = pattern.matcher(outputLines[0]);
  
        assertTrue(outputLines[0], matcher.matches());
  
        assertEquals("SUCCESS", matcher.group(1));
        assertEquals("addGroupMembership", matcher.group(2));
        assertEquals("membership", matcher.group(3));
        
        assertTrue(GrouperClientWs.mostRecentRequest.contains("auditType")
            && GrouperClientWs.mostRecentRequest.contains("memberId"));
        
        assertTrue(GrouperClientWs.mostRecentRequest.contains("subjectId")
            && GrouperClientWs.mostRecentRequest.contains(SubjectTestHelper.SUBJ0.getId()));
        
      } finally {
        System.setOut(systemOut);
      }
      
    }
  
}
