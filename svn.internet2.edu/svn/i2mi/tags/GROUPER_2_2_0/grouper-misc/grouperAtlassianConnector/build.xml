
<project name="grouperAtlassianConnector" default="build" basedir=".">

  <!-- ant contrib allows conditionals in ant scripts -->
  <taskdef resource="net/sf/antcontrib/antcontrib.properties">
    <classpath>
      <pathelement location="${basedir}/lib/ant/ant-contrib.jar" />
    </classpath>
  </taskdef>

  <!-- 
  provides all environment variables as Ant properties prefixed by "env.". 
  For example, CLASSPATH would be accessible in Ant as ${env.CLASSPATH}. 
  -->
  <property environment="env" />
  
  <if><not><available file="build.properties" /></not>
    <then><copy file="build.example.properties" tofile="build.properties" /></then>
  </if> 
  
  <available file="build.properties" property="build.properties.exists" value="true"/>

  <fail message="Couldnt detect build.properties file, copy the build.example.properties to build.properties in the project base dir, and customize" unless="build.properties.exists" />
  <property file="build.properties" />
  
  <target name="build" description="full build" depends="init,clean,compile,jarPrepare,jar">
  </target>

  <target name="init">
    <tstamp />

    <property file="${basedir}/misc/version.properties"/>

    <property name="main.sourceDir" value="source" />

    <property name="main.confDir" value="conf" />

    <property name="main.lib" value="lib" />

    <property name="main.binDir" value="dist/bin" />

    <property name="main.outputDir" value="dist" />

    <property name="main.appName" value="grouperAtlassianConnector" />
    <property name="main.jarFile" value="${main.outputDir}/${main.appName}.jar" />

    <path id="main.classpath">
      <fileset dir="${main.lib}">
        <include name="**/*.jar" />
      </fileset>
    </path>

    <condition property="main.os" value="windows">
      <os family="windows" />
    </condition>
    <condition property="main.os" value="unix">
      <os family="unix" />
    </condition>

    <pathconvert targetos="${main.os}" property="main.theClasspath" refid="main.classpath" />
    
  </target>

  <target name="clean">
    <mkdir dir="${main.binDir}" />
    <delete dir="${main.binDir}" />
    <mkdir dir="${main.binDir}" />

  </target> 
  
  <target name="compile">
    <mkdir dir="${main.outputDir}" />
    <mkdir dir="${main.binDir}" />

    <javac  target="1.5"  source="1.5" 
      srcdir="${main.sourceDir}" destdir="${main.binDir}" classpath="${main.theClasspath}" debug="true" />
  </target>

  <target name="jarPrepare">
    <mkdir dir="${main.binDir}" />

    <copy todir="${main.binDir}">
      <fileset dir="${main.sourceDir}">
        <include name="**/*.java"/>      <!-- source -->
        <include name="**/*.txt"/>      <!-- txt -->
        <include name="**/*.html"/>      <!-- html -->
      </fileset>
    </copy>
  </target>

  <target name="jar">
    <tstamp>
        <format property="the.timestamp" pattern="yyyy/MM/dd HH:mm:ss" />
    </tstamp>
    <jar jarfile="${main.jarFile}" duplicate="fail">
      <fileset dir="misc">
        <include name="META-INF/*" />
      </fileset>
      <fileset dir="${main.binDir}" />
      <manifest>
        <attribute name="Built-By"                value="${user.name}"/>
        <attribute name="Implementation-Vendor"   value="Internet2"/>
        <attribute name="Implementation-Title"    value="${main.appName}"/>
        <attribute name="Implementation-Version"  value="${version}"/>
        <attribute name="Implementation-URL"      value="https://spaces.internet2.edu/display/Grouper/Grouper+Atlassian+connector"/>
        <attribute name="Build-Timestamp"         value="${the.timestamp}"/>
      </manifest>
     </jar>
    <echo message="Output is: dist/${main.appName}.jar" />
   </target>
  
  <target name="distPackage" description="build tar gz on internet2 box" depends="init,javadoc">

    <delete dir="doc" />

    <copy todir="${basedir}/../${main.appName}-${version}">
      <fileset dir="${basedir}/../${main.appName}" />
    </copy>
    
    <!-- this assumes that everything was checked out to the right place, and no other dirs exist -->
    <tar destfile="${basedir}/../${main.appName}-${version}.tar.gz" compression="gzip">
      <tarfileset dir="${basedir}/.." >
        <include name="${main.appName}-${version}/**"/>
      </tarfileset>
    </tar>            
    
  </target>

  <target name="distBinary" description="build tar gz on internet2 box" depends="init,clean,compile,jarPrepare,jar">
    <property name="binName" value="${main.appName}.binary-${version}" />
    <mkdir dir="dist/binary/${binName}"/>
    <copy todir="dist/binary/${binName}">    
      <fileset dir="dist">
        <include name="${main.appName}.jar"/>
      </fileset>
    </copy>
    <tar destfile="${basedir}/../${binName}.tar.gz" compression="gzip">
      <tarfileset dir="dist/binary" >
        <include name="${binName}/**"/>
      </tarfileset>
    </tar>            
  </target>
  
  <target name="javadoc" description="generate public api docs for users to javadoc/api" depends="init">
    <!-- Let's be sure we clear out old cruft first... -->
    <mkdir dir="javadoc/api" />
    <delete dir="javadoc/api" />
    <mkdir dir="javadoc/api" />
    <!-- header="&lt;script&gt;alert('whatever');&lt;/script&gt;" -->
    <javadoc destdir="javadoc/api" access="public"
      additionalparam="-notimestamp" >
      <packageset dir="src/java" defaultexcludes="yes">
        <include name="edu/internet2/middleware/${main.appName}/**" />

      </packageset>

      <link href="http://struts.apache.org/1.2.x/api/" />
      <link href="http://java.sun.com/j2ee/sdk_1.3/techdocs/api" />
      <link href="http://java.sun.com/j2se/1.4.2/docs/api" />

    </javadoc>
  </target>
  <target name="javadocInternal" description="generate public api docs for cvs to doc/api" depends="init">
    <!-- Let's be sure we clear out old cruft first... -->
    <mkdir dir="doc/api" />
    <delete dir="doc/api" />
    <mkdir dir="doc/api" />
    <!-- header="&lt;script&gt;alert('whatever');&lt;/script&gt;" -->
    <javadoc destdir="doc/api" access="public"
      additionalparam="-notimestamp" >
      <packageset dir="src" defaultexcludes="yes">
        <include name="edu/internet2/middleware/${main.appName}/**" />

      </packageset>

      <link href="http://struts.apache.org/1.2.x/api/" />
      <link href="http://java.sun.com/j2ee/sdk_1.3/techdocs/api" />
      <link href="http://java.sun.com/j2se/1.4.2/docs/api" />

    </javadoc>

    <!-- replace .html?edu/internet2/middleware/grouper/webservices/GrouperService.html" with 
    .html" -->
    <!-- take out existing params, these are used by javascript to go to frames gracefully, trash them -->
    <replaceregexp flags="g">
      <regexp pattern="\.html\?[^&quot; ]*&quot;" />
      <substitution expression="\.html&quot;" />
      <fileset dir="doc/api" includes="**/*.html" />
    </replaceregexp>
    <!-- replace relative links, e.g. method links -->
    <replaceregexp flags="g">
      <regexp pattern="\.html#([^&quot;>]*)&quot;" />
      <substitution expression="\.html?view=co#\1&quot;" />
      <fileset dir="doc/api" includes="**/*.html" />
    </replaceregexp>
    <!-- replace onLoad="top.loadFrames()" with onLoad="", this javascript messes things up with viewvc params -->
    <replace file="doc/api/index.html">
      <replacetoken><![CDATA[onLoad="top.loadFrames()"]]></replacetoken>
      <replacevalue><![CDATA[onLoad=""]]></replacevalue>
    </replace>
    <!-- replace for cvs web: .html" with .html?view=co"   -->
    <replace dir="doc/api" value=".html?view=co&quot;">
      <include name="**/*.html" />
      <replacetoken><![CDATA[.html"]]></replacetoken>
    </replace>
    <replace dir="doc/api" value=".css?view=co&quot;">
      <include name="**/*.html" />
      <replacetoken><![CDATA[.css"]]></replacetoken>
    </replace>


  </target>

  
</project>