/*******************************************************************************
 * Copyright 2012 Internet2
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
/* Generated By:JJTree&JavaCC: Do not edit this line. ParserTokenManager.java */
package edu.internet2.middleware.grouperActivemqExt.org.apache.commons.jexl2.parser;

/** Token Manager. */
public class ParserTokenManager implements ParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_2(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3aba00L) != 0L)
         {
            jjmatchedKind = 56;
            return 37;
         }
         if ((active0 & 0x20000000000000L) != 0L)
            return 6;
         if ((active0 & 0x44000L) != 0L)
         {
            jjmatchedKind = 56;
            return 75;
         }
         if ((active0 & 0x40000000000000L) != 0L)
            return 11;
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 48;
            return 19;
         }
         if ((active0 & 0x208000000000L) != 0L)
            return 15;
         if ((active0 & 0x10400L) != 0L)
         {
            jjmatchedKind = 56;
            return 17;
         }
         return -1;
      case 1:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 1;
            return 37;
         }
         if ((active0 & 0x3fbc00L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 1;
            return 37;
         }
         if ((active0 & 0x200L) != 0L)
            return 37;
         return -1;
      case 2:
         if ((active0 & 0xd800L) != 0L)
            return 37;
         if ((active0 & 0x3f2400L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 2;
            }
            return 37;
         }
         return -1;
      case 3:
         if ((active0 & 0x313000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 3;
            return 37;
         }
         if ((active0 & 0xe0400L) != 0L)
            return 37;
         return -1;
      case 4:
         if ((active0 & 0x201000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 4;
            return 37;
         }
         if ((active0 & 0x112000L) != 0L)
            return 37;
         return -1;
      case 5:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 5;
            return 37;
         }
         if ((active0 & 0x200000L) != 0L)
            return 37;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_2(0x10000000000L);
      case 38:
         return jjStartNfaWithStates_2(0, 53, 6);
      case 40:
         return jjStopAtPos(0, 23);
      case 41:
         return jjStopAtPos(0, 24);
      case 42:
         return jjStopAtPos(0, 51);
      case 43:
         return jjStopAtPos(0, 49);
      case 44:
         return jjStopAtPos(0, 31);
      case 45:
         return jjStopAtPos(0, 50);
      case 46:
         return jjStopAtPos(0, 32);
      case 58:
         return jjStopAtPos(0, 30);
      case 59:
         return jjStopAtPos(0, 29);
      case 61:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_2(0x8000000000L);
      case 63:
         jjmatchedKind = 33;
         return jjMoveStringLiteralDfa1_2(0x400000000L);
      case 91:
         return jjStopAtPos(0, 27);
      case 93:
         return jjStopAtPos(0, 28);
      case 94:
         return jjStopAtPos(0, 55);
      case 101:
         return jjMoveStringLiteralDfa1_2(0x10400L);
      case 102:
         return jjMoveStringLiteralDfa1_2(0x101800L);
      case 105:
         return jjMoveStringLiteralDfa1_2(0x200L);
      case 110:
         return jjMoveStringLiteralDfa1_2(0x44000L);
      case 114:
         return jjMoveStringLiteralDfa1_2(0x200000L);
      case 115:
         return jjMoveStringLiteralDfa1_2(0x20000L);
      case 116:
         return jjMoveStringLiteralDfa1_2(0x80000L);
      case 118:
         return jjMoveStringLiteralDfa1_2(0x8000L);
      case 119:
         return jjMoveStringLiteralDfa1_2(0x2000L);
      case 123:
         return jjStopAtPos(0, 25);
      case 124:
         return jjStartNfaWithStates_2(0, 54, 11);
      case 125:
         return jjStopAtPos(0, 26);
      case 126:
         return jjStopAtPos(0, 52);
      default :
         return jjMoveNfa_2(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 34);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_2(active0, 0x108000L);
      case 101:
         return jjMoveStringLiteralDfa2_2(active0, 0x204000L);
      case 102:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_2(1, 9, 37);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_2(active0, 0x2000L);
      case 105:
         return jjMoveStringLiteralDfa2_2(active0, 0x20000L);
      case 108:
         return jjMoveStringLiteralDfa2_2(active0, 0x400L);
      case 109:
         return jjMoveStringLiteralDfa2_2(active0, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa2_2(active0, 0x1800L);
      case 114:
         return jjMoveStringLiteralDfa2_2(active0, 0x80000L);
      case 117:
         return jjMoveStringLiteralDfa2_2(active0, 0x40000L);
      case 126:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_2(0, active0);
}
private int jjMoveStringLiteralDfa2_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa3_2(active0, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa3_2(active0, 0x140000L);
      case 112:
         return jjMoveStringLiteralDfa3_2(active0, 0x10000L);
      case 114:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_2(2, 15, 37);
         return jjMoveStringLiteralDfa3_2(active0, 0x1000L);
      case 115:
         return jjMoveStringLiteralDfa3_2(active0, 0x400L);
      case 116:
         return jjMoveStringLiteralDfa3_2(active0, 0x200000L);
      case 117:
         return jjMoveStringLiteralDfa3_2(active0, 0x80000L);
      case 119:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_2(2, 14, 37);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_2(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_2(1, active0);
}
private int jjMoveStringLiteralDfa3_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_2(3, 10, 37);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_2(3, 17, 37);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_2(3, 19, 37);
         return jjMoveStringLiteralDfa4_2(active0, 0x1000L);
      case 108:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_2(3, 18, 37);
         return jjMoveStringLiteralDfa4_2(active0, 0x2000L);
      case 115:
         return jjMoveStringLiteralDfa4_2(active0, 0x100000L);
      case 116:
         return jjMoveStringLiteralDfa4_2(active0, 0x10000L);
      case 117:
         return jjMoveStringLiteralDfa4_2(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_2(2, active0);
}
private int jjMoveStringLiteralDfa4_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_2(active0, 0x1000L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_2(4, 13, 37);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_2(4, 20, 37);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_2(active0, 0x200000L);
      case 121:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_2(4, 16, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_2(3, active0);
}
private int jjMoveStringLiteralDfa5_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa6_2(active0, 0x1000L);
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_2(5, 21, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_2(4, active0);
}
private int jjMoveStringLiteralDfa6_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 104:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_2(6, 12, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_2(5, active0);
}
private int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfffffffefffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec4 = {
   0xfffffcffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 84;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 17:
               case 37:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(37);
                  break;
               case 75:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(37);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  else if (curChar == 47)
                     jjAddStates(0, 1);
                  else if (curChar == 39)
                     jjCheckNAddStates(2, 4);
                  else if (curChar == 34)
                     jjCheckNAddStates(5, 7);
                  else if (curChar == 36)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAdd(37);
                  }
                  else if (curChar == 33)
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  else if (curChar == 37)
                  {
                     if (kind > 46)
                        kind = 46;
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 25;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAddTwoStates(39, 40);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAddStates(8, 10);
                  }
                  else if (curChar == 47)
                  {
                     if (kind > 47)
                        kind = 47;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 0:
                  if (curChar != 35)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(11, 13);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(11, 13);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 3:
                  if (curChar == 10 && kind > 1)
                     kind = 1;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 38 && kind > 35)
                     kind = 35;
                  break;
               case 7:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 15:
                  if (curChar == 61 && kind > 37)
                     kind = 37;
                  break;
               case 16:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 19:
                  if (curChar == 61 && kind > 38)
                     kind = 38;
                  break;
               case 20:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 62 && kind > 41)
                     kind = 41;
                  break;
               case 22:
                  if (curChar == 61 && kind > 42)
                     kind = 42;
                  break;
               case 23:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 60 && kind > 43)
                     kind = 43;
                  break;
               case 25:
                  if (curChar == 61 && kind > 44)
                     kind = 44;
                  break;
               case 26:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 37 && kind > 46)
                     kind = 46;
                  break;
               case 31:
                  if (curChar == 47 && kind > 47)
                     kind = 47;
                  break;
               case 35:
                  if (curChar == 33 && kind > 48)
                     kind = 48;
                  break;
               case 36:
                  if (curChar != 36)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(37);
                  break;
               case 38:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(39, 40);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(39, 40);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 42:
                  if (curChar == 46)
                     jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddStates(14, 16);
                  break;
               case 45:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddTwoStates(46, 47);
                  break;
               case 48:
                  if (curChar == 34)
                     jjCheckNAddStates(5, 7);
                  break;
               case 49:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 51:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 52:
                  if (curChar == 34 && kind > 62)
                     kind = 62;
                  break;
               case 53:
                  if (curChar == 39)
                     jjCheckNAddStates(2, 4);
                  break;
               case 54:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 56:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 57:
                  if (curChar == 39 && kind > 62)
                     kind = 62;
                  break;
               case 58:
                  if (curChar != 48)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddStates(8, 10);
                  break;
               case 59:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(59, 40);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(61, 40);
                  break;
               case 62:
                  if (curChar == 47)
                     jjAddStates(0, 1);
                  break;
               case 63:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(64, 65);
                  break;
               case 64:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(64, 65);
                  break;
               case 65:
                  if (curChar == 42)
                     jjCheckNAddStates(17, 19);
                  break;
               case 66:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(67, 65);
                  break;
               case 67:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(67, 65);
                  break;
               case 68:
                  if (curChar == 47 && kind > 2)
                     kind = 2;
                  break;
               case 69:
                  if (curChar != 47)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(20, 22);
                  break;
               case 70:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(20, 22);
                  break;
               case 71:
                  if ((0x2400L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 72:
                  if (curChar == 10 && kind > 3)
                     kind = 3;
                  break;
               case 73:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 17:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAdd(37);
                  }
                  if (curChar == 113)
                  {
                     if (kind > 37)
                        kind = 37;
                  }
                  break;
               case 75:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAdd(37);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 76;
                  else if (curChar == 101)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  break;
               case 5:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAdd(37);
                  }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 11;
                  if (curChar == 108)
                     jjAddStates(23, 24);
                  else if (curChar == 103)
                     jjAddStates(25, 26);
                  else if (curChar == 110)
                     jjAddStates(27, 28);
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 33;
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 29;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 1:
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(11, 13);
                  break;
               case 8:
                  if (curChar == 100 && kind > 35)
                     kind = 35;
                  break;
               case 9:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 124 && kind > 36)
                     kind = 36;
                  break;
               case 12:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 114 && kind > 36)
                     kind = 36;
                  break;
               case 14:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 18:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 28:
                  if (curChar == 100 && kind > 46)
                     kind = 46;
                  break;
               case 29:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 32:
                  if (curChar == 118 && kind > 47)
                     kind = 47;
                  break;
               case 33:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 36:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(37);
                  break;
               case 40:
                  if ((0x110000001100L & l) != 0L && kind > 60)
                     kind = 60;
                  break;
               case 44:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(29, 30);
                  break;
               case 47:
                  if ((0x5400000054L & l) != 0L && kind > 61)
                     kind = 61;
                  break;
               case 49:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 50:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  jjCheckNAddStates(5, 7);
                  break;
               case 54:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 55:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 56:
                  jjCheckNAddStates(2, 4);
                  break;
               case 60:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(61);
                  break;
               case 61:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(61, 40);
                  break;
               case 64:
                  jjCheckNAddTwoStates(64, 65);
                  break;
               case 66:
               case 67:
                  jjCheckNAddTwoStates(67, 65);
                  break;
               case 70:
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(20, 22);
                  break;
               case 74:
                  if (curChar == 110)
                     jjAddStates(27, 28);
                  break;
               case 76:
                  if (curChar == 116 && kind > 48)
                     kind = 48;
                  break;
               case 77:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 103)
                     jjAddStates(25, 26);
                  break;
               case 79:
                  if (curChar == 116 && kind > 41)
                     kind = 41;
                  break;
               case 80:
                  if (curChar == 101 && kind > 42)
                     kind = 42;
                  break;
               case 81:
                  if (curChar == 108)
                     jjAddStates(23, 24);
                  break;
               case 82:
                  if (curChar == 116 && kind > 43)
                     kind = 43;
                  break;
               case 83:
                  if (curChar == 101 && kind > 44)
                     kind = 44;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(11, 13);
                  break;
               case 49:
               case 51:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(5, 7);
                  break;
               case 54:
               case 56:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(2, 4);
                  break;
               case 64:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(64, 65);
                  break;
               case 66:
               case 67:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(67, 65);
                  break;
               case 70:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(20, 22);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 84 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7aba00L) != 0L)
         {
            jjmatchedKind = 56;
            return 37;
         }
         if ((active0 & 0x20000000000000L) != 0L)
            return 6;
         if ((active0 & 0x44000L) != 0L)
         {
            jjmatchedKind = 56;
            return 75;
         }
         if ((active0 & 0x40000000000000L) != 0L)
            return 11;
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 48;
            return 19;
         }
         if ((active0 & 0x208000000000L) != 0L)
            return 15;
         if ((active0 & 0x10400L) != 0L)
         {
            jjmatchedKind = 56;
            return 17;
         }
         return -1;
      case 1:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 1;
            return 37;
         }
         if ((active0 & 0x3fbc00L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 1;
            return 37;
         }
         if ((active0 & 0x400200L) != 0L)
            return 37;
         return -1;
      case 2:
         if ((active0 & 0xd800L) != 0L)
            return 37;
         if ((active0 & 0x3f2400L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 2;
            }
            return 37;
         }
         return -1;
      case 3:
         if ((active0 & 0x313000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 3;
            return 37;
         }
         if ((active0 & 0xe0400L) != 0L)
            return 37;
         return -1;
      case 4:
         if ((active0 & 0x201000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 4;
            return 37;
         }
         if ((active0 & 0x112000L) != 0L)
            return 37;
         return -1;
      case 5:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 5;
            return 37;
         }
         if ((active0 & 0x200000L) != 0L)
            return 37;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_1(0x10000000000L);
      case 38:
         return jjStartNfaWithStates_1(0, 53, 6);
      case 40:
         return jjStopAtPos(0, 23);
      case 41:
         return jjStopAtPos(0, 24);
      case 42:
         return jjStopAtPos(0, 51);
      case 43:
         return jjStopAtPos(0, 49);
      case 44:
         return jjStopAtPos(0, 31);
      case 45:
         return jjStopAtPos(0, 50);
      case 46:
         return jjStopAtPos(0, 32);
      case 58:
         return jjStopAtPos(0, 30);
      case 59:
         return jjStopAtPos(0, 29);
      case 61:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_1(0x8000000000L);
      case 63:
         jjmatchedKind = 33;
         return jjMoveStringLiteralDfa1_1(0x400000000L);
      case 91:
         return jjStopAtPos(0, 27);
      case 93:
         return jjStopAtPos(0, 28);
      case 94:
         return jjStopAtPos(0, 55);
      case 101:
         return jjMoveStringLiteralDfa1_1(0x10400L);
      case 102:
         return jjMoveStringLiteralDfa1_1(0x101800L);
      case 105:
         return jjMoveStringLiteralDfa1_1(0x400200L);
      case 110:
         return jjMoveStringLiteralDfa1_1(0x44000L);
      case 114:
         return jjMoveStringLiteralDfa1_1(0x200000L);
      case 115:
         return jjMoveStringLiteralDfa1_1(0x20000L);
      case 116:
         return jjMoveStringLiteralDfa1_1(0x80000L);
      case 118:
         return jjMoveStringLiteralDfa1_1(0x8000L);
      case 119:
         return jjMoveStringLiteralDfa1_1(0x2000L);
      case 123:
         return jjStopAtPos(0, 25);
      case 124:
         return jjStartNfaWithStates_1(0, 54, 11);
      case 125:
         return jjStopAtPos(0, 26);
      case 126:
         return jjStopAtPos(0, 52);
      default :
         return jjMoveNfa_1(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 34);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x108000L);
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0x204000L);
      case 102:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_1(1, 9, 37);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_1(active0, 0x2000L);
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0x20000L);
      case 108:
         return jjMoveStringLiteralDfa2_1(active0, 0x400L);
      case 109:
         return jjMoveStringLiteralDfa2_1(active0, 0x10000L);
      case 110:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_1(1, 22, 37);
         break;
      case 111:
         return jjMoveStringLiteralDfa2_1(active0, 0x1800L);
      case 114:
         return jjMoveStringLiteralDfa2_1(active0, 0x80000L);
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0x40000L);
      case 126:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x140000L);
      case 112:
         return jjMoveStringLiteralDfa3_1(active0, 0x10000L);
      case 114:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_1(2, 15, 37);
         return jjMoveStringLiteralDfa3_1(active0, 0x1000L);
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x400L);
      case 116:
         return jjMoveStringLiteralDfa3_1(active0, 0x200000L);
      case 117:
         return jjMoveStringLiteralDfa3_1(active0, 0x80000L);
      case 119:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_1(2, 14, 37);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_1(3, 10, 37);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_1(3, 17, 37);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_1(3, 19, 37);
         return jjMoveStringLiteralDfa4_1(active0, 0x1000L);
      case 108:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_1(3, 18, 37);
         return jjMoveStringLiteralDfa4_1(active0, 0x2000L);
      case 115:
         return jjMoveStringLiteralDfa4_1(active0, 0x100000L);
      case 116:
         return jjMoveStringLiteralDfa4_1(active0, 0x10000L);
      case 117:
         return jjMoveStringLiteralDfa4_1(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0);
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_1(active0, 0x1000L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_1(4, 13, 37);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_1(4, 20, 37);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_1(active0, 0x200000L);
      case 121:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_1(4, 16, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_1(3, active0);
}
private int jjMoveStringLiteralDfa5_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa6_1(active0, 0x1000L);
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_1(5, 21, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_1(4, active0);
}
private int jjMoveStringLiteralDfa6_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 104:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_1(6, 12, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_1(5, active0);
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 84;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 17:
               case 37:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(37);
                  break;
               case 75:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(37);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  else if (curChar == 47)
                     jjAddStates(0, 1);
                  else if (curChar == 39)
                     jjCheckNAddStates(2, 4);
                  else if (curChar == 34)
                     jjCheckNAddStates(5, 7);
                  else if (curChar == 36)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAdd(37);
                  }
                  else if (curChar == 33)
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  else if (curChar == 37)
                  {
                     if (kind > 46)
                        kind = 46;
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 25;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAddTwoStates(39, 40);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAddStates(8, 10);
                  }
                  else if (curChar == 47)
                  {
                     if (kind > 47)
                        kind = 47;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 0:
                  if (curChar != 35)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(11, 13);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(11, 13);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 3:
                  if (curChar == 10 && kind > 1)
                     kind = 1;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 38 && kind > 35)
                     kind = 35;
                  break;
               case 7:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 15:
                  if (curChar == 61 && kind > 37)
                     kind = 37;
                  break;
               case 16:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 19:
                  if (curChar == 61 && kind > 38)
                     kind = 38;
                  break;
               case 20:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 62 && kind > 41)
                     kind = 41;
                  break;
               case 22:
                  if (curChar == 61 && kind > 42)
                     kind = 42;
                  break;
               case 23:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 60 && kind > 43)
                     kind = 43;
                  break;
               case 25:
                  if (curChar == 61 && kind > 44)
                     kind = 44;
                  break;
               case 26:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 37 && kind > 46)
                     kind = 46;
                  break;
               case 31:
                  if (curChar == 47 && kind > 47)
                     kind = 47;
                  break;
               case 35:
                  if (curChar == 33 && kind > 48)
                     kind = 48;
                  break;
               case 36:
                  if (curChar != 36)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(37);
                  break;
               case 38:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(39, 40);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(39, 40);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 42:
                  if (curChar == 46)
                     jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddStates(14, 16);
                  break;
               case 45:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddTwoStates(46, 47);
                  break;
               case 48:
                  if (curChar == 34)
                     jjCheckNAddStates(5, 7);
                  break;
               case 49:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 51:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 52:
                  if (curChar == 34 && kind > 62)
                     kind = 62;
                  break;
               case 53:
                  if (curChar == 39)
                     jjCheckNAddStates(2, 4);
                  break;
               case 54:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 56:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 57:
                  if (curChar == 39 && kind > 62)
                     kind = 62;
                  break;
               case 58:
                  if (curChar != 48)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddStates(8, 10);
                  break;
               case 59:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(59, 40);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(61, 40);
                  break;
               case 62:
                  if (curChar == 47)
                     jjAddStates(0, 1);
                  break;
               case 63:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(64, 65);
                  break;
               case 64:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(64, 65);
                  break;
               case 65:
                  if (curChar == 42)
                     jjCheckNAddStates(17, 19);
                  break;
               case 66:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(67, 65);
                  break;
               case 67:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(67, 65);
                  break;
               case 68:
                  if (curChar == 47 && kind > 2)
                     kind = 2;
                  break;
               case 69:
                  if (curChar != 47)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(20, 22);
                  break;
               case 70:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(20, 22);
                  break;
               case 71:
                  if ((0x2400L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 72:
                  if (curChar == 10 && kind > 3)
                     kind = 3;
                  break;
               case 73:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 17:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAdd(37);
                  }
                  if (curChar == 113)
                  {
                     if (kind > 37)
                        kind = 37;
                  }
                  break;
               case 75:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAdd(37);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 76;
                  else if (curChar == 101)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  break;
               case 5:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAdd(37);
                  }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 11;
                  if (curChar == 108)
                     jjAddStates(23, 24);
                  else if (curChar == 103)
                     jjAddStates(25, 26);
                  else if (curChar == 110)
                     jjAddStates(27, 28);
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 33;
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 29;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 1:
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(11, 13);
                  break;
               case 8:
                  if (curChar == 100 && kind > 35)
                     kind = 35;
                  break;
               case 9:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 124 && kind > 36)
                     kind = 36;
                  break;
               case 12:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 114 && kind > 36)
                     kind = 36;
                  break;
               case 14:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 18:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 28:
                  if (curChar == 100 && kind > 46)
                     kind = 46;
                  break;
               case 29:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 32:
                  if (curChar == 118 && kind > 47)
                     kind = 47;
                  break;
               case 33:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 36:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(37);
                  break;
               case 40:
                  if ((0x110000001100L & l) != 0L && kind > 60)
                     kind = 60;
                  break;
               case 44:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(29, 30);
                  break;
               case 47:
                  if ((0x5400000054L & l) != 0L && kind > 61)
                     kind = 61;
                  break;
               case 49:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 50:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  jjCheckNAddStates(5, 7);
                  break;
               case 54:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 55:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 56:
                  jjCheckNAddStates(2, 4);
                  break;
               case 60:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(61);
                  break;
               case 61:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(61, 40);
                  break;
               case 64:
                  jjCheckNAddTwoStates(64, 65);
                  break;
               case 66:
               case 67:
                  jjCheckNAddTwoStates(67, 65);
                  break;
               case 70:
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(20, 22);
                  break;
               case 74:
                  if (curChar == 110)
                     jjAddStates(27, 28);
                  break;
               case 76:
                  if (curChar == 116 && kind > 48)
                     kind = 48;
                  break;
               case 77:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 103)
                     jjAddStates(25, 26);
                  break;
               case 79:
                  if (curChar == 116 && kind > 41)
                     kind = 41;
                  break;
               case 80:
                  if (curChar == 101 && kind > 42)
                     kind = 42;
                  break;
               case 81:
                  if (curChar == 108)
                     jjAddStates(23, 24);
                  break;
               case 82:
                  if (curChar == 116 && kind > 43)
                     kind = 43;
                  break;
               case 83:
                  if (curChar == 101 && kind > 44)
                     kind = 44;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(11, 13);
                  break;
               case 49:
               case 51:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(5, 7);
                  break;
               case 54:
               case 56:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(2, 4);
                  break;
               case 64:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(64, 65);
                  break;
               case 66:
               case 67:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(67, 65);
                  break;
               case 70:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(20, 22);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 84 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3aba00L) != 0L)
         {
            jjmatchedKind = 56;
            return 37;
         }
         if ((active0 & 0x20000000000000L) != 0L)
            return 6;
         if ((active0 & 0x44000L) != 0L)
         {
            jjmatchedKind = 56;
            return 77;
         }
         if ((active0 & 0x40000000000000L) != 0L)
            return 11;
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 48;
            return 19;
         }
         if ((active0 & 0x208000000000L) != 0L)
            return 15;
         if ((active0 & 0x10400L) != 0L)
         {
            jjmatchedKind = 56;
            return 17;
         }
         return -1;
      case 1:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 1;
            return 37;
         }
         if ((active0 & 0x3fbc00L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 1;
            return 37;
         }
         if ((active0 & 0x200L) != 0L)
            return 37;
         return -1;
      case 2:
         if ((active0 & 0xd800L) != 0L)
            return 37;
         if ((active0 & 0x3f2400L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 2;
            }
            return 37;
         }
         return -1;
      case 3:
         if ((active0 & 0x313000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 3;
            return 37;
         }
         if ((active0 & 0xe0400L) != 0L)
            return 37;
         return -1;
      case 4:
         if ((active0 & 0x201000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 4;
            return 37;
         }
         if ((active0 & 0x112000L) != 0L)
            return 37;
         return -1;
      case 5:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 5;
            return 37;
         }
         if ((active0 & 0x200000L) != 0L)
            return 37;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x10000000000L);
      case 38:
         return jjStartNfaWithStates_0(0, 53, 6);
      case 40:
         return jjStopAtPos(0, 23);
      case 41:
         return jjStopAtPos(0, 24);
      case 42:
         return jjStopAtPos(0, 51);
      case 43:
         return jjStopAtPos(0, 49);
      case 44:
         return jjStopAtPos(0, 31);
      case 45:
         return jjStopAtPos(0, 50);
      case 46:
         return jjStopAtPos(0, 32);
      case 58:
         return jjStopAtPos(0, 30);
      case 59:
         return jjStopAtPos(0, 29);
      case 61:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 63:
         jjmatchedKind = 33;
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 91:
         return jjStopAtPos(0, 27);
      case 93:
         return jjStopAtPos(0, 28);
      case 94:
         return jjStopAtPos(0, 55);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x10400L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x101800L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x44000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 123:
         return jjStopAtPos(0, 25);
      case 124:
         return jjStartNfaWithStates_0(0, 54, 11);
      case 125:
         return jjStopAtPos(0, 26);
      case 126:
         return jjStopAtPos(0, 52);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 34);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x108000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x204000L);
      case 102:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(1, 9, 37);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      case 126:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x140000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 114:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 37);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 119:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 37);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 37);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 37);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 37);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 108:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 37);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 37);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 37);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 121:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 104:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 86;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(43, 44);
                  else if (curChar == 47)
                     jjAddStates(31, 32);
                  else if (curChar == 39)
                     jjCheckNAddStates(33, 35);
                  else if (curChar == 34)
                     jjCheckNAddStates(36, 38);
                  else if (curChar == 35)
                     jjCheckNAdd(39);
                  else if (curChar == 36)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAdd(37);
                  }
                  else if (curChar == 33)
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  else if (curChar == 37)
                  {
                     if (kind > 46)
                        kind = 46;
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 25;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 6;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAddTwoStates(41, 42);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAddStates(39, 41);
                  }
                  else if (curChar == 47)
                  {
                     if (kind > 47)
                        kind = 47;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 17:
               case 37:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(37);
                  break;
               case 77:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(37);
                  break;
               case 0:
                  if (curChar != 35)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(11, 13);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(11, 13);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 3:
                  if (curChar == 10 && kind > 1)
                     kind = 1;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 38 && kind > 35)
                     kind = 35;
                  break;
               case 7:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 15:
                  if (curChar == 61 && kind > 37)
                     kind = 37;
                  break;
               case 16:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 19:
                  if (curChar == 61 && kind > 38)
                     kind = 38;
                  break;
               case 20:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 62 && kind > 41)
                     kind = 41;
                  break;
               case 22:
                  if (curChar == 61 && kind > 42)
                     kind = 42;
                  break;
               case 23:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 60 && kind > 43)
                     kind = 43;
                  break;
               case 25:
                  if (curChar == 61 && kind > 44)
                     kind = 44;
                  break;
               case 26:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 37 && kind > 46)
                     kind = 46;
                  break;
               case 31:
                  if (curChar == 47 && kind > 47)
                     kind = 47;
                  break;
               case 35:
                  if (curChar == 33 && kind > 48)
                     kind = 48;
                  break;
               case 36:
                  if (curChar != 36)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(37);
                  break;
               case 38:
                  if (curChar == 35)
                     jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(39);
                  break;
               case 40:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(41, 42);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(41, 42);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 44:
                  if (curChar == 46)
                     jjCheckNAdd(45);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddStates(42, 44);
                  break;
               case 47:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddTwoStates(48, 49);
                  break;
               case 50:
                  if (curChar == 34)
                     jjCheckNAddStates(36, 38);
                  break;
               case 51:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(36, 38);
                  break;
               case 53:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(36, 38);
                  break;
               case 54:
                  if (curChar == 34 && kind > 62)
                     kind = 62;
                  break;
               case 55:
                  if (curChar == 39)
                     jjCheckNAddStates(33, 35);
                  break;
               case 56:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 58:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 59:
                  if (curChar == 39 && kind > 62)
                     kind = 62;
                  break;
               case 60:
                  if (curChar != 48)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddStates(39, 41);
                  break;
               case 61:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(61, 42);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(63, 42);
                  break;
               case 64:
                  if (curChar == 47)
                     jjAddStates(31, 32);
                  break;
               case 65:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(66, 67);
                  break;
               case 66:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  break;
               case 67:
                  if (curChar == 42)
                     jjCheckNAddStates(45, 47);
                  break;
               case 68:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(69, 67);
                  break;
               case 69:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(69, 67);
                  break;
               case 70:
                  if (curChar == 47 && kind > 2)
                     kind = 2;
                  break;
               case 71:
                  if (curChar != 47)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(48, 50);
                  break;
               case 72:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(48, 50);
                  break;
               case 73:
                  if ((0x2400L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 74:
                  if (curChar == 10 && kind > 3)
                     kind = 3;
                  break;
               case 75:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAdd(37);
                  }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 11;
                  if (curChar == 108)
                     jjAddStates(51, 52);
                  else if (curChar == 103)
                     jjAddStates(53, 54);
                  else if (curChar == 110)
                     jjAddStates(55, 56);
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 33;
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 29;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 17:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAdd(37);
                  }
                  if (curChar == 113)
                  {
                     if (kind > 37)
                        kind = 37;
                  }
                  break;
               case 77:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAdd(37);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 78;
                  else if (curChar == 101)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  break;
               case 1:
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(11, 13);
                  break;
               case 8:
                  if (curChar == 100 && kind > 35)
                     kind = 35;
                  break;
               case 9:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 124 && kind > 36)
                     kind = 36;
                  break;
               case 12:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 114 && kind > 36)
                     kind = 36;
                  break;
               case 14:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 18:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 28:
                  if (curChar == 100 && kind > 46)
                     kind = 46;
                  break;
               case 29:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 32:
                  if (curChar == 118 && kind > 47)
                     kind = 47;
                  break;
               case 33:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 36:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(37);
                  break;
               case 42:
                  if ((0x110000001100L & l) != 0L && kind > 60)
                     kind = 60;
                  break;
               case 46:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(57, 58);
                  break;
               case 49:
                  if ((0x5400000054L & l) != 0L && kind > 61)
                     kind = 61;
                  break;
               case 51:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(36, 38);
                  break;
               case 52:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 53:
                  jjCheckNAddStates(36, 38);
                  break;
               case 56:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 57:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 58:
                  jjCheckNAddStates(33, 35);
                  break;
               case 62:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(63);
                  break;
               case 63:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(63, 42);
                  break;
               case 66:
                  jjCheckNAddTwoStates(66, 67);
                  break;
               case 68:
               case 69:
                  jjCheckNAddTwoStates(69, 67);
                  break;
               case 72:
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(48, 50);
                  break;
               case 76:
                  if (curChar == 110)
                     jjAddStates(55, 56);
                  break;
               case 78:
                  if (curChar == 116 && kind > 48)
                     kind = 48;
                  break;
               case 79:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 103)
                     jjAddStates(53, 54);
                  break;
               case 81:
                  if (curChar == 116 && kind > 41)
                     kind = 41;
                  break;
               case 82:
                  if (curChar == 101 && kind > 42)
                     kind = 42;
                  break;
               case 83:
                  if (curChar == 108)
                     jjAddStates(51, 52);
                  break;
               case 84:
                  if (curChar == 116 && kind > 43)
                     kind = 43;
                  break;
               case 85:
                  if (curChar == 101 && kind > 44)
                     kind = 44;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjAddStates(11, 13);
                  break;
               case 51:
               case 53:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(36, 38);
                  break;
               case 56:
               case 58:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(33, 35);
                  break;
               case 66:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(66, 67);
                  break;
               case 68:
               case 69:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(69, 67);
                  break;
               case 72:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(48, 50);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 86 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   63, 69, 54, 55, 57, 49, 50, 52, 59, 60, 40, 1, 2, 4, 43, 44, 
   47, 65, 66, 68, 70, 71, 73, 82, 83, 79, 80, 75, 77, 45, 46, 65, 
   71, 56, 57, 59, 51, 52, 54, 61, 62, 42, 45, 46, 49, 67, 68, 70, 
   72, 73, 75, 84, 85, 81, 82, 77, 79, 47, 48, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec4[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\151\146", 
"\145\154\163\145", "\146\157\162", "\146\157\162\145\141\143\150", "\167\150\151\154\145", 
"\156\145\167", "\166\141\162", "\145\155\160\164\171", "\163\151\172\145", 
"\156\165\154\154", "\164\162\165\145", "\146\141\154\163\145", "\162\145\164\165\162\156", 
"\151\156", "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\72", "\54", "\56", 
"\77", "\77\72", null, null, null, null, "\75\176", "\41\176", null, null, null, null, 
"\75", null, null, null, "\53", "\55", "\52", "\176", "\46", "\174", "\136", null, 
null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "REGISTERS",
   "FOR_EACH_IN",
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x79fffffffffffe01L, 
};
static final long[] jjtoSkip = {
   0x1feL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[86];
private final int[] jjstateSet = new int[172];
protected char curChar;
/** Constructor. */
public ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 86; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 2;
int defaultLexState = 2;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
