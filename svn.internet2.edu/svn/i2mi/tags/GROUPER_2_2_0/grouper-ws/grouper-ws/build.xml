<project name="grouper-ws" default="dist" basedir=".">
	<!-- sets DSTAMP etc -->
	<tstamp/>
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${basedir}/lib/ant/ant-contrib.jar" />
		</classpath>
	</taskdef>
    <if><not><available file="conf/grouper-ws.properties" /></not>
      <then><copy file="misc/grouper-ws.example.properties" 
        tofile="conf/grouper-ws.properties" /></then>
    </if> 

	<!-- 
	provides all environment variables as Ant properties prefixed by "env.". 
	For example, CLASSPATH would be accessible in Ant as ${env.CLASSPATH}. 
	-->
	<property environment="env" />
	
  <if><not><available file="build.properties" /></not>
    <then><copy file="build.example.properties" tofile="build.properties" /></then>
  </if> 
	
	<available file="build.properties" property="build.properties.exists" value="true"/>

	<fail message="Couldnt detect build.properties file, copy the build.example.properties to build.properties in the project base dir, and customize" unless="build.properties.exists" />
	<property file="build.properties" />
  <property file="${basedir}/misc/version.properties"/>


	<!-- validate the build.properties -->
	<fail message="Couldnt detect build.properties property file entry (it's probably new, copy the entry from build.example.properties): webapp.folder" unless="webapp.folder" />
	<fail message="Couldnt detect build.properties property file entry (it's probably new, copy the entry from build.example.properties): dist.cleanOnDist" unless="dist.cleanOnDist" />
	<fail message="Couldnt detect build.properties property file entry (it's probably new, copy the entry from build.example.properties): dist.packageAar" unless="dist.packageAar" />
  <fail message="Couldnt detect build.properties property file entry (it's probably new, copy the entry from build.example.properties): webapp.authentication.use.rampart" unless="webapp.authentication.use.rampart" />
	<fail message="Couldnt detect build.properties property file entry (it's probably new, copy the entry from build.example.properties): dist.generateWsdlOnDist" unless="dist.generateWsdlOnDist" />
	<fail message="Couldnt detect build.properties property file entry (it's probably new, copy the entry from build.example.properties): dist.generateClientOnDist" unless="dist.generateClientOnDist" />
  <fail message="Couldnt detect build.properties property file entry (it's probably new, copy the entry from build.example.properties): dist.buildGeneratedClientJarOnDist" unless="dist.buildGeneratedClientJarOnDist" />
  <fail message="Couldnt detect build.properties property file entry (it's probably new, copy the entry from build.example.properties): deploy.context.path" unless="deploy.context.path" />
	<fail message="Couldnt detect build.properties property file entry (it's probably new, copy the entry from build.example.properties): generated.client.project.dir" unless="generated.client.project.dir" />
  <fail message="Couldnt detect build.properties property file entry (it's probably new, copy the entry from build.example.properties): grouper.dir" unless="grouper.dir" />
	<fail message="Couldnt detect build.properties property file entry (it's probably new, copy the entry from build.example.properties): grouper.dist.dir" unless="grouper.dist.dir" />
	<fail message="Couldnt detect build.properties property file entry (it's probably new, copy the entry from build.example.properties): stop.tomcat.on.quick.or.dist" unless="stop.tomcat.on.quick.or.dist" />
	<fail message="Couldnt detect build.properties property file entry (it's probably new, copy the entry from build.example.properties): tomcat.dir" unless="tomcat.dir" />
	<fail message="Couldnt detect build.properties property file entry (it's probably new, copy the entry from build.example.properties): tomcat.port" unless="tomcat.port" />
	<fail message="Couldnt detect build.properties property file entry (it's probably new, copy the entry from build.example.properties): cvs.branch" unless="cvs.branch" />
  <fail message="Couldnt detect build.properties property file entry (it's probably new, copy the entry from build.example.properties): copy.grouper.jdbc.sample.drivers" unless="copy.grouper.jdbc.sample.drivers" />
  <fail message="Couldnt detect build.properties property file entry (it's probably new, copy the entry from build.example.properties): grouper.jar.name" unless="grouper.jar.name" />
  <fail message="Couldnt detect build.properties property file entry (it's probably new, copy the entry from build.example.properties): grouper.lib.dir" unless="grouper.lib.dir" />
  <fail message="Couldnt detect build.properties property file entry (it's probably new, copy the entry from build.example.properties): grouper.conf.dir" unless="grouper.conf.dir" />
  
	<property name="webapp.folder" value="${dist.home}/${webapp.name}" />

	<property name="build.dir" value="${basedir}/build" />
	<property name="build.dir.grouper-ws" value="${build.dir}/grouper-ws" />
  <property name="build.dir.grouper-ws-soap-client" value="${build.dir}/grouper-ws-soap-client" />

	<mkdir dir="${build.dir}" />
	<mkdir dir="${build.dir.grouper-ws}" />
	<mkdir dir="${dist.home}" />
	<mkdir dir="${webapp.folder}" />

	<path id="ws.class.path">
		<!-- Make available jar files that Grouper needs -->
		<fileset dir="${basedir}/lib">
			<include name="**/*.jar" />
		</fileset>
    <fileset dir="${grouper.lib.dir}">
      <include name="**/*.jar" />
    </fileset>
    <fileset file="${grouper.jar.name}" />

		<!-- make available any classes / conf already placed in the build folder -->
		<pathelement location="${build.dir.grouper-ws}" />
	</path>

  <path id="ws.api.class.path">
    <!-- Make available jar files that Grouper needs -->
    <fileset dir="${basedir}/lib">
      <include name="**/*.jar" />
    </fileset>

    <!-- make available any classes / conf already placed in the build folder -->
    <pathelement location="${build.dir.grouper-ws}" />
  </path>

	<!-- TODO move this out of project -->
	<!-- property name="webservice.folder" value="${webapp.folder}/../webservices" / -->
  
  
  
  <!-- make sure grouper dirs are set correctly -->
  <target name="checkGrouper">

    <available file="${grouper.jar.name}" property="grouper.file.exists" value="true" />
  
    <if>
      <not>
        <isset property="grouper.file.exists" />
      </not>      
      <then>
        <fail message="Cant find grouper.jar from build.properties entry grouper.jar.name: ${grouper.jar.name}!  Maybe the grouper.dir directory is not set correctly, or maybe grouper is not built..." /> 
      </then>
    </if>
  
    <available file="${grouper.lib.dir}/commons-lang.jar" property="grouper.lib.dir.exists" value="true" />
  
    <if>
      <not>
        <isset property="grouper.lib.dir.exists" />
      </not>      
      <then>
        <fail message="Cant find grouper lib dir jars (e.g. commons-lang.jar) from build.properties entry grouper.lib.dir: ${grouper.lib.dir}!" /> 
      </then>
    </if>
  
    <available file="${grouper.conf.dir}/grouper.properties" property="grouper.properties.file.exists" value="true" />
  
    <if>
      <not>
        <isset property="grouper.properties.file.exists" />
      </not>      
      <then>
        <fail message="Cant find grouper conf dir (e.g. grouper.properties) from build.properties entry grouper.conf.dir: ${grouper.conf.dir}!" /> 
      </then>
    </if>
  </target>

  
  
  
	<!-- this didnt work out -->
	<!-- target name="generate.wsdl" >  
    	<mkdir dir="${webservice.folder}"/>
    	<mkdir dir="${webservice.folder}/classes"/>
        <taskdef name="java2wsdl"
                 classname="org.apache.ws.java2wsdl.Java2WSDLTask"
                 classpathref="ws.class.path"/>
        <java2wsdl className="edu.internet2.middleware.grouper.webservices.GrouperService"
                   outputLocation="${wsdl.location}"
                   targetNamespace="http://grouper.internet2.edu/"
                   schemaTargetNamespace="http://grouper.internet2.edu/xsd" -->
	<!-- classpath>
                <pathelement id="ws.class.path"/ -->
	<!--  path="${axis2.classpath} -->
	<!-- pathelement location="${build.dir.grouper-ws}"/>
            </classpath -->
	<!-- /java2wsdl>
    </target -->
	<!-- here are the available options (run with no args to see them)
	     [java] Usage: java2wsdl [options] -cn <fully qualified class name>
     [java] where [options] include:
     [java]   -o <output location>                    output directory
     [java]   -of <output file name>                  output file name for the WSDL
     [java]   -sn <service name>                      service name
     [java]   -l <soap address>                       address of the port for the WSDL
     [java]   -cp <class path uri>                    list of classpath entries - (urls)
     [java]   -tn <target namespace>                  target namespace for service
     [java]   -tp <target namespace prefix>           target namespace prefix for service
     [java]   -stn <schema target namespace>          target namespace for schema
     [java]   -stp <schema target namespace prefix>   target namespace prefix for schema
     [java]   -st <binding style>                     style for the WSDL
     [java]   -u <binding use>                        use for the WSDL
     [java]   -nsg <class name>                       fully qualified name of a class that implements NamespaceGenerator
     [java]   -sg <class name>                        fully qualified name of a class that implements SchemaGenerator
     [java]   -p2n [<java package>,<namespace] [<java package>,<namespace]... 
     [java]                                           java package to namespace mapping for argument and return types
     [java]   -p2n [all, <namespace>]                 to assign all types to a single namespace
     [java]   -efd <qualified/unqualified>            setting for elementFormDefault (defaults to qualified)
     [java]   -afd <qualified/unqualified>            setting for attributeFormDefault (defaults to qualified)
     [java]   -xc class1 -xc class2...                extra class(es) for which schematype must be generated.  
     [java]   -wv <1.1/2.0>                           wsdl version - defaults to 1.1 if not specified
     [java]   -dlb                                    generate schemas conforming to doc/lit/bare style
     -->
	<target name="java2wsdl" description="convert the java to a wsdl">
		<touch file="${generated.client.project.dir}/GrouperService.wsdl" />
		<delete file="${generated.client.project.dir}/GrouperService.wsdl" />
		<java classname="org.apache.ws.java2wsdl.Java2WSDL" fork="true">
			<classpath refid="ws.class.path" />
			<arg value="-o" />
			<arg value="${generated.client.project.dir}" />
			<arg value="-of" />
			<arg value="GrouperService.wsdl" />
			<arg value="-cn" />
			<arg value="edu.internet2.middleware.grouper.ws.soap.GrouperService" />
			<arg value="-stn" />
			<arg value="http://soap.ws.grouper.middleware.internet2.edu/xsd" />
			<arg value="-l" />
			<arg value="http://localhost:8090/grouper-ws/services/GrouperService" />

		</java>

   <touch file="${generated.client.project.dir}/GrouperService_v2_0.wsdl" />
    <delete file="${generated.client.project.dir}/GrouperService_v2_0.wsdl" />
    <java classname="org.apache.ws.java2wsdl.Java2WSDL" fork="true">
      <classpath refid="ws.class.path" />
      <arg value="-o" />
      <arg value="${generated.client.project.dir}" />
      <arg value="-of" />
      <arg value="GrouperService_v2_0.wsdl" />
      <arg value="-cn" />
      <arg value="edu.internet2.middleware.grouper.ws.soap_v2_0.GrouperService" />
      <arg value="-stn" />
      <arg value="http://soap_v2_0.ws.grouper.middleware.internet2.edu/xsd" />
      <arg value="-l" />
      <arg value="http://localhost:8090/grouper-ws/services/GrouperService_v2_0" />

    </java>

	   <touch file="${generated.client.project.dir}/GrouperService_v2_1.wsdl" />
	    <delete file="${generated.client.project.dir}/GrouperService_v2_1.wsdl" />
	    <java classname="org.apache.ws.java2wsdl.Java2WSDL" fork="true">
	      <classpath refid="ws.class.path" />
	      <arg value="-o" />
	      <arg value="${generated.client.project.dir}" />
	      <arg value="-of" />
	      <arg value="GrouperService_v2_1.wsdl" />
	      <arg value="-cn" />
	      <arg value="edu.internet2.middleware.grouper.ws.soap_v2_1.GrouperService" />
	      <arg value="-stn" />
	      <arg value="http://soap_v2_1.ws.grouper.middleware.internet2.edu/xsd" />
	      <arg value="-l" />
	      <arg value="http://localhost:8090/grouper-ws/services/GrouperService_v2_1" />

	    </java>

    <touch file="${generated.client.project.dir}/GrouperService_v2_2.wsdl" />
     <delete file="${generated.client.project.dir}/GrouperService_v2_2.wsdl" />
     <java classname="org.apache.ws.java2wsdl.Java2WSDL" fork="true">
       <classpath refid="ws.class.path" />
       <arg value="-o" />
       <arg value="${generated.client.project.dir}" />
       <arg value="-of" />
       <arg value="GrouperService_v2_2.wsdl" />
       <arg value="-cn" />
       <arg value="edu.internet2.middleware.grouper.ws.soap_v2_2.GrouperService" />
       <arg value="-stn" />
       <arg value="http://soap_v2_2.ws.grouper.middleware.internet2.edu/xsd" />
       <arg value="-l" />
       <arg value="http://localhost:8090/grouper-ws/services/GrouperService_v2_2" />

     </java>

 
	
	</target>
	<target name="wsdl2java" description="convert the wsdl to a java client">
		<delete>
			<fileset dir="${generated.client.project.dir}">
			  <include name="src/edu/internet2/middleware/grouper/webservicesClient/GrouperServiceCallbackHandler.java" />
				<include name="src/edu/internet2/middleware/grouper/webservicesClient/GrouperServiceStub.java" />
				<include name="test/edu/internet2/middleware/grouper/webservicesClient/GrouperServiceTest.java" />
        <include name="src/edu/internet2/middleware/grouper/webservicesClient/GrouperService.java" />
        <include name="test/edu/internet2/middleware/grouper/ws/soap/xsd/*.java" />
        <include name="test/edu/internet2/middleware/grouper/ws/soap_v2_0/xsd/*.java" />
        <include name="test/edu/internet2/middleware/grouper/ws/soap_v2_1/xsd/*.java" />
        <include name="test/edu/internet2/middleware/grouper/ws/soap_v2_2/xsd/*.java" />
			</fileset>
		</delete>
		<java classname="org.apache.axis2.wsdl.WSDL2Java" fork="true">
			<classpath refid="ws.class.path" />
			<arg value="-uri" />
			<arg file="${generated.client.project.dir}/GrouperService_v2_2.wsdl" />
			<arg value="-t" />
      <arg value="-u" />
			<arg value="-p" />
			<arg value="edu.internet2.middleware.grouper.webservicesClient" />
			<arg value="-o" />
			<arg value="${generated.client.project.dir}" />
		</java>

	</target>

	<target name="generate-aar" depends="compile">
		<property name="webservice.folder" value="${basedir}/webservices" />
		<mkdir dir="${webservice.folder}/classes" />
		<delete dir="${webservice.folder}/classes" />
		<mkdir dir="${webservice.folder}/classes" />
		<copy toDir="${webservice.folder}/classes" failonerror="false">
			<fileset dir="${build.dir.grouper-ws}">
				<include name="edu/internet2/middleware/grouper/ws/**/*.class" />
			</fileset>
		</copy>
	  <!-- normal axis -->
    <mkdir dir="${basedir}/webapp/WEB-INF/services"/>
		<jar destfile="${basedir}/webapp/WEB-INF/services/GrouperService.aar">
			<fileset excludes="edu/internet2/middleware/grouper/ws/**/*Test.class" dir="${webservice.folder}/classes" />
			<fileset dir="webservices/GrouperService.aar" />
		</jar>
	  <!-- for rampart -->
    <jar destfile="${basedir}/webapp/WEB-INF/services/GrouperServiceWssec.aar">
      <fileset excludes="edu/internet2/middleware/grouper/ws/**/*Test.class" dir="${webservice.folder}/classes" />
      <fileset dir="webservices/GrouperServiceWssec.aar" />
    </jar>
	  
    <!-- normal axis -->
    <jar destfile="${basedir}/webapp/WEB-INF/services/GrouperService_v2_0.aar">
      <fileset excludes="edu/internet2/middleware/grouper/ws/**/*Test.class" dir="${webservice.folder}/classes" />
      <fileset dir="webservices/GrouperService_v2_0.aar" />
    </jar>
    <!-- for rampart -->
    <jar destfile="${basedir}/webapp/WEB-INF/services/GrouperServiceWssec_v2_0.aar">
      <fileset excludes="edu/internet2/middleware/grouper/ws/**/*Test.class" dir="${webservice.folder}/classes" />
      <fileset dir="webservices/GrouperServiceWssec_v2_0.aar" />
    </jar>

    <!-- normal axis -->
    <jar destfile="${basedir}/webapp/WEB-INF/services/GrouperService_v2_1.aar">
      <fileset excludes="edu/internet2/middleware/grouper/ws/**/*Test.class" dir="${webservice.folder}/classes" />
      <fileset dir="webservices/GrouperService_v2_1.aar" />
    </jar>
    <!-- for rampart -->
    <jar destfile="${basedir}/webapp/WEB-INF/services/GrouperServiceWssec_v2_1.aar">
      <fileset excludes="edu/internet2/middleware/grouper/ws/**/*Test.class" dir="${webservice.folder}/classes" />
      <fileset dir="webservices/GrouperServiceWssec_v2_1.aar" />
    </jar>

    <!-- normal axis -->
    <jar destfile="${basedir}/webapp/WEB-INF/services/GrouperService_v2_2.aar">
      <fileset excludes="edu/internet2/middleware/grouper/ws/**/*Test.class" dir="${webservice.folder}/classes" />
      <fileset dir="webservices/GrouperService_v2_2.aar" />
    </jar>
    <!-- for rampart -->
    <jar destfile="${basedir}/webapp/WEB-INF/services/GrouperServiceWssec_v2_2.aar">
      <fileset excludes="edu/internet2/middleware/grouper/ws/**/*Test.class" dir="${webservice.folder}/classes" />
      <fileset dir="webservices/GrouperServiceWssec_v2_2.aar" />
    </jar>

	</target>

	<!-- 
	
	Generate the axis bundle based on axis jars
	
	jars that are part of axis which are not in the axis jar:
	
	- activation.jar
	- commons-codec
	- commons-fileupload
	- commons-httpclient
	- commons-io
	- commons-logging
	- jaxb-api
	- jaxb-impl
	- jaxb-xjc
	- log4j
	- mail
	- xalan
	- xercesImpl
	- xml-api
	- XmlSchema
	
	#######################
	jars that are part of axis which we were already using:
	
	- activation (i2mi-common)
	- commons-fileupload (grouper-ui, removed since older)
	- commons-logging (i2mi-common, same file)
	- jaxb-api (i2mi-common, different, common is bigger)
	- jaxb-impl (i2mi-common, different, common is bigger)
	- jaxb-xjc (i2mi-common, different, common is bigger)
	- log4j (grouper, removed since older)
	- xalan (grouper-ui, removed since older)
	- xercesImpl (grouper-ui, removed since older)
	- xml-apis (grouper-ui, removed since older)
	-->
	<!-- target name="generate-axis-bundle-jar">
		<mkdir dir="build/axisLibTemp" />
		<delete dir="build/axisLibTemp" />
		<mkdir dir="build/axisLibTemp" />
		<unzip dest="build/axisLibTemp">
			<fileset dir="lib/axis-bundle" includes="*.jar" />
		</unzip>
		<delete file="lib/axis/axisBundle.jar" />
		<jar destfile="lib/axis/axisBundle.jar" basedir="build/axisLibTemp" />
	</target -->

	<target name="clean">
		<mkdir dir="${build.dir}" />
		<delete dir="${build.dir}" />
		<mkdir dir="${build.dir.grouper-ws}" />
	</target>

	<!-- ## End From axis
	############################################### -->
	<target name="compile">
		<javac srcdir="${basedir}/src/grouper-ws" 
		  destdir="${build.dir.grouper-ws}" 
		  classpathref="ws.class.path" debug="true">
		</javac>
		<!-- add each versioned soap source transfer objects here -->
    <javac srcdir="${basedir}/src/grouper-ws_v1_6" 
      destdir="${build.dir.grouper-ws}" 
      classpathref="ws.class.path" debug="true">
    </javac>
    <javac srcdir="${basedir}/src/grouper-ws_v2_0" 
      destdir="${build.dir.grouper-ws}" 
      classpathref="ws.class.path" debug="true">
    </javac>
    <javac srcdir="${basedir}/src/grouper-ws_v2_1" 
      destdir="${build.dir.grouper-ws}" 
      classpathref="ws.class.path" debug="true">
    </javac>
    <javac srcdir="${basedir}/src/grouper-ws_v2_2" 
      destdir="${build.dir.grouper-ws}" 
      classpathref="ws.class.path" debug="true">
    </javac>
	</target>
	<!-- 
    Builds the entire webapp 
  -->
	<target name="dist" description="do everything" depends="checkGrouper">
		<property name="skipWsdl" value="false" />
		<antcall target="distHelper" />
	</target>

  <target name="distPackage" description="build tar gz on internet2 box">
  
    <!-- javadoc error causes too many errors! 
      antcall target="javadoc" / -->
    
    <copy todir="${basedir}/../../grouper.ws-${version}">
      <fileset dir="${basedir}/../../grouper-ws" />
    </copy>
    
    <fixcrlf srcdir="${basedir}/../../grouper.ws-${version}/grouper-ws/webapp/WEB-INF/bin" eol="unix" includes="*.sh" />
    <fixcrlf srcdir="${basedir}/../../grouper.ws-${version}/grouper-ws/webapp/WEB-INF/bin" eol="dos" includes="*.bat" />
    <chmod dir="${basedir}/../../grouper.ws-${version}/grouper-ws/webapp/WEB-INF/bin" includes="*.sh,*.bat" perm="ugo+rx"/>

    <copy file="${basedir}/../../grouper.ws-${version}/grouper-ws/webapp/WEB-INF/bin/gsh.sh" tofile="${basedir}/../../grouper.ws-${version}/grouper-ws/webapp/WEB-INF/bin/gsh" />
    <fixcrlf srcdir="${basedir}/../../grouper.ws-${version}/grouper-ws/webapp/WEB-INF/bin" eol="unix" includes="gsh" />
    <chmod dir="${basedir}/../../grouper.ws-${version}/grouper-ws/webapp/WEB-INF/bin" includes="gsh" perm="ugo+rx"/>

  	
    <!-- this assumes that everything was checked out to the right place, and no other dirs exist -->
    <tar destfile="${basedir}/../../grouper.ws-${version}.tar.gz" compression="gzip">
      <tarfileset dir="${basedir}/../.." >
        <include name="grouper.ws-${version}/**"/>
      </tarfileset>
    </tar>            

    
  </target>
  
	<!-- 
    Builds the entire webapp 
  -->
	<target name="quick" description="dist, but without wsdl" depends="checkGrouper">
		<property name="skipWsdl" value="true" />
		<antcall target="distHelper" />
	</target>
  
  <target name="dev" description="copy libs to cvs webapp dir so the app can be run in dev, 
    not, grouper and grouper-ws libs should not be there, note that if you set your local 
    tomcat to grouper-ws-home/webapp is should run locally.  Note this should only need 
    to be done once (unless non grouper jars change)" depends="checkGrouper">
    <mkdir dir="${basedir}/webapp/WEB-INF/lib" />
    <delete dir="${basedir}/webapp/WEB-INF/lib" />
    <mkdir dir="${basedir}/webapp/WEB-INF/lib" />
    <copy todir="${basedir}/webapp/WEB-INF/lib">
      <fileset dir="${basedir}/lib/axis" includes="*.jar" />
      <fileset dir="${basedir}/lib/rampart" includes="*.jar" />
      <fileset dir="${grouper.lib.dir}/../jdbcSamples">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${grouper.lib.dir}/../custom">
        <include name="*.jar"/>
      </fileset>
      <!-- this is for junit which is needed in dev since text classes extend GrouperTest -->
      <fileset file="${grouper.jar.name}/../test/grouper-test.jar" />
      <fileset dir="${grouper.lib.dir}">
        <include name="*.jar"/>
        <exclude name="grouper*.jar"/>
      </fileset>
      <fileset dir="${grouper.lib.dir}">
        <include name="grouperClient.jar"/>
      </fileset>
      <fileset dir="${basedir}/lib/grouper-ws" includes="*.jar" />
      <fileset dir="${basedir}/lib/custom" includes="*.jar" />
    </copy>
  </target>
  
	<!-- 
		Builds the entire webapp, or skips the web service wsdl part
	-->
	<target name="distHelper">

		<!-- TODO put in options to do the log4j and other properties files -->

		<!-- stop tomcat if supposed to -->
		<if>
			<istrue value="${stop.tomcat.on.quick.or.dist}" />
			<then>
				<antcall target="tomcatStop" />
			</then>
		</if>


		<!-- see if we should clean -->
		<if>
			<istrue value="${dist.cleanOnDist}" />
			<then>
				<antcall target="clean" />
			</then>
		</if>

		<if>
			<istrue value="${dist.packageAar}" />
			<then>
				<!-- this will compile -->
				<antcall target="generate-aar" />
			</then>
			<else>
				<!-- make sure things are compiled -->
				<antcall target="compile" />
			</else>
		</if>

		<if>
			<and>
				<istrue value="${dist.generateWsdlOnDist}" />
				<isfalse value="${skipWsdl}" />
			</and>
			<then>
				<antcall target="java2wsdl" />
			</then>
		</if>
		<if>
			<and>
				<istrue value="${dist.generateClientOnDist}" />
				<isfalse value="${skipWsdl}" />
			</and>
			<then>
				<antcall target="wsdl2java" />
			</then>
		</if>

		<!-- make the jar first and include source -->
		<delete file="${dist.home}/grouper-ws.jar" />
		<jar file="${dist.home}/grouper-ws.jar">
      <fileset dir="misc">
        <include name="META-INF/*" />
      </fileset>
			<fileset dir="${build.dir.grouper-ws}" />
			<fileset dir="${basedir}/src/grouper-ws" />
		</jar>

		<mkdir dir="${webapp.folder}/WEB-INF/classes" />
		<mkdir dir="${webapp.folder}/WEB-INF/lib" />

		<!-- Make all necessary jar files available to the webapp itself -->
		<!-- we are doing the classes and source with a jar -->
		<copy todir="${webapp.folder}/WEB-INF/classes">
			<fileset dir="${basedir}/conf" />
		</copy>
    <copy todir="${webapp.folder}/WEB-INF/classes" overwrite="true" verbose="true">
      <fileset dir="${grouper.conf.dir}" />
    </copy>
	  
	  <copy todir="${webapp.folder}/WEB-INF/lib">
			<fileset dir="${basedir}/lib/axis" includes="*.jar" />
      <fileset dir="${basedir}/lib/rampart" includes="*.jar" />
			<fileset dir="${grouper.lib.dir}">
			  <include name="*.jar"/>
        <exclude name="grouper*.jar"/>
			</fileset>
      <fileset dir="${grouper.lib.dir}/../custom">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${grouper.lib.dir}">
        <include name="grouperClient.jar"/>
      </fileset>
      <fileset file="${grouper.jar.name}" />
			<fileset dir="${basedir}/lib/grouper-ws" includes="*.jar" />
      <fileset dir="${basedir}/lib/custom" includes="*.jar" />
			<fileset dir="${dist.home}" includes="grouper-ws.jar" />
		</copy>
	  
    <if>
       <equals arg1="true" arg2="${copy.grouper.jdbc.sample.drivers}"/>
       <then>
         <copy todir="${webapp.folder}/WEB-INF/lib">
           <fileset dir="${grouper.dir}/lib/jdbcSamples">
             <include name="*.jar"/>
           </fileset>
         </copy>
       </then>
    </if>


		<!-- all the webapp axis stuff like services dir and conf dir -->
		<copy todir="${webapp.folder}">
			<fileset dir="${basedir}/webapp">
        <exclude name="WEB-INF/lib/**" />
        <exclude name="WEB-INF/classes/**" />
			</fileset>
		</copy>

		<!-- move aar files in dev -->
    <if>
      <istrue value="${webapp.authentication.use.rampart.rename.indev}" />
      <then>
      	<delete file="webapp/WEB-INF/services/GrouperServiceWssec.aar.dontuse" />
        <move file="webapp/WEB-INF/services/GrouperServiceWssec.aar" 
          tofile="webapp/WEB-INF/services/GrouperServiceWssec.aar.dontuse"  />
        <delete file="webapp/WEB-INF/services/GrouperServiceWssec_v2_0.aar.dontuse" />
        <move file="webapp/WEB-INF/services/GrouperServiceWssec_v2_0.aar" 
          tofile="webapp/WEB-INF/services/GrouperServiceWssec_v2_0.aar.dontuse"  />
        <delete file="webapp/WEB-INF/services/GrouperServiceWssec_v2_1.aar.dontuse" />
        <move file="webapp/WEB-INF/services/GrouperServiceWssec_v2_1.aar" 
          tofile="webapp/WEB-INF/services/GrouperServiceWssec_v2_1.aar.dontuse"  />
        <delete file="webapp/WEB-INF/services/GrouperServiceWssec_v2_2.aar.dontuse" />
        <move file="webapp/WEB-INF/services/GrouperServiceWssec_v2_2.aar" 
          tofile="webapp/WEB-INF/services/GrouperServiceWssec_v2_2.aar.dontuse"  />
      </then>
    </if>

	  <!-- decide if  rampart or not -->
    <if>
      <istrue value="${webapp.authentication.use.rampart}" />
      <then>
        <move file="${webapp.folder}/WEB-INF/services/GrouperService.aar" 
          tofile="${webapp.folder}/WEB-INF/services/GrouperService.aar.ondeck"  />
        <move file="${webapp.folder}/WEB-INF/services/GrouperService_v2_0.aar" 
          tofile="${webapp.folder}/WEB-INF/services/GrouperService_v2_0.aar.isondeck"  />
        <move file="${webapp.folder}/WEB-INF/services/GrouperService_v2_1.aar" 
          tofile="${webapp.folder}/WEB-INF/services/GrouperService_v2_1.aar.isondeck"  />
        <move file="${webapp.folder}/WEB-INF/services/GrouperService_v2_2.aar" 
          tofile="${webapp.folder}/WEB-INF/services/GrouperService_v2_2.aar.isondeck"  />
      </then>
      <else>
        <if>
          <!-- might not be there if not there all the time for steady state -->
          <available file="${webapp.folder}/WEB-INF/services/GrouperServiceWssec.aar" />
          <then>
            <move file="${webapp.folder}/WEB-INF/services/GrouperServiceWssec.aar" 
              tofile="${webapp.folder}/WEB-INF/services/GrouperServiceWssec.aar.ondeck"  />
          </then>
        </if>
        <if>
          <!-- might not be there if not there all the time for steady state -->
          <available file="${webapp.folder}/WEB-INF/services/GrouperServiceWssec_v2_0.aar" />
          <then>
            <move file="${webapp.folder}/WEB-INF/services/GrouperServiceWssec_v2_0.aar" 
              tofile="${webapp.folder}/WEB-INF/services/GrouperServiceWssec_v2_0.aar.isondeck"  />
          </then>
        </if>
        <if>
          <!-- might not be there if not there all the time for steady state -->
          <available file="${webapp.folder}/WEB-INF/services/GrouperServiceWssec_v2_1.aar" />
          <then>
            <move file="${webapp.folder}/WEB-INF/services/GrouperServiceWssec_v2_1.aar" 
              tofile="${webapp.folder}/WEB-INF/services/GrouperServiceWssec_v2_1.aar.isondeck"  />
          </then>
        </if>
        <if>
          <!-- might not be there if not there all the time for steady state -->
          <available file="${webapp.folder}/WEB-INF/services/GrouperServiceWssec_v2_2.aar" />
          <then>
            <move file="${webapp.folder}/WEB-INF/services/GrouperServiceWssec_v2_2.aar" 
              tofile="${webapp.folder}/WEB-INF/services/GrouperServiceWssec_v2_2.aar.isondeck"  />
          </then>
        </if>
      </else>
    </if>
		
    <fixcrlf srcdir="${webapp.folder}/WEB-INF/bin" eol="unix" includes="*.sh" />
    <fixcrlf srcdir="${webapp.folder}/WEB-INF/bin" eol="dos" includes="*.bat" />
    <chmod dir="${webapp.folder}/WEB-INF/bin" includes="*.sh,*.bat" perm="ugo+rx"/>

    <copy file="${webapp.folder}/WEB-INF/bin/gsh.sh" tofile="${webapp.folder}/WEB-INF/bin/gsh" />
    <fixcrlf srcdir="${webapp.folder}/WEB-INF/bin" eol="unix" includes="gsh" />
    <chmod dir="${webapp.folder}/WEB-INF/bin" includes="gsh" perm="ugo+rx"/>

		
		<!-- make a war file -->
		<property name="webapp.war" value="${webapp.folder}.war" />
		<delete file="${webapp.war}" />
		<jar destfile="${webapp.war}">
			<fileset dir="${webapp.folder}" />
		</jar>

	  <if>
	    <istrue value="${dist.buildGeneratedClientJarOnDist}" />
	    <then>
	      <!-- every build is clean -->
	      <mkdir dir="${build.dir.grouper-ws-soap-client}" />
	      <delete dir="${build.dir.grouper-ws-soap-client}" />
        <mkdir dir="${build.dir.grouper-ws-soap-client}" />

	      <!-- make the generated soap client jar -->
	      <!-- compile first -->
	      <path id="generated.client.class.path">
	         <!-- Make available jar files that Grouper needs -->
	         <fileset dir="${generated.client.project.dir}">
	           <!-- matches lib and libRampart -->
	           <include name="lib**/*.jar" />
	         </fileset>

	       </path>

	      <javac srcdir="${generated.client.project.dir}/src" 
	         destdir="${build.dir.grouper-ws-soap-client}" 
	         classpathref="generated.client.class.path" debug="true">
	         <!-- compilerarg value="-Xlint:deprecation" / -->
        </javac>
        <!-- copy over conf -->
	      <copy toDir="${build.dir.grouper-ws-soap-client}" failonerror="false">
          <fileset dir="${generated.client.project.dir}/src" includes="**"/>
	        <fileset dir="${generated.client.project.dir}/conf" includes="**"/>
	      </copy>

	      <jar destfile="${dist.home}/grouper-ws-soap-client.jar">
	        <fileset dir="${build.dir.grouper-ws-soap-client}" />
	      </jar>
	    </then>
	  </if>
	  
	</target>



	<target name="help" description="targets and their description">
		<echo>Please ensure you have read the documentation - </echo>
		<echo>and created a build.properties file based on the template provided</echo>

		<echo>
		</echo>
		<echo>The following targets are available - type the appropriate name:</echo>
		<echo>
		</echo>
		<echo>1) default (dist) </echo>
		<echo>     Simply builds, without cleaning, to the webapp.folder</echo>
		<echo>1) quick </echo>
		<echo>     Simply builds, without cleaning, to the webapp.folder, and skips wsdl parts</echo>
		<echo>2) clean</echo>
		<echo>     Clean the webapp folder, and classfiles, and build</echo>
		<echo>3) generate-aar</echo>
		<echo>     Make the axis archive, which is the classfiles and services.xml that axis needs.  You need to do this if you ever change anything that changes the wsdl.  You can do this automatically in dist by setting a property in the build.properties</echo>
		<echo>4) javadoc</echo>
		<echo>     Generate javadoc to the doc/api dir</echo>
		<echo>5) help</echo>
		<echo>     This message</echo>
		<echo>6) grouper</echo>
		<echo>     Build the grouper jar from build.properties</echo>
		<echo>
		</echo>
	</target>
	<target name="javadoc" description="generate public api docs to doc/api">
		<!-- Let's be sure we clear out old cruft first... -->
		<mkdir dir="doc/api" />
		<delete>
      <fileset dir="doc/api">
        <exclude name="**/.svn" />
        <exclude name="**/.svn/**" />
      </fileset>
		</delete>
		<mkdir dir="doc/api" />
		<!-- header="&lt;script&gt;alert('whatever');&lt;/script&gt;" -->
		<javadoc destdir="doc/api" classpathref="ws.api.class.path" access="public"
			additionalparam="-notimestamp" >
			<packageset dir="src/grouper-ws" defaultexcludes="yes">
				<include name="edu/internet2/middleware/grouper/**" />

			</packageset>

			<link href="http://struts.apache.org/1.2.x/api/" />
			<link href="http://java.sun.com/j2ee/sdk_1.3/techdocs/api" />
			<link href="http://java.sun.com/j2se/1.4.2/docs/api" />

		</javadoc>

		<!-- replace .html?edu/internet2/middleware/grouper/webservices/GrouperService.html" with 
		.html" -->
		<!-- take out existing params, these are used by javascript to go to frames gracefully, trash them -->
		<replaceregexp flags="g">
			<regexp pattern="\.html\?[^&quot; ]*&quot;" />
			<substitution expression="\.html&quot;" />
			<fileset dir="doc/api" includes="**/*.html" />
		</replaceregexp>
		<!-- replace relative links, e.g. method links -->
		<replaceregexp flags="g">
			<regexp pattern="\.html#([^&quot;>]*)&quot;" />
			<substitution expression="\.html?view=co#\1&quot;" />
			<fileset dir="doc/api" includes="**/*.html" />
		</replaceregexp>
		<!-- replace onLoad="top.loadFrames()" with onLoad="", this javascript messes things up with viewvc params -->
		<replace file="doc/api/index.html">
			<replacetoken><![CDATA[onLoad="top.loadFrames()"]]></replacetoken>
			<replacevalue><![CDATA[onLoad=""]]></replacevalue>
		</replace>
		<!-- replace for cvs web: .html" with .html?view=co"   -->
		<replace dir="doc/api" value=".html?view=co&quot;">
			<include name="**/*.html" />
			<replacetoken><![CDATA[.html"]]></replacetoken>
		</replace>
		<replace dir="doc/api" value=".css?view=co&quot;">
			<include name="**/*.html" />
			<replacetoken><![CDATA[.css"]]></replacetoken>
		</replace>


	</target>

	<target name="tomcatStop">
		<if>
			<!-- make sure listening on the debug port -->
			<socket server="localhost" port="${tomcat.port}" />
			<then>
				<!-- stop the tomcat server -->
				<exec dir="${tomcat.dir}" executable="cmd ">
					<arg line="/c ${tomcat.dir}\bin\catalina.bat stop" />
				</exec>
				<!-- give it a sec to release resources -->
				<antcall target="tomcatWaitFor" />
			</then>
		</if>
	</target>

	<target name="tomcatWaitFor">
		<if>
			<!-- make sure listening on the debug port -->
			<socket server="localhost" port="${tomcat.port}"  />
			<then>
				<sleep seconds="3" />
			</then>
		</if>
		<if>
			<!-- make sure listening on the debug port -->
			<socket server="localhost" port="${tomcat.port}" />
			<then>
				<sleep seconds="3" />
			</then>
		</if>
		<if>
			<!-- make sure listening on the debug port -->
			<socket server="localhost" port="${tomcat.port}" />
			<then>
				<sleep seconds="3" />
			</then>
		</if>
		<if>
			<!-- make sure listening on the debug port -->
			<socket server="localhost" port="${tomcat.port}" />
			<then>
				<sleep seconds="3" />
			</then>
		</if>
		<if>
			<!-- make sure listening on the debug port -->
			<socket server="localhost" port="${tomcat.port}" />
			<then>
				<sleep seconds="3" />
			</then>
		</if>
		<if>
			<!-- make sure listening on the debug port -->
			<socket server="localhost" port="${tomcat.port}" />
			<then>
				<sleep seconds="3" />
			</then>
		</if>
		<if>
			<!-- make sure listening on the debug port -->
			<socket server="localhost" port="${tomcat.port}" />
			<then>
				<sleep seconds="3" />
			</then>
		</if>
		<if>
			<!-- make sure listening on the debug port -->
			<socket server="localhost" port="${tomcat.port}" />
			<then>
				<sleep seconds="3" />
			</then>
		</if>
	</target>

</project>
