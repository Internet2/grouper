#The Grouper UI requires an instance of the Grouper API. This can be a binary distribution
#or a source distribution which has had the 'dist' ant target run.
#If a java/src directory is present the Grouper UI ant html task will create combined
#Javadoc for the UI and the API
grouper.folder=../grouper

#if this is not a grouper source dir, might need to reset some of these
#put the grouper lib dir here
#note, any grouper*.jars here will be ignored.
#e.g. from external:   C:/mchyzer/isc/dev/grouper-qs-1.2.0/grouper/lib/grouper
grouper.lib.dir=${grouper.folder}/lib/grouper

#put the grouper jar dir here
#e.g. from external:   C:/mchyzer/isc/dev/grouper-qs-1.2.0/grouper/dist/lib/grouper.jar
grouper.jar.name=${grouper.folder}/dist/lib/grouper.jar

#By default the Grouper API log4j.properties file references a System property
#grouper.home. Before building / deploying the UI you should ensure that your
#application server e.g. Tomcat has a System property called grouper.home set*
#or you should replace ${grouper.home} with a valid path. The property below
#will cause ${grouper.home} in log4j.properties to be replaced with the grouper folder
#defined below. This is OK when building and deploying on the same system, however, 
#if you are making a WAR file to deploy else where you should not rely on this mechanism. 
#* Start your application server with a -Dgrouper.home=<grouper dir>
replace.grouper.home=true

#Must be set to * (any role - including none) or an actual role name (e.g. grouper_user) such that
#HttpServletRequest.isUserInRole(<role_name>) is true for a user to be able to 
#log into the UI
grouper.role=*

# Set to false if you want to make manual changes to web.xml or to speed up build
# If you set to false you will need to delete the web.xml to force it to be 
# re-built 
web.xml.overwrite=true

#Switches to UI specific log4j.properties
#use.local.log4j=true

#Make sure directory exists!
#local.log4j.output-dir=c:/tomcat_5-5/logs/

#If you want to email errors append to grouper_mail - only works with use.local.log4j=true
error.append=grouper_log
#error.append=grouper_log,grouper_mail
#Change to valid email addresses
error.mail.to=to@yourhost.edu
error.mail.from=from@yourhost.edu
#Change to a valid smtp server
error.mail.host=smtp.yourhost.edu
error.mail.threshold=ERROR
error.mail.buffer-size=100
error.mail.subject=Grouper UI Error

#uncomment and correct path for subject.folder if you want to generate Subject API
#Javadoc in with Grouper Javadoc
#subject.folder=C:/delete/subject-2005-07-11/subject

#If you are making changes to the API, make sure to uncomment grouper.compile.api=true
#grouper.folder must be set to a source distribution
#grouper.compile.api=true
ui.folder=${basedir}

#Compile UI Java files into temporary folder, JAR and copy to WEB-INF/lib
#Comment out to compile UI Java files direct to WEB-INF/classes
ui.make.jar=true

#Determines the name of the web application
webapp.name=grouper

#Where to build
dist.home=${basedir}/dist
default.webapp.folder=${basedir}/build/${webapp.name}
default.webapp.folder.cleanable=true

#You could insr=tead build in situ - see comments in build.xml
#default.webapp.folder=${basedir}/webapp
#default.webapp.folder.cleanable=false


#add an additonal build file to incorporate site specific changes
#additional.build=${basedir}/../custom-grouper-ui/additional-build.xml

#For development keep these if you want to be able to debug the UI Java source
debug.level=lines,vars,source

########################################################
#You can provide an additional build file which sets 'webapp.folder' so you can build
#to an appropriate location. This provides a way of overriding the 'default.webapp.folder'
#specified above. The build file could present a choice of locations. You must output a file
#called choice.properties and set the property webapp.folder
########################################################
#webapp.choose.build=

##################################################################
#The grouper UI has only been tested with tomcat 4.1x and 5.5. The following properties allow stopping and starting
#of the grouper webapp and determine if and where a grouper.xml (context.xml format) is copied
##################################################################

####Url for Tomcat manager
#deploy.manager.url=http://localhost:8080/manager

####Who to authenticate as
#deploy.manager.username=<local user name>
#deploy.manager.password=<password>

####Web application context - as seen by end user
deploy.context.path=/${webapp.name}

####Root of Tomcat installation
#deploy.home=c:/tomcat_4-1-18

####If you are deploying by war to the webapps dir, then you might consider not having a 
####context.xml, it will explode the war with each restart, preventing patching
should.copy.context.xml.to.metainf=false


####Name of context xml file - this will be copied to META-INF and possibly to tomcat webapps directory
####Look at template-tomcat-context.xml for example - you can copy this and adjust 
deploy.context.xml=tomcat-context.xml



####Where to copy the context xml - note that the location for Tomcat 5-5 depends on server.xml settings
####Setting this value lets the build script automatically install your webapp on a local Tomcat instance 
#deploy.context.dir=c:/tomcat_4-1-18/webapps
#deploy.context.dir=c:/Tomcat_5-5/conf/Catalina/localhost

###If the jdbc drivers should be copied from grouper
copy.grouper.jdbc.sample.drivers=true

