
description = 'Subject API'
dependencies {
  compile project(':grouper-misc:morphString')
  compile project(':grouper-misc:grouperClient')
  compile group: 'commons-collections', name: 'commons-collections', version:commons_collections_version
  compile group: 'cglib', name: 'cglib', version:cglib_version
  compile group: 'commons-logging', name: 'commons-logging', version:commons_logging_version
  compile group: 'commons-digester', name: 'commons-digester', version:commons_digester_version
  compile group: 'commons-lang', name: 'commons-lang', version:commons_lang_version
  compile group: 'org.apache.commons', name: 'commons-jexl', version:commons_jexl_version
  compile group: 'c3p0', name: 'c3p0', version:c3p0_version
  compile group: 'commons-pool', name: 'commons-pool', version:commons_pool_version
  compile group: 'edu.vt.middleware', name: 'vt-ldap', version:vt_ldap_version
  compile group: 'hsqldb', name: 'hsqldb', version:hsqldb_version
  compile group: 'org.bouncycastle', name: 'bcprov-jdk16', version:bcprov_jdk16_version
  runtime group: 'p6spy', name: 'p6spy', version:p6spy_version
}

sourceSets {
  main {
    java {
      srcDir 'src'
      include '**/*.java'
    }
    resources {
      srcDirs 'conf', 'src/grouper/'
      include '**/*.xml', '**/*.properties'
    }
    output.resourcesDir = 'dist/build'
    output.classesDir   = 'dist/bin'
  }
  test {
    java {
      srcDir 'tests'
      include '**/*.java'
    }
    resources {
      srcDirs 'tests', 'confForTest'
      include '**/*.properties', '**/*.xml', '**/*Test.class', '**/*Tests.class'
    }
    output.resourcesDir = 'dist/build'
    output.classesDir   = 'dist/bin'
  }
}

task sourcesJar(type: Jar, overwrite: true) {
  classifier = 'sources'
  from sourceSets.main.allSource
  destinationDir = new File(projectDir, 'dist/libs')
}

task testJar(type: Jar, dependsOn: testClasses, description: "archive the testClasses", overwrite: true) {
  baseName = "${project.archivesBaseName}-tests"
  classifier = "tests"
  from sourceSets.test.output
  destinationDir = new File(projectDir, 'dist/libs')
}

task javadocJar(type: Jar, dependsOn: javadoc, overwrite: true) {
  classifier = 'javadoc'
  from javadoc.destinationDir
  destinationDir = new File(projectDir, 'dist/libs')
}

task sourcesZip(type: Zip) {
    classifier = 'sources'
    from sourceSets.main.allSource
    destinationDir = new File(projectDir, 'dist')
    // into projectDir
    description = "Create zip file of every source output and store it inside build/distributions/version directory"
}

task gzipFile(type: Tar) {
    from 'doc'
    from 'lib'
    from 'src'
    from 'build.gradle'
    extension = 'tgz'
    compression = Compression.GZIP
    description = "Create gzip file from doc, lib, src directories and output jar file"
    destinationDir = new File(projectDir, 'dist')
}

clean{
    delete 'archive', 'dist'
}

build.finalizedBy(gzipFile, sourcesZip, sourcesJar, testJar, javadocJar)